/*
	
	Assembler code implementation file for ppc generated by ADL.
	
	*/

#ifndef _MSC_VER
extern "C" {
  #  include "as.h"
}
#endif

#include <stdio.h>
#include <sstream>
#include <string>

extern "C" {
  #  include "as.h"
  #  include "bfd/elf-bfd.h"
  #  include "bfd/bfd.h"
  #  include "bfd/libbfd.h"
}

#define __NO_RNUMBER__

#include "adl-asm-impl.h"
#include "adl-asm-info.h"

#include "helpers/Macros.h"
#include "helpers/le_sintbv.h"
#define bits le_intbv
#define sbits le_sintbv

#define ns_bits le_intbv
#define ns_sbits le_sintbv

#include "helpers/LogUsage.h"
#include "helpers/TypeConv.h"
extern "C" {
  #include "tc-ppc.h"
}

using namespace std;

using namespace adl;



/* Figure out the BFD architecture to use.  These functions 
   are called well before md_begin, when the output file is opened.  */ 

enum bfd_architecture ppc_arch () 
{
  return ADL_TARGET_ARCH;
}

const char adl_parallel_separator_chars[] = "";
const char adl_symbol_chars[] = "";
const char comment_chars[] = "#";
const char line_comment_chars[] = "#";
const char line_separator_chars[] = "";
const char packet_begin_chars[] = "";
const char packet_end_chars[] = "";
static const char *init_comment_strs[] = { 0 };
static int init_num_comment_strs = 0;
static const char *init_line_comment_strs[] = { 0 };
static int init_num_line_comment_strs = 0;
static int init_queue_size = 1;
static int init_queue_offset = 0;
unsigned long ppc_mach ()
{
  return default_adl_mach();
}

extern char*
ppc_target_format ()
{
  return default_adl_target_format();
}



static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_error(msg,pos,current_position);
}

static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_info(msg,pos,current_position);
}

// Prefix variables.
struct adl_prefix_field *pfx_fields0[] = { 0 };
struct adl_prefix_fields pfx_queue[] = {{pfx_fields0},};
// Prefix counters.

static void reset_prefix_counters()
{
}

 int evt_type ( int et );
 unsigned long long get_imm_dat ( unsigned isreg , unsigned long long x );
 unsigned get_loop_immed ( unsigned mode , unsigned val );
 unsigned get_loop_wr ( unsigned mode , unsigned val );
 unsigned get_maxsN ( unsigned x );
 unsigned get_mode ( unsigned x );
 unsigned get_wr ( unsigned notzero , unsigned x );
 unsigned is_addr_oram ( unsigned x );
 unsigned is_addr_oram_tram ( unsigned x );
 unsigned is_addr_tram_wr ( unsigned x );
 unsigned is_addr_wr ( unsigned x );
 unsigned is_addr_wr_spr ( unsigned x );
 unsigned is_maxsN ( unsigned x );
 unsigned is_not_register ( unsigned x );
 unsigned validate_addr ( unsigned x , int isdest );
//
// Instruction field inserter functions.
//

static  void set_adptv_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 18);
}

static  void set_adptv_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 25);
}

static  void set_adptv_shft_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 17);
}

static  void set_adptv_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3f) << 10);
}

static  void set_bin_sz_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 18);
}

static  void set_blk_dest_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0x7f) << 16);
}

static  void set_blk_src_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xff) << 24);
}

static  void set_cc_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff) << 16);
}

static  void set_cc_re_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 16);
}

static  void set_cp_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0xf) << 16);
}

static  void set_cyc_extn_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 17);
}

static  void set_dat_sz_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1));
}

static  void set_data_packing_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3f) << 18);
}

static  void set_dest_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[2] |= ((val&0xffff));
}

static  void set_dest_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xff));
}

static  void set_dsp_value_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffffffff));
  val >>=   0x20;
  x[1] |= ((val&0x7fffffff));
}

static  void set_ev_lvl_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_ev_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 23);
}

static  void set_evt_ev_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x7) << 16);
}

static  void set_extra_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff));
}

static  void set_fft_rnd_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x7) << 20);
}

static  void set_fft_rnd_rdx2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x7) << 20);
}

static  void set_hist_mode_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 20);
}

static  void set_ima_fld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 13);
}

static  void set_imdt_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 16);
}

static  void set_imm_dat_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffffffff));
  val >>=   0x20;
  x[1] |= ((val&0xffff));
}

static  void set_immed_or_reg_src_fld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_immed_or_reg_src_loop_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_in_dattyp_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_in_dattyp2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 24);
}

static  void set_in_dattyp_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 24);
}

static  void set_in_pack_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 14);
}

static  void set_in_tag_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 20);
}

static  void set_init_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 20);
}

static  void set_ip_pack_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 14);
}

static  void set_jmp_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffffffff));
}

static  void set_jmp_sel_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0xf) << 21);
}

static  void set_jmp_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_jmp_wr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[2] |= ((val&0x3f) << 16);
}

static  void set_loc_n_abs_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 19);
}

static  void set_loop_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0xffff));
}

static  void set_loop_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[2] |= ((val&0x3f) << 16);
}

static  void set_mask_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 16);
}

static  void set_maxsn_en_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 16);
}

static  void set_maxsn_sel_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 16);
}

static  void set_mca_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1ff) << 16);
}

static  void set_mca_mod_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 28);
}

static  void set_modulo_val_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1f));
}

static  void set_mult_coef_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff) << 16);
}

static  void set_mult_mod_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 8);
}

static  void set_mult_s_exp_n_val_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff) << 16);
}

static  void set_no_of_taps_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0xf) << 16);
}

static  void set_op_pack_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 16);
}

static  void set_opram_continuous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xff) << 24);
  val >>=   0x8;
  x[1] |= ((val&0xf));
}

static  void set_opram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff) << 16);
}

static  void set_opram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xfff) << 4);
}

static  void set_opsq1_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 23);
}

static  void set_opsq2s1_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 21);
}

static  void set_opsq2s2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x7) << 18);
}

static  void set_opsq2s3_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 17);
}

static  void set_pack_en_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 14);
}

static  void set_pre_proc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 22);
}

static  void set_quad_ext_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 16);
}

static  void set_re_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_re_im_coeff_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 23);
}

static  void set_real_fft_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 19);
}

static  void set_repeat_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 14);
}

static  void set_repeat2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 14);
}

static  void set_rpt_addr_incr0_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xfff) << 16);
}

static  void set_rpt_addr_incr1_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xfff));
}

static  void set_rpt_addr_incr2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xfff) << 16);
}

static  void set_rpt_addr_incr3_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xfff));
}

static  void set_rpt_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1fff));
}

static  void set_rst_acc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 21);
}

static  void set_rst_acc_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 25);
}

static  void set_rst_n_keep_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 15);
}

static  void set_se_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 24);
}

static  void set_sel_src1_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 16);
}

static  void set_sel_src3_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff));
}

static  void set_sel_wr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[2] |= ((val&0x3f) << 16);
}

static  void set_set_size_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 16);
}

static  void set_shft_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 25);
}

static  void set_shft_src_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 7);
}

static  void set_shft_val_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 4);
}

static  void set_shft_wr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3f) << 10);
}

static  void set_shift_fld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 24);
}

static  void set_sort_rank_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 18);
}

static  void set_sort_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 16);
}

static  void set_src2_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff) << 16);
}

static  void set_src_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[2] |= ((val&0xffff) << 16);
}

static  void set_src_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xff) << 8);
}

static  void set_sync_async_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 16);
}

static  void set_sync_csid_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1f));
}

static  void set_sync_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 24);
}

static  void set_sysram_continous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xfff));
}

static  void set_sysram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[2] |= ((val&0xffffffff));
}

static  void set_sysram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xfff) << 12);
}

static  void set_tag_n_bitfld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 18);
}

static  void set_tap_coef_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[1] |= ((val&0xffff) << 16);
}

static  void set_th_id_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf));
}

static  void set_thld_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff));
}

static  void set_thld_cmp_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 21);
}

static  void set_threshold_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3f) << 10);
}

static  void set_trans_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1) << 17);
}

static  void set_tw_ovs_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf));
}

static  void set_vec_sz_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x1fff));
}

static  void set_vector_len_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0xffff));
}

static  void set_wait_ev_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x7f));
}

static  void set_wdog_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffffff));
}

static  void set_wdog_ev_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x7) << 16);
}

static  void set_wdog_ev_tr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 24);
}

static  void set_wdog_op_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 20);
}

static  void set_win_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 23);
}

static  void set_win_type_rdx_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[3] |= ((val&0x3) << 23);
}


//
// Instruction field clearer functions.
//

static  void clear_adptv_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x40000);
  
}

static  void clear_adptv_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xe000000);
  
}

static  void clear_adptv_shft_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x20000);
  
}

static  void clear_adptv_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfc00);
  
}

static  void clear_bin_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc0000);
  
}

static  void clear_blk_dest_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x7f0000);
  
}

static  void clear_blk_src_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff000000);
  
}

static  void clear_cc_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff0000);
  
}

static  void clear_cc_re_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0000);
  
}

static  void clear_cp_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xf0000);
  
}

static  void clear_cyc_extn_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x20000);
  
}

static  void clear_dat_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1);
  
}

static  void clear_data_packing_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfc0000);
  
}

static  void clear_dest_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffff);
  
}

static  void clear_dest_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff);
  
}

static  void clear_dsp_value_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x7fffffff);
    x[0] = x[0] & (~0xffffffff);
  
}

static  void clear_ev_lvl_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_ev_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1800000);
  
}

static  void clear_evt_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x70000);
  
}

static  void clear_extra_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff);
  
}

static  void clear_fft_rnd_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x700000);
  
}

static  void clear_fft_rnd_rdx2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x700000);
  
}

static  void clear_hist_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x300000);
  
}

static  void clear_ima_fld_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000);
  
}

static  void clear_imdt_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0000);
  
}

static  void clear_imm_dat_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff);
    x[0] = x[0] & (~0xffffffff);
  
}

static  void clear_immed_or_reg_src_fld_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_immed_or_reg_src_loop_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_in_dattyp_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_in_dattyp2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x3000000);
  
}

static  void clear_in_dattyp_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1000000);
  
}

static  void clear_in_pack_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc000);
  
}

static  void clear_in_tag_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x100000);
  
}

static  void clear_init_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x100000);
  
}

static  void clear_ip_pack_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc000);
  
}

static  void clear_jmp_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffffffff);
  
}

static  void clear_jmp_sel_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1e00000);
  
}

static  void clear_jmp_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_jmp_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x3f0000);
  
}

static  void clear_loc_n_abs_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x80000);
  
}

static  void clear_loop_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff);
  
}

static  void clear_loop_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x3f0000);
  
}

static  void clear_mask_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0000);
  
}

static  void clear_maxsn_en_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x10000);
  
}

static  void clear_maxsn_sel_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x30000);
  
}

static  void clear_mca_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1ff0000);
  
}

static  void clear_mca_mod_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0000000);
  
}

static  void clear_modulo_val_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1f);
  
}

static  void clear_mult_coef_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff0000);
  
}

static  void clear_mult_mod_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300);
  
}

static  void clear_mult_s_exp_n_val_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff0000);
  
}

static  void clear_no_of_taps_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xf0000);
  
}

static  void clear_op_pack_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x10000);
  
}

static  void clear_opram_continuous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xf);
    x[0] = x[0] & (~0xff000000);
  
}

static  void clear_opram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff0000);
  
}

static  void clear_opram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xfff0);
  
}

static  void clear_opsq1_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x800000);
  
}

static  void clear_opsq2s1_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x600000);
  
}

static  void clear_opsq2s2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1c0000);
  
}

static  void clear_opsq2s3_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x20000);
  
}

static  void clear_pack_en_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc000);
  
}

static  void clear_pre_proc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc00000);
  
}

static  void clear_quad_ext_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x10000);
  
}

static  void clear_re_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_re_im_coeff_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1800000);
  
}

static  void clear_real_fft_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x80000);
  
}

static  void clear_repeat_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc000);
  
}

static  void clear_repeat2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc000);
  
}

static  void clear_rpt_addr_incr0_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xfff0000);
  
}

static  void clear_rpt_addr_incr1_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xfff);
  
}

static  void clear_rpt_addr_incr2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0000);
  
}

static  void clear_rpt_addr_incr3_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff);
  
}

static  void clear_rpt_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1fff);
  
}

static  void clear_rst_acc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x200000);
  
}

static  void clear_rst_acc_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x2000000);
  
}

static  void clear_rst_n_keep_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x8000);
  
}

static  void clear_se_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1000000);
  
}

static  void clear_sel_src1_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0000);
  
}

static  void clear_sel_src3_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff);
  
}

static  void clear_sel_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x3f0000);
  
}

static  void clear_set_size_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x30000);
  
}

static  void clear_shft_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xe000000);
  
}

static  void clear_shft_src_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80);
  
}

static  void clear_shft_val_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70);
  
}

static  void clear_shft_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfc00);
  
}

static  void clear_shift_fld_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1000000);
  
}

static  void clear_sort_rank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c0000);
  
}

static  void clear_sort_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x10000);
  
}

static  void clear_src2_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff0000);
  
}

static  void clear_src_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffff0000);
  
}

static  void clear_src_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff00);
  
}

static  void clear_sync_async_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x10000);
  
}

static  void clear_sync_csid_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1f);
  
}

static  void clear_sync_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x3000000);
  
}

static  void clear_sysram_continous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff);
  
}

static  void clear_sysram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffffffff);
  
}

static  void clear_sysram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff000);
  
}

static  void clear_tag_n_bitfld_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x40000);
  
}

static  void clear_tap_coef_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffff0000);
  
}

static  void clear_th_id_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf);
  
}

static  void clear_thld_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff);
  
}

static  void clear_thld_cmp_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x200000);
  
}

static  void clear_threshold_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfc00);
  
}

static  void clear_trans_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x20000);
  
}

static  void clear_tw_ovs_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf);
  
}

static  void clear_vec_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1fff);
  
}

static  void clear_vector_len_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff);
  
}

static  void clear_wait_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x7f);
  
}

static  void clear_wdog_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffffff);
  
}

static  void clear_wdog_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x70000);
  
}

static  void clear_wdog_ev_tr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x3000000);
  
}

static  void clear_wdog_op_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x300000);
  
}

static  void clear_win_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1800000);
  
}

static  void clear_win_type_rdx_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1800000);
  
}


// For field adptv
enum_field _sym1[] = { { ".adptv", 1 }, { ".noadptv", 0 }, };
enum_fields _sym2 = { _sym1 , 2 };

// For field adptv_ofst
enum_field _sym3[] = { { ".bits_0_5", 0 }, { ".bits_12_17", 2 }, { ".bits_18_23", 3 }, { ".bits_24_29", 4 }, { ".bits_30_35", 5 }, { ".bits_36_41", 6 }, { ".bits_42_47", 7 }, { ".bits_6_11", 1 }, };
enum_fields _sym4 = { _sym3 , 8 };

// For field adptv_shft
enum_field _sym5[] = { { ".15down", 0 }, { ".23down", 1 }, };
enum_fields _sym6 = { _sym5 , 2 };

// For field bin_sz
enum_field _sym7[] = { { ".16_24bins", 0 }, { ".32bins", 1 }, { ".64bins", 2 }, };
enum_fields _sym8 = { _sym7 , 3 };

// For field cp_type
enum_field _sym9[] = { { ".copy_bck", 14 }, { ".copy_clear", 11 }, { ".copy_fwd", 13 }, { ".copy_imag_pack", 5 }, { ".copy_real_pack", 4 }, { ".copy_shift", 12 }, { ".copy_unpack", 6 }, { ".partial_copy_i2r", 10 }, { ".partial_copy_imag", 8 }, { ".partial_copy_r2i", 9 }, { ".partial_copy_real", 7 }, { ".simple_copy", 0 }, { ".threshold_ge", 1 }, { ".threshold_lt", 2 }, { ".transpose_bck", 14 }, { ".transpose_copy", 3 }, { ".transpose_fwd", 13 }, };
enum_fields _sym10 = { _sym9 , 17 };

// For field cyc_extn
enum_field _sym11[] = { { ".cyc_ext", 1 }, { ".no_cyc_ext", 0 }, };
enum_fields _sym12 = { _sym11 , 2 };

// For field dat_sz
enum_field _sym13[] = { { ".16bits", 0 }, { ".24bits", 1 }, };
enum_fields _sym14 = { _sym13 , 2 };

// For field data_packing
enum_field _sym15[] = { { ".16clubbing", 6 }, { ".16cmplx", 0 }, { ".16real", 3 }, { ".16swap", 5 }, { ".24cmplx", 1 }, { ".24real", 2 }, { ".48bin", 4 }, { ".CP16_FMTA", 23 }, { ".CP16_FMTB", 24 }, { ".CP16_FMTC", 25 }, { ".CP16_FMTD", 26 }, { ".CP32_FMTB", 27 }, { ".CP4Q", 17 }, { ".CP4Q_FMTA", 18 }, { ".CP4Q_FMTB", 19 }, { ".CP8D_FMTA", 20 }, { ".CP8D_FMTB", 21 }, { ".CP8D_FMTC", 22 }, { ".abs_16_tagged", 43 }, { ".abs_16_untagged", 40 }, { ".abs_24_tagged", 49 }, { ".abs_24_untagged", 46 }, { ".abs_32_untagged", 52 }, { ".abs_8_tagged", 37 }, { ".abs_8_untagged", 34 }, { ".idx_16_tagged", 44 }, { ".idx_16_untagged", 41 }, { ".idx_24_tagged", 50 }, { ".idx_24_untagged", 47 }, { ".idx_32_untagged", 53 }, { ".idx_8_tagged", 38 }, { ".idx_8_untagged", 35 }, { ".idx_sum16_tagged", 45 }, { ".idx_sum16_untagged", 42 }, { ".idx_sum24_tagged", 51 }, { ".idx_sum24_untagged", 48 }, { ".idx_sum32_untagged", 54 }, { ".idx_sum8_tagged", 39 }, { ".idx_sum8_untagged", 36 }, };
enum_fields _sym16 = { _sym15 , 39 };

// For field ev_lvl
enum_field _sym17[] = { { ".high", 1 }, { ".low", 0 }, };
enum_fields _sym18 = { _sym17 , 2 };

// For field ev_type
enum_field _sym19[] = { { ".cpu", 1 }, { ".ext", 2 }, { ".int", 3 }, };
enum_fields _sym20 = { _sym19 , 3 };

// For field evt_ev
enum_field _sym21[] = { { ".bit0", 0 }, { ".bit1", 1 }, { ".bit2", 2 }, { ".bit3", 3 }, { ".bit4", 4 }, { ".bit5", 5 }, { ".bit6", 6 }, { ".bit7", 7 }, { ".lsb", 0 }, { ".msb", 7 }, };
enum_fields _sym22 = { _sym21 , 10 };

// For field fft_rnd
enum_field _sym23[] = { { ".round0", 0 }, { ".round1", 1 }, { ".round2", 2 }, { ".round3", 3 }, { ".round4", 4 }, { ".round5", 5 }, };
enum_fields _sym24 = { _sym23 , 6 };

// For field fft_rnd_rdx2
enum_field _sym25[] = { { ".round1", 1 }, { ".round2", 2 }, { ".round3", 3 }, { ".round4", 4 }, { ".round5", 5 }, };
enum_fields _sym26 = { _sym25 , 5 };

// For field hist_mode
enum_field _sym27[] = { { ".acc", 2 }, { ".read", 1 }, { ".read_store", 0 }, { ".store", 3 }, };
enum_fields _sym28 = { _sym27 , 4 };

// For field ima_fld
enum_field _sym29[] = { { ".imm", 0 }, { ".ind", 1 }, };
enum_fields _sym30 = { _sym29 , 2 };

// For field immed_or_reg_src_fld
enum_field _sym31[] = { { "", 1 }, { ".immed", 0 }, { ".reg", 1 }, };
enum_fields _sym32 = { _sym31 , 3 };

// For field immed_or_reg_src_loop
enum_field _sym33[] = { { "", 0 }, { ".immed", 0 }, { ".reg", 1 }, };
enum_fields _sym34 = { _sym33 , 3 };

// For field in_dattyp
enum_field _sym35[] = { { ".cmplx", 1 }, { ".real", 0 }, };
enum_fields _sym36 = { _sym35 , 2 };

// For field in_dattyp2
enum_field _sym37[] = { { ".cmplx", 1 }, { ".log2", 2 }, { ".real", 0 }, };
enum_fields _sym38 = { _sym37 , 3 };

// For field in_dattyp_vmt
enum_field _sym39[] = { { ".cmplx", 1 }, { ".real", 0 }, };
enum_fields _sym40 = { _sym39 , 2 };

// For field in_pack
enum_field _sym41[] = { { ".in_24im", 1 }, { ".in_24real", 0 }, { ".in_48packed", 2 }, };
enum_fields _sym42 = { _sym41 , 3 };

// For field in_tag
enum_field _sym43[] = { { ".no_tag_in", 0 }, { ".tag_in", 1 }, };
enum_fields _sym44 = { _sym43 , 2 };

// For field init
enum_field _sym45[] = { { ".const_init", 1 }, { ".zero_init", 0 }, };
enum_fields _sym46 = { _sym45 , 2 };

// For field ip_pack
enum_field _sym47[] = { { ".in_24im", 1 }, { ".in_24real", 0 }, { ".in_48", 2 }, };
enum_fields _sym48 = { _sym47 , 3 };

// For field jmp_sel
enum_field _sym49[] = { { ".bit0", 0 }, { ".bit1", 1 }, { ".bit2", 2 }, { ".bit3", 3 }, { ".bit4", 4 }, { ".bit5", 5 }, { ".bit6", 6 }, { ".bit7", 7 }, { ".bit8", 8 }, { ".bit9", 9 }, };
enum_fields _sym50 = { _sym49 , 10 };

// For field jmp_type
enum_field _sym51[] = { { "", 0 }, { ".always", 0 }, { ".cond", 1 }, };
enum_fields _sym52 = { _sym51 , 3 };

// For field loc_n_abs
enum_field _sym53[] = { { ".global_max", 0 }, { ".local_max", 1 }, };
enum_fields _sym54 = { _sym53 , 2 };

// For field maxsn_en
enum_field _sym55[] = { { ".masxn_dis", 0 }, { ".maxsn_en", 1 }, };
enum_fields _sym56 = { _sym55 , 2 };

// For field maxsn_sel
enum_field _sym57[] = { { ".maxsn_16", 1 }, { ".maxsn_4", 3 }, { ".maxsn_8", 2 }, { ".no_maxsn", 0 }, };
enum_fields _sym58 = { _sym57 , 4 };

// For field mca_mod
enum_field _sym59[] = { { "", 0 }, { ".mod0", 0 }, { ".mod128", 7 }, { ".mod16", 4 }, { ".mod2", 1 }, { ".mod256", 8 }, { ".mod32", 5 }, { ".mod4", 2 }, { ".mod512", 9 }, { ".mod64", 6 }, { ".mod8", 3 }, };
enum_fields _sym60 = { _sym59 , 11 };

// For field modulo_val
enum_field _sym61[] = { { "", 0 }, { ".mod0", 0 }, { ".mod1", 1 }, { ".mod10", 10 }, { ".mod11", 11 }, { ".mod12", 12 }, { ".mod13", 13 }, { ".mod14", 14 }, { ".mod15", 15 }, { ".mod16", 16 }, { ".mod17", 17 }, { ".mod18", 18 }, { ".mod19", 19 }, { ".mod2", 2 }, { ".mod20", 20 }, { ".mod21", 21 }, { ".mod22", 22 }, { ".mod23", 23 }, { ".mod24", 24 }, { ".mod3", 3 }, { ".mod4", 4 }, { ".mod5", 5 }, { ".mod6", 6 }, { ".mod7", 7 }, { ".mod8", 8 }, { ".mod9", 9 }, };
enum_fields _sym62 = { _sym61 , 26 };

// For field mult_mod
enum_field _sym63[] = { { ".caddr", 2 }, { ".const", 1 }, { ".immed", 0 }, };
enum_fields _sym64 = { _sym63 , 3 };

// For field op_pack
enum_field _sym65[] = { { ".op_off", 0 }, { ".op_on", 1 }, };
enum_fields _sym66 = { _sym65 , 2 };

// For field opsq1
enum_field _sym67[] = { { ".no_sq1", 0 }, { ".sq1", 1 }, };
enum_fields _sym68 = { _sym67 , 2 };

// For field opsq2s1
enum_field _sym69[] = { { ".abs_sq2s1", 1 }, { ".conj_sq2s1", 3 }, { ".mag_sq2s1", 2 }, { ".no_sq2s1", 0 }, };
enum_fields _sym70 = { _sym69 , 4 };

// For field opsq2s2
enum_field _sym71[] = { { ".no_sq2s2", 0 }, { ".shft_sq2s2", 1 }, { ".vec_sq2s2", 4 }, { ".wr_off_sq2s2", 2 }, { "imm_off_sqs2", 3 }, };
enum_fields _sym72 = { _sym71 , 5 };

// For field opsq2s3
enum_field _sym73[] = { { ".no_sq2s3", 0 }, { ".sum_sq2s3", 1 }, };
enum_fields _sym74 = { _sym73 , 2 };

// For field pack_en
enum_field _sym75[] = { { ".no_pack_im", 1 }, { ".no_pack_real", 0 }, { ".pack", 2 }, };
enum_fields _sym76 = { _sym75 , 3 };

// For field pdma_coherent
enum_field _sym77[] = { { "", 0 }, { ".coherent", 1 }, { ".nocoherent", 0 }, };
enum_fields _sym78 = { _sym77 , 3 };

// For field pdma_data_packing
enum_field _sym79[] = { { ".16clubbing", 6 }, { ".16cmplx", 0 }, { ".16real", 3 }, { ".16swap", 5 }, { ".24cmplx", 1 }, { ".24real", 2 }, { ".48bin", 4 }, { ".CP16_FMTA", 23 }, { ".CP16_FMTB", 24 }, { ".CP16_FMTC", 25 }, { ".CP16_FMTD", 26 }, { ".CP32_FMTB", 27 }, { ".CP4Q", 17 }, { ".CP4Q_FMTA", 18 }, { ".CP4Q_FMTB", 19 }, { ".CP8D_FMTA", 20 }, { ".CP8D_FMTB", 21 }, { ".CP8D_FMTC", 22 }, { ".abs_16_tagged", 43 }, { ".abs_16_untagged", 40 }, { ".abs_24_tagged", 49 }, { ".abs_24_untagged", 46 }, { ".abs_32_untagged", 52 }, { ".abs_8_tagged", 37 }, { ".abs_8_untagged", 34 }, { ".idx_16_tagged", 44 }, { ".idx_16_untagged", 41 }, { ".idx_24_tagged", 50 }, { ".idx_24_untagged", 47 }, { ".idx_32_untagged", 53 }, { ".idx_8_tagged", 38 }, { ".idx_8_untagged", 35 }, { ".idx_sum16_tagged", 45 }, { ".idx_sum16_untagged", 42 }, { ".idx_sum24_tagged", 51 }, { ".idx_sum24_untagged", 48 }, { ".idx_sum32_untagged", 54 }, { ".idx_sum8_tagged", 39 }, { ".idx_sum8_untagged", 36 }, };
enum_fields _sym80 = { _sym79 , 39 };

// For field pdma_se
enum_field _sym81[] = { { ".signext", 1 }, { ".zeropad", 0 }, };
enum_fields _sym82 = { _sym81 , 2 };

// For field pdma_sync_async
enum_field _sym83[] = { { ".async", 0 }, { ".sync", 1 }, };
enum_fields _sym84 = { _sym83 , 2 };

// For field pdma_trace
enum_field _sym85[] = { { "", 0 }, { ".notrace", 0 }, { ".trace", 1 }, };
enum_fields _sym86 = { _sym85 , 3 };

// For field pdma_trans_type
enum_field _sym87[] = { { ".opram2sysram", 1 }, { ".sysram2opram", 0 }, };
enum_fields _sym88 = { _sym87 , 2 };

// For field pre_proc
enum_field _sym89[] = { { ".abs_abs_proc", 1 }, { ".abs_mag_proc", 2 }, { ".no_pre", 0 }, };
enum_fields _sym90 = { _sym89 , 3 };

// For field quad_ext
enum_field _sym91[] = { { ".noqext", 0 }, { ".qext", 1 }, };
enum_fields _sym92 = { _sym91 , 2 };

// For field re_im
enum_field _sym93[] = { { ".im", 0 }, { ".re", 1 }, };
enum_fields _sym94 = { _sym93 , 2 };

// For field re_im_coeff
enum_field _sym95[] = { { ".coef_cmplx", 0 }, { ".coef_im", 2 }, { ".coef_re", 3 }, };
enum_fields _sym96 = { _sym95 , 3 };

// For field real_fft
enum_field _sym97[] = { { ".nosplit", 0 }, { ".opsplit", 1 }, };
enum_fields _sym98 = { _sym97 , 2 };

// For field repeat
enum_field _sym99[] = { { "", 0 }, { ".fft16", 2 }, { ".fft32", 3 }, { ".fft8", 1 }, { ".no_repeat", 0 }, };
enum_fields _sym100 = { _sym99 , 5 };

// For field repeat2
enum_field _sym101[] = { { "", 0 }, { ".fft32", 3 }, { ".fft8", 1 }, { ".no_repeat", 0 }, };
enum_fields _sym102 = { _sym101 , 4 };

// For field rst_acc
enum_field _sym103[] = { { ".no_rst", 0 }, { ".rst_wr", 1 }, };
enum_fields _sym104 = { _sym103 , 2 };

// For field rst_acc_vmt
enum_field _sym105[] = { { ".no_rst", 0 }, { ".rst_sum", 1 }, };
enum_fields _sym106 = { _sym105 , 2 };

// For field rst_n_keep
enum_field _sym107[] = { { ".keep_orig", 0 }, { ".reset_values", 1 }, };
enum_fields _sym108 = { _sym107 , 2 };

// For field se
enum_field _sym109[] = { { ".signext", 1 }, { ".zeropad", 0 }, };
enum_fields _sym110 = { _sym109 , 2 };

// For field set_size
enum_field _sym111[] = { { ".ss16", 2 }, { ".ss4", 0 }, { ".ss8", 1 }, };
enum_fields _sym112 = { _sym111 , 3 };

// For field shft_ofst
enum_field _sym113[] = { { ".bits_0_5", 0 }, { ".bits_12_17", 2 }, { ".bits_18_23", 3 }, { ".bits_24_29", 4 }, { ".bits_30_35", 5 }, { ".bits_36_41", 6 }, { ".bits_42_47", 7 }, { ".bits_6_11", 1 }, };
enum_fields _sym114 = { _sym113 , 8 };

// For field shft_src
enum_field _sym115[] = { { ".shft_val", 0 }, { ".shft_wr", 1 }, };
enum_fields _sym116 = { _sym115 , 2 };

// For field shft_val
enum_field _sym117[] = { { ".nosft", 0 }, { ".shift1", 1 }, { ".shift2", 2 }, { ".shift3", 3 }, { ".shift4", 4 }, { ".shift8", 5 }, };
enum_fields _sym118 = { _sym117 , 6 };

// For field shift_fld
enum_field _sym119[] = { { "", 1 }, { ".noshift", 0 }, { ".shift", 1 }, };
enum_fields _sym120 = { _sym119 , 3 };

// For field sync_async
enum_field _sym121[] = { { ".async", 0 }, { ".sync", 1 }, };
enum_fields _sym122 = { _sym121 , 2 };

// For field sync_type
enum_field _sym123[] = { { ".dsp", 3 }, { ".pdma", 1 }, { ".thread", 2 }, };
enum_fields _sym124 = { _sym123 , 3 };

// For field tag_n_bitfld
enum_field _sym125[] = { { ".packed_bitfld", 0 }, { ".tagged_vect", 1 }, };
enum_fields _sym126 = { _sym125 , 2 };

// For field thld_cmp
enum_field _sym127[] = { { ".no_thld_cmp", 0 }, { ".thld_cmp", 1 }, };
enum_fields _sym128 = { _sym127 , 2 };

// For field trans_type
enum_field _sym129[] = { { ".opram2sysram", 1 }, { ".sysram2opram", 0 }, };
enum_fields _sym130 = { _sym129 , 2 };

// For field tw_ovs
enum_field _sym131[] = { { ".noovs", 0 }, { ".ovs128", 7 }, { ".ovs16", 4 }, { ".ovs2", 1 }, { ".ovs256", 8 }, { ".ovs32", 5 }, { ".ovs4", 2 }, { ".ovs512", 9 }, { ".ovs64", 6 }, { ".ovs8", 3 }, };
enum_fields _sym132 = { _sym131 , 10 };

// For field wdog_ev
enum_field _sym133[] = { { ".ev0", 0 }, { ".ev1", 1 }, { ".ev2", 2 }, { ".ev3", 3 }, { ".rcs", 4 }, { ".rfs", 5 }, };
enum_fields _sym134 = { _sym133 , 6 };

// For field wdog_ev_tr
enum_field _sym135[] = { { ".l0", 0 }, { ".l1", 1 }, { ".neg", 3 }, { ".pos", 2 }, };
enum_fields _sym136 = { _sym135 , 4 };

// For field wdog_op
enum_field _sym137[] = { { ".event", 3 }, { ".reset", 2 }, { ".start", 0 }, { ".stop", 1 }, };
enum_fields _sym138 = { _sym137 , 4 };

// For field win_type
enum_field _sym139[] = { { ".cmplx_win", 1 }, { ".real_win_im_tram", 2 }, { ".real_win_real_tram", 3 }, };
enum_fields _sym140 = { _sym139 , 3 };

// For field win_type_rdx
enum_field _sym141[] = { { ".cmplx_win", 1 }, { ".no_win", 0 }, { ".real_win_im_tram", 2 }, { ".real_win_real_tram", 3 }, };
enum_fields _sym142 = { _sym141 , 4 };

// Instruction operands.
static struct adl_field ppc_operands [] = {
  {"adptv_width_128",0,0,1,set_adptv_width_128,clear_adptv_width_128,0,-1,-1,0,-1,0,&_sym2,0},	// 0
  {"adptv_ofst_width_128",1,1,3,set_adptv_ofst_width_128,clear_adptv_ofst_width_128,0,-1,-1,0,-1,0,&_sym4,0},	// 1
  {"adptv_shft_width_128",2,2,1,set_adptv_shft_width_128,clear_adptv_shft_width_128,0,-1,-1,0,-1,0,&_sym6,0},	// 2
  {"adptv_wrnum_width_128",3,3,6,set_adptv_wrnum_width_128,clear_adptv_wrnum_width_128,0,-1,-1,0,-1,0,0,0},	// 3
  {"bin_sz_width_128",4,4,2,set_bin_sz_width_128,clear_bin_sz_width_128,0,-1,-1,0,-1,0,&_sym8,0},	// 4
  {"blk_dest_inc_width_128",5,5,7,set_blk_dest_inc_width_128,clear_blk_dest_inc_width_128,0,-1,-1,0,-1,0,0,0},	// 5
  {"blk_src_inc_width_128",6,6,8,set_blk_src_inc_width_128,clear_blk_src_inc_width_128,0,-1,-1,0,-1,0,0,0},	// 6
  {"cc_im_width_128",7,7,16,set_cc_im_width_128,clear_cc_im_width_128,0,-1,-1,0,-1,0,0,0},	// 7
  {"cc_re_width_128",8,8,16,set_cc_re_width_128,clear_cc_re_width_128,0,-1,-1,0,-1,0,0,0},	// 8
  {"cp_type_width_128",9,9,4,set_cp_type_width_128,clear_cp_type_width_128,0,0,-1,0,-1,0,&_sym10,0},	// 9
  {"cyc_extn_width_128",10,10,1,set_cyc_extn_width_128,clear_cyc_extn_width_128,0,-1,-1,0,-1,0,&_sym12,0},	// 10
  {"dat_sz_width_128",11,11,1,set_dat_sz_width_128,clear_dat_sz_width_128,0,-1,-1,0,-1,0,&_sym14,0},	// 11
  {"data_packing_width_128",12,12,6,set_data_packing_width_128,clear_data_packing_width_128,0,-1,-1,0,-1,0,&_sym16,0},	// 12
  {"dest_add_width_128",13,13,16,set_dest_add_width_128,clear_dest_add_width_128,0,-1,-1,0,-1,0,0,0},	// 13
  {"dest_add_inc_width_128",14,14,8,set_dest_add_inc_width_128,clear_dest_add_inc_width_128,0,-1,-1,0,-1,0,0,0},	// 14
  {"dsp_value_width_128",15,15,63,set_dsp_value_width_128,clear_dsp_value_width_128,0,-1,-1,0,-1,0,0,0},	// 15
  {"ev_lvl_width_128",16,16,1,set_ev_lvl_width_128,clear_ev_lvl_width_128,0,0,-1,0,-1,0,&_sym18,0},	// 16
  {"ev_type_width_128",17,17,2,set_ev_type_width_128,clear_ev_type_width_128,0,-1,-1,0,-1,0,&_sym20,0},	// 17
  {"evt_ev_width_128",18,18,3,set_evt_ev_width_128,clear_evt_ev_width_128,0,-1,-1,0,-1,0,&_sym22,0},	// 18
  {"extra_offset_val_im_width_128",19,19,16,set_extra_offset_val_im_width_128,clear_extra_offset_val_im_width_128,0,-1,-1,0,-1,0,0,0},	// 19
  {"extra_val",20,20,16,0,0,0,-1,-1,0,-1,0,0,0},	// 20
  {"extra_val2",21,21,16,0,0,0,-1,-1,0,-1,0,0,0},	// 21
  {"fft_rnd_width_128",22,22,3,set_fft_rnd_width_128,clear_fft_rnd_width_128,0,-1,-1,0,-1,0,&_sym24,0},	// 22
  {"fft_rnd_rdx2_width_128",23,23,3,set_fft_rnd_rdx2_width_128,clear_fft_rnd_rdx2_width_128,0,-1,-1,0,-1,0,&_sym26,0},	// 23
  {"hist_mode_width_128",24,24,2,set_hist_mode_width_128,clear_hist_mode_width_128,0,-1,-1,0,-1,0,&_sym28,0},	// 24
  {"ima_fld_width_128",25,25,1,set_ima_fld_width_128,clear_ima_fld_width_128,0,0,-1,0,-1,0,&_sym30,0},	// 25
  {"imdt_offset_val_im_width_128",26,26,16,set_imdt_offset_val_im_width_128,clear_imdt_offset_val_im_width_128,0,-1,-1,0,-1,0,0,0},	// 26
  {"imm_dat_width_128",27,27,48,set_imm_dat_width_128,clear_imm_dat_width_128,0,-1,-1,0,-1,0,0,0},	// 27
  {"immed_or_reg_src_fld_width_128",28,28,1,set_immed_or_reg_src_fld_width_128,clear_immed_or_reg_src_fld_width_128,0,-1,-1,0,-1,0,&_sym32,0},	// 28
  {"immed_or_reg_src_loop_width_128",29,29,1,set_immed_or_reg_src_loop_width_128,clear_immed_or_reg_src_loop_width_128,0,-1,-1,0,-1,0,&_sym34,0},	// 29
  {"in_dattyp_width_128",30,30,1,set_in_dattyp_width_128,clear_in_dattyp_width_128,0,0,-1,0,-1,0,&_sym36,0},	// 30
  {"in_dattyp2_width_128",31,31,2,set_in_dattyp2_width_128,clear_in_dattyp2_width_128,0,0,-1,0,-1,0,&_sym38,0},	// 31
  {"in_dattyp_vmt_width_128",32,32,1,set_in_dattyp_vmt_width_128,clear_in_dattyp_vmt_width_128,0,0,-1,0,-1,0,&_sym40,0},	// 32
  {"in_pack_width_128",33,33,2,set_in_pack_width_128,clear_in_pack_width_128,0,-1,-1,0,-1,0,&_sym42,0},	// 33
  {"in_tag_width_128",34,34,1,set_in_tag_width_128,clear_in_tag_width_128,0,-1,-1,0,-1,0,&_sym44,0},	// 34
  {"init_width_128",35,35,1,set_init_width_128,clear_init_width_128,0,0,-1,0,-1,0,&_sym46,0},	// 35
  {"ip_pack_width_128",36,36,2,set_ip_pack_width_128,clear_ip_pack_width_128,0,-1,-1,0,-1,0,&_sym48,0},	// 36
  {"jmp_addr_width_128",37,37,32,set_jmp_addr_width_128,clear_jmp_addr_width_128,0,-1,4,0,-1,0,0,0},	// 37
  {"jmp_sel_width_128",38,38,4,set_jmp_sel_width_128,clear_jmp_sel_width_128,0,-1,-1,0,-1,0,&_sym50,0},	// 38
  {"jmp_type_width_128",39,39,1,set_jmp_type_width_128,clear_jmp_type_width_128,0,-1,-1,0,-1,0,&_sym52,0},	// 39
  {"jmp_wr_width_128",40,40,6,set_jmp_wr_width_128,clear_jmp_wr_width_128,0,-1,-1,0,-1,0,0,0},	// 40
  {"loc_n_abs_width_128",41,41,1,set_loc_n_abs_width_128,clear_loc_n_abs_width_128,0,-1,-1,0,-1,0,&_sym54,0},	// 41
  {"loop_cnt_width_128",42,42,16,set_loop_cnt_width_128,clear_loop_cnt_width_128,0,-1,-1,0,-1,0,0,0},	// 42
  {"loop_wrnum_width_128",43,43,6,set_loop_wrnum_width_128,clear_loop_wrnum_width_128,0,-1,-1,0,-1,0,0,0},	// 43
  {"mask_width_128",44,44,16,set_mask_width_128,clear_mask_width_128,0,-1,-1,0,-1,0,0,0},	// 44
  {"maxsn_en_width_128",45,45,1,set_maxsn_en_width_128,clear_maxsn_en_width_128,0,-1,-1,0,-1,0,&_sym56,0},	// 45
  {"maxsn_sel_width_128",46,46,2,set_maxsn_sel_width_128,clear_maxsn_sel_width_128,0,-1,-1,0,-1,0,&_sym58,0},	// 46
  {"mca_inc_width_128",47,47,9,set_mca_inc_width_128,clear_mca_inc_width_128,0,-1,-1,0,-1,0,0,0},	// 47
  {"mca_mod_width_128",48,48,4,set_mca_mod_width_128,clear_mca_mod_width_128,0,0,-1,0,-1,0,&_sym60,0},	// 48
  {"modulo_val_width_128",49,49,5,set_modulo_val_width_128,clear_modulo_val_width_128,0,0,-1,0,-1,0,&_sym62,0},	// 49
  {"mult_coef_add_width_128",50,50,16,set_mult_coef_add_width_128,clear_mult_coef_add_width_128,0,-1,-1,0,-1,0,0,0},	// 50
  {"mult_mod_width_128",51,51,2,set_mult_mod_width_128,clear_mult_mod_width_128,0,-1,-1,0,-1,0,&_sym64,0},	// 51
  {"mult_s_exp_n_val_addr_width_128",52,52,16,set_mult_s_exp_n_val_addr_width_128,clear_mult_s_exp_n_val_addr_width_128,0,-1,-1,0,-1,0,0,0},	// 52
  {"no_of_taps_width_128",53,53,4,set_no_of_taps_width_128,clear_no_of_taps_width_128,0,-1,-1,0,-1,0,0,0},	// 53
  {"op_pack_width_128",54,54,1,set_op_pack_width_128,clear_op_pack_width_128,0,-1,-1,0,-1,0,&_sym66,0},	// 54
  {"opram_continuous_addr_width_128",56,55,12,set_opram_continuous_addr_width_128,clear_opram_continuous_addr_width_128,0,-1,-1,0,-1,0,0,0},	// 55
  {"opram_mem_start_addr_width_128",57,56,16,set_opram_mem_start_addr_width_128,clear_opram_mem_start_addr_width_128,0,-1,-1,0,-1,0,0,0},	// 56
  {"opram_skip_addr_width_128",58,57,12,set_opram_skip_addr_width_128,clear_opram_skip_addr_width_128,0,-1,-1,0,-1,0,0,0},	// 57
  {"opsq1_width_128",59,58,1,set_opsq1_width_128,clear_opsq1_width_128,0,-1,-1,0,-1,0,&_sym68,0},	// 58
  {"opsq2s1_width_128",60,59,2,set_opsq2s1_width_128,clear_opsq2s1_width_128,0,-1,-1,0,-1,0,&_sym70,0},	// 59
  {"opsq2s2_width_128",61,60,3,set_opsq2s2_width_128,clear_opsq2s2_width_128,0,-1,-1,0,-1,0,&_sym72,0},	// 60
  {"opsq2s3_width_128",62,61,1,set_opsq2s3_width_128,clear_opsq2s3_width_128,0,-1,-1,0,-1,0,&_sym74,0},	// 61
  {"pack_en_width_128",63,62,2,set_pack_en_width_128,clear_pack_en_width_128,0,-1,-1,0,-1,0,&_sym76,0},	// 62
  {"pdma_coherent",64,63,1,0,0,0,0,-1,0,-1,0,&_sym78,0},	// 63
  {"pdma_data_packing",65,64,5,0,0,0,0,-1,0,-1,0,&_sym80,0},	// 64
  {"pdma_opram_continuous_addr",66,65,12,0,0,0,-1,-1,0,-1,0,0,0},	// 65
  {"pdma_opram_mem_start_addr",67,66,16,0,0,0,-1,-1,0,-1,0,0,0},	// 66
  {"pdma_opram_skip_addr",68,67,12,0,0,0,-1,-1,0,-1,0,0,0},	// 67
  {"pdma_se",69,68,1,0,0,0,0,-1,0,-1,0,&_sym82,0},	// 68
  {"pdma_sync_async",70,69,1,0,0,0,1,-1,0,-1,0,&_sym84,0},	// 69
  {"pdma_sysram_continous_addr",71,70,12,0,0,0,-1,-1,0,-1,0,0,0},	// 70
  {"pdma_sysram_mem_start_addr",72,71,32,0,0,0,-1,-1,0,-1,0,0,0},	// 71
  {"pdma_sysram_skip_addr",73,72,12,0,0,0,-1,-1,0,-1,0,0,0},	// 72
  {"pdma_trace",74,73,1,0,0,0,0,-1,0,-1,0,&_sym86,0},	// 73
  {"pdma_trans_type",75,74,1,0,0,0,0,-1,0,-1,0,&_sym88,0},	// 74
  {"pdma_vector_len",76,75,16,0,0,0,-1,-1,0,-1,0,0,0},	// 75
  {"pre_proc_width_128",77,76,2,set_pre_proc_width_128,clear_pre_proc_width_128,0,-1,-1,0,-1,0,&_sym90,0},	// 76
  {"quad_ext_width_128",78,77,1,set_quad_ext_width_128,clear_quad_ext_width_128,0,0,-1,0,-1,0,&_sym92,0},	// 77
  {"re_im_width_128",79,78,1,set_re_im_width_128,clear_re_im_width_128,0,-1,-1,0,-1,0,&_sym94,0},	// 78
  {"re_im_coeff_width_128",80,79,2,set_re_im_coeff_width_128,clear_re_im_coeff_width_128,0,-1,-1,0,-1,0,&_sym96,0},	// 79
  {"real_fft_width_128",81,80,1,set_real_fft_width_128,clear_real_fft_width_128,0,0,-1,0,-1,0,&_sym98,0},	// 80
  {"repeat_width_128",82,81,2,set_repeat_width_128,clear_repeat_width_128,0,-1,-1,0,-1,0,&_sym100,0},	// 81
  {"repeat2_width_128",83,82,2,set_repeat2_width_128,clear_repeat2_width_128,0,-1,-1,0,-1,0,&_sym102,0},	// 82
  {"rpt_addr_incr0_width_128",84,83,12,set_rpt_addr_incr0_width_128,clear_rpt_addr_incr0_width_128,0,-1,-1,0,-1,0,0,0},	// 83
  {"rpt_addr_incr1_width_128",85,84,12,set_rpt_addr_incr1_width_128,clear_rpt_addr_incr1_width_128,0,-1,-1,0,-1,0,0,0},	// 84
  {"rpt_addr_incr2_width_128",86,85,12,set_rpt_addr_incr2_width_128,clear_rpt_addr_incr2_width_128,0,-1,-1,0,-1,0,0,0},	// 85
  {"rpt_addr_incr3_width_128",87,86,12,set_rpt_addr_incr3_width_128,clear_rpt_addr_incr3_width_128,0,-1,-1,0,-1,0,0,0},	// 86
  {"rpt_cnt_width_128",88,87,13,set_rpt_cnt_width_128,clear_rpt_cnt_width_128,0,-1,-1,0,-1,0,0,0},	// 87
  {"rst_acc_width_128",89,88,1,set_rst_acc_width_128,clear_rst_acc_width_128,0,-1,-1,0,-1,0,&_sym104,0},	// 88
  {"rst_acc_vmt_width_128",90,89,1,set_rst_acc_vmt_width_128,clear_rst_acc_vmt_width_128,0,-1,-1,0,-1,0,&_sym106,0},	// 89
  {"rst_n_keep_width_128",91,90,1,set_rst_n_keep_width_128,clear_rst_n_keep_width_128,0,0,-1,0,-1,0,&_sym108,0},	// 90
  {"se_width_128",92,91,1,set_se_width_128,clear_se_width_128,0,-1,-1,0,-1,0,&_sym110,0},	// 91
  {"sel_src1_add_width_128",93,92,16,set_sel_src1_add_width_128,clear_sel_src1_add_width_128,0,-1,-1,0,-1,0,0,0},	// 92
  {"sel_src3_add_width_128",94,93,16,set_sel_src3_add_width_128,clear_sel_src3_add_width_128,0,-1,-1,0,-1,0,0,0},	// 93
  {"sel_wr_width_128",95,94,6,set_sel_wr_width_128,clear_sel_wr_width_128,0,-1,-1,0,-1,0,0,0},	// 94
  {"set_size_width_128",96,95,2,set_set_size_width_128,clear_set_size_width_128,0,0,-1,0,-1,0,&_sym112,0},	// 95
  {"shft_ofst_width_128",97,96,3,set_shft_ofst_width_128,clear_shft_ofst_width_128,0,-1,-1,0,-1,0,&_sym114,0},	// 96
  {"shft_src_width_128",98,97,1,set_shft_src_width_128,clear_shft_src_width_128,0,-1,-1,0,-1,0,&_sym116,0},	// 97
  {"shft_val_width_128",99,98,3,set_shft_val_width_128,clear_shft_val_width_128,0,-1,-1,0,-1,0,&_sym118,0},	// 98
  {"shft_wr_width_128",100,99,6,set_shft_wr_width_128,clear_shft_wr_width_128,0,-1,-1,0,-1,0,0,0},	// 99
  {"shift_fld_width_128",101,100,1,set_shift_fld_width_128,clear_shift_fld_width_128,0,2,-1,0,-1,0,&_sym120,0},	// 100
  {"sort_rank_width_128",102,101,4,set_sort_rank_width_128,clear_sort_rank_width_128,0,-1,-1,0,-1,0,0,0},	// 101
  {"sort_type_width_128",103,102,1,set_sort_type_width_128,clear_sort_type_width_128,0,-1,-1,0,-1,0,0,0},	// 102
  {"src2_add_width_128",104,103,16,set_src2_add_width_128,clear_src2_add_width_128,0,-1,-1,0,-1,0,0,0},	// 103
  {"src_add_width_128",105,104,16,set_src_add_width_128,clear_src_add_width_128,0,-1,-1,0,-1,0,0,0},	// 104
  {"src_add_inc_width_128",106,105,8,set_src_add_inc_width_128,clear_src_add_inc_width_128,0,-1,-1,0,-1,0,0,0},	// 105
  {"sync_async_width_128",107,106,1,set_sync_async_width_128,clear_sync_async_width_128,0,-1,-1,0,-1,0,&_sym122,0},	// 106
  {"sync_csid_width_128",108,107,5,set_sync_csid_width_128,clear_sync_csid_width_128,0,-1,-1,0,-1,0,0,0},	// 107
  {"sync_type_width_128",109,108,2,set_sync_type_width_128,clear_sync_type_width_128,0,-1,-1,0,-1,0,&_sym124,0},	// 108
  {"sysram_continous_addr_width_128",110,109,12,set_sysram_continous_addr_width_128,clear_sysram_continous_addr_width_128,0,-1,-1,0,-1,0,0,0},	// 109
  {"sysram_mem_start_addr_width_128",111,110,32,set_sysram_mem_start_addr_width_128,clear_sysram_mem_start_addr_width_128,0,-1,5,0,-1,0,0,0},	// 110
  {"sysram_skip_addr_width_128",112,111,12,set_sysram_skip_addr_width_128,clear_sysram_skip_addr_width_128,0,-1,-1,0,-1,0,0,0},	// 111
  {"tag_n_bitfld_width_128",113,112,1,set_tag_n_bitfld_width_128,clear_tag_n_bitfld_width_128,0,-1,-1,0,-1,0,&_sym126,0},	// 112
  {"tap_coef_add_width_128",114,113,16,set_tap_coef_add_width_128,clear_tap_coef_add_width_128,0,-1,-1,0,-1,0,0,0},	// 113
  {"th_id_width_128",119,114,4,set_th_id_width_128,clear_th_id_width_128,0,-1,-1,0,-1,0,0,0},	// 114
  {"thld_add_width_128",120,115,16,set_thld_add_width_128,clear_thld_add_width_128,0,-1,-1,0,-1,0,0,0},	// 115
  {"thld_cmp_width_128",121,116,1,set_thld_cmp_width_128,clear_thld_cmp_width_128,0,-1,-1,0,-1,0,&_sym128,0},	// 116
  {"threshold_width_128",122,117,6,set_threshold_width_128,clear_threshold_width_128,0,-1,-1,0,-1,0,0,0},	// 117
  {"trans_type_width_128",123,118,1,set_trans_type_width_128,clear_trans_type_width_128,0,-1,-1,0,-1,0,&_sym130,0},	// 118
  {"tw_ovs_width_128",124,119,4,set_tw_ovs_width_128,clear_tw_ovs_width_128,0,0,-1,0,-1,0,&_sym132,0},	// 119
  {"vec_sz_width_128",125,120,13,set_vec_sz_width_128,clear_vec_sz_width_128,0,-1,-1,0,-1,0,0,0},	// 120
  {"vector_len_width_128",126,121,16,set_vector_len_width_128,clear_vector_len_width_128,0,-1,-1,0,-1,0,0,0},	// 121
  {"wait_ev_width_128",127,122,7,set_wait_ev_width_128,clear_wait_ev_width_128,0,-1,-1,0,-1,0,0,0},	// 122
  {"wdog_cnt_width_128",128,123,24,set_wdog_cnt_width_128,clear_wdog_cnt_width_128,0,-1,-1,0,-1,0,0,0},	// 123
  {"wdog_ev_width_128",129,124,3,set_wdog_ev_width_128,clear_wdog_ev_width_128,0,-1,-1,0,-1,0,&_sym134,0},	// 124
  {"wdog_ev_tr_width_128",130,125,2,set_wdog_ev_tr_width_128,clear_wdog_ev_tr_width_128,0,0,-1,0,-1,0,&_sym136,0},	// 125
  {"wdog_op_width_128",131,126,2,set_wdog_op_width_128,clear_wdog_op_width_128,0,-1,-1,0,-1,0,&_sym138,0},	// 126
  {"win_type_width_128",132,127,2,set_win_type_width_128,clear_win_type_width_128,0,-1,-1,0,-1,0,&_sym140,0},	// 127
  {"win_type_rdx_width_128",133,128,2,set_win_type_rdx_width_128,clear_win_type_rdx_width_128,0,-1,-1,0,-1,0,&_sym142,0},	// 128
};

static const int num_ppc_operands = 129;

static struct adl_name_pair ppc_operands_by_index [] = {
  { "adptv", 0 },
  { "adptv_ofst", 1 },
  { "adptv_shft", 2 },
  { "adptv_wrnum", 3 },
  { "bin_sz", 4 },
  { "blk_dest_inc", 5 },
  { "blk_src_inc", 6 },
  { "cc_im", 7 },
  { "cc_re", 8 },
  { "cp_type", 9 },
  { "cyc_extn", 10 },
  { "dat_sz", 11 },
  { "data_packing", 12 },
  { "dest_add", 13 },
  { "dest_add_inc", 14 },
  { "dsp_value", 15 },
  { "ev_lvl", 16 },
  { "ev_type", 17 },
  { "evt_ev", 18 },
  { "extra_offset_val_im", 19 },
  { "fft_rnd", 22 },
  { "fft_rnd_rdx2", 23 },
  { "hist_mode", 24 },
  { "ima_fld", 25 },
  { "imdt_offset_val_im", 26 },
  { "imm_dat", 27 },
  { "immed_or_reg_src_fld", 28 },
  { "immed_or_reg_src_loop", 29 },
  { "in_dattyp", 30 },
  { "in_dattyp2", 31 },
  { "in_dattyp_vmt", 32 },
  { "in_pack", 33 },
  { "in_tag", 34 },
  { "init", 35 },
  { "ip_pack", 36 },
  { "jmp_addr", 37 },
  { "jmp_sel", 38 },
  { "jmp_type", 39 },
  { "jmp_wr", 40 },
  { "loc_n_abs", 41 },
  { "loop_cnt", 42 },
  { "loop_wrnum", 43 },
  { "mask", 44 },
  { "maxsn_en", 45 },
  { "maxsn_sel", 46 },
  { "mca_inc", 47 },
  { "mca_mod", 48 },
  { "modulo_val", 49 },
  { "mult_coef_add", 50 },
  { "mult_mod", 51 },
  { "mult_s_exp_n_val_addr", 52 },
  { "no_of_taps", 53 },
  { "op_pack", 54 },
  { "opram_continuous_addr", 55 },
  { "opram_mem_start_addr", 56 },
  { "opram_skip_addr", 57 },
  { "opsq1", 58 },
  { "opsq2s1", 59 },
  { "opsq2s2", 60 },
  { "opsq2s3", 61 },
  { "pack_en", 62 },
  { "pre_proc", 76 },
  { "quad_ext", 77 },
  { "re_im", 78 },
  { "re_im_coeff", 79 },
  { "real_fft", 80 },
  { "repeat", 81 },
  { "repeat2", 82 },
  { "rpt_addr_incr0", 83 },
  { "rpt_addr_incr1", 84 },
  { "rpt_addr_incr2", 85 },
  { "rpt_addr_incr3", 86 },
  { "rpt_cnt", 87 },
  { "rst_acc", 88 },
  { "rst_acc_vmt", 89 },
  { "rst_n_keep", 90 },
  { "se", 91 },
  { "sel_src1_add", 92 },
  { "sel_src3_add", 93 },
  { "sel_wr", 94 },
  { "set_size", 95 },
  { "shft_ofst", 96 },
  { "shft_src", 97 },
  { "shft_val", 98 },
  { "shft_wr", 99 },
  { "shift_fld", 100 },
  { "sort_rank", 101 },
  { "sort_type", 102 },
  { "src2_add", 103 },
  { "src_add", 104 },
  { "src_add_inc", 105 },
  { "sync_async", 106 },
  { "sync_csid", 107 },
  { "sync_type", 108 },
  { "sysram_continous_addr", 109 },
  { "sysram_mem_start_addr", 110 },
  { "sysram_skip_addr", 111 },
  { "tag_n_bitfld", 112 },
  { "tap_coef_add", 113 },
  { "th_id", 114 },
  { "thld_add", 115 },
  { "thld_cmp", 116 },
  { "threshold", 117 },
  { "trans_type", 118 },
  { "tw_ovs", 119 },
  { "vec_sz", 120 },
  { "vector_len", 121 },
  { "wait_ev", 122 },
  { "wdog_cnt", 123 },
  { "wdog_ev", 124 },
  { "wdog_ev_tr", 125 },
  { "wdog_op", 126 },
  { "win_type", 127 },
  { "win_type_rdx", 128 },
  { "opcode", 4294967295 },
};

static const int num_ppc_operands_by_index = 115;

enum InstrBlocks {
};


// Instruction add

// Shorthand:  add -> add_;

static bfd_uint64_t _sym144_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[3].X_add_number) , 0 ); }

static int _sym144_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym145_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[5].X_add_number) , 1 ); }

static int _sym145_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym146_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr_spr ( get_wr ( (operands[0].X_add_number) , (operands[4].X_add_number) ) ); }

static int _sym146_mod_indices[] = { 0, 4,  -1 };

static bfd_uint64_t _sym147_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym147_mod_indices[] = { 0, 4,  -1 };
struct adl_operand _sym143_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{100, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 2, 0, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym144_modifier, _sym144_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym145_modifier, _sym145_mod_indices, 0, 0,0, -1,-1,0},{103, -1, 0, 0, 0, 0, 0, 0, 0, _sym146_modifier, _sym146_mod_indices, 0, 0,0, -1,-1,0},{27, -1, 0, 0, 0, 0, 0, 0, 0, _sym147_modifier, _sym147_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction add
struct adl_operand _sym148_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{100, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 2, 0, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 3, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 4, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 5, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym149[] = {
  // add_    (0)
  { "add_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xc000000,},0, "", 0, 7, 7, 0, 3, 0, _sym143_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym150[] = { &_sym32, &_sym120, &_sym62, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction add_

// Instruction add_
struct adl_operand _sym151_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{100, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 2, 0, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 3, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 4, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{103, 5, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 6, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym152[] = { &_sym32, &_sym120, &_sym62, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction cmp

// Shorthand:  cmp -> cmp_;

static bfd_uint64_t _sym154_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[1].X_add_number) , 0 ); }

static int _sym154_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym155_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[3].X_add_number) , 1 ); }

static int _sym155_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym156_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr_spr ( get_wr ( (operands[0].X_add_number) , (operands[2].X_add_number) ) ); }

static int _sym156_mod_indices[] = { 0, 2,  -1 };

static bfd_uint64_t _sym157_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[2].X_add_number) ); }

static int _sym157_mod_indices[] = { 0, 2,  -1 };
struct adl_operand _sym153_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym154_modifier, _sym154_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym155_modifier, _sym155_mod_indices, 0, 0,0, -1,-1,0},{103, -1, 0, 0, 0, 0, 0, 0, 0, _sym156_modifier, _sym156_mod_indices, 0, 0,0, -1,-1,0},{27, -1, 0, 0, 0, 0, 0, 0, 0, _sym157_modifier, _sym157_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction cmp
struct adl_operand _sym158_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 1, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 2, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 3, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym159[] = {
  // cmp_    (0)
  { "cmp_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x30000000,},0, "", 0, 5, 5, 0, 1, 0, _sym153_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym160[] = { &_sym32, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction cmp_

// Instruction cmp_
struct adl_operand _sym161_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 1, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 2, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{103, 3, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 4, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym162[] = { &_sym32, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy

// Shorthand:  copy -> copy_;

static bfd_uint64_t _sym164_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[4].X_add_number) ); }

static int _sym164_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym165_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[5].X_add_number) ); }

static int _sym165_mod_indices[] = { 5,  -1 };
struct adl_operand _sym163_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 2, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym164_modifier, _sym164_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym165_modifier, _sym165_mod_indices, 0, 0,0, -1,-1,0},{6, 6, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 7, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 10, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction copy
struct adl_operand _sym166_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 2, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 4, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 5, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{6, 6, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 7, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 10, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym167[] = {
  // copy_    (0)
  { "copy_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x94000000,},0, "", 0, 11, 11, 0, 3, 0, _sym163_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym168[] = { &_sym38, &_sym10, &_sym108, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_

// Instruction copy_
struct adl_operand _sym169_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{88, 2, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 3, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 4, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 5, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{6, 9, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 10, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 14, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym170[] = { &_sym38, &_sym90, &_sym104, &_sym10, &_sym108, &_sym30, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_ind

// Shorthand:  copy_ind -> copy_;

static bfd_uint64_t _sym172_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[4].X_add_number) ); }

static int _sym172_mod_indices[] = { 4,  -1 };
struct adl_operand _sym171_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 2, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym172_modifier, _sym172_mod_indices, 0, 0,0, -1,-1,0},{6, 5, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 6, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 9, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction copy_ind
struct adl_operand _sym173_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 2, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 4, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{6, 5, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 6, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 9, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym174[] = {
  // copy_    (0)
  { "copy_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x94002000,},0, "", 0, 10, 10, 0, 3, 0, _sym171_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym175[] = { &_sym38, &_sym10, &_sym108, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_thld

// Shorthand:  copy_thld -> copy_;

static bfd_uint64_t _sym177_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym177_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym178_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym178_mod_indices[] = { 7,  -1 };
struct adl_operand _sym176_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 2, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{88, 3, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 4, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym177_modifier, _sym177_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym178_modifier, _sym178_mod_indices, 0, 0,0, -1,-1,0},{6, 8, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 9, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction copy_thld
struct adl_operand _sym179_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 2, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{88, 3, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 4, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{6, 8, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 9, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym180[] = {
  // copy_    (0)
  { "copy_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x94000000,},0, "", 0, 14, 14, 0, 5, 0, _sym176_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym181[] = { &_sym38, &_sym10, &_sym90, &_sym104, &_sym108, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_thld_ind

// Shorthand:  copy_thld_ind -> copy_;

static bfd_uint64_t _sym183_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[6].X_add_number) ); }

static int _sym183_mod_indices[] = { 6,  -1 };
struct adl_operand _sym182_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 2, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{88, 3, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 4, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym183_modifier, _sym183_mod_indices, 0, 0,0, -1,-1,0},{6, 7, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 8, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 11, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction copy_thld_ind
struct adl_operand _sym184_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{9, 1, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 2, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{88, 3, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{90, 4, 0, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{6, 7, 0, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 8, 0, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 11, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{44, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym185[] = {
  // copy_    (0)
  { "copy_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x94002000,},0, "", 0, 13, 13, 0, 5, 0, _sym182_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym186[] = { &_sym38, &_sym10, &_sym90, &_sym104, &_sym108, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction dsp

// Instruction dsp
struct adl_operand _sym187_operands_operands[] = { {15, 0, 0, 0, 0, 65, 0ull, 0x7fffffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym188[] = { 0,  (struct enum_fields *) -1,};

// Instruction dsp_

// Shorthand:  dsp_ -> dsp;
struct adl_operand _sym189_operands[] = { {15, 0, 0, 0, 0, 65, 0ull, 0x7fffffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction dsp_
struct adl_operand _sym190_operands_operands[] = { {15, 0, 0, 0, 0, 65, 0ull, 0x7fffffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym191[] = {
  // dsp    (0)
  { "dsp", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb8000000,},0, "", 0, 1, 1, 0, 0, 0, _sym189_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym192[] = { 0,  (struct enum_fields *) -1,};

// Instruction evt

// Shorthand:  evt -> evt_;

static bfd_uint64_t _sym194_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return evt_type ( (operands[0].X_add_number) ); }

static int _sym194_mod_indices[] = { 0,  -1 };
struct adl_operand _sym193_operands[] = { {16, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{17, -1, 0, 0, 0, 0, 0, 0, 0, _sym194_modifier, _sym194_mod_indices, 0, 0,0, -1,-1,0},{18, 2, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction evt
struct adl_operand _sym195_operands_operands[] = { {17, 0, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{16, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{18, 2, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym196[] = {
  // evt_    (0)
  { "evt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x24000000,},0, "", 0, 3, 3, 0, 2, 0, _sym193_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym197[] = { &_sym20, &_sym18, &_sym22,  (struct enum_fields *) -1,};

// Instruction evt_

// Instruction evt_
struct adl_operand _sym198_operands_operands[] = { {16, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{17, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{18, 2, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym199[] = { &_sym18, &_sym20, &_sym22,  (struct enum_fields *) -1,};

// Instruction fir

// Shorthand:  fir -> fir_;

static bfd_uint64_t _sym201_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym201_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym202_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym202_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym203_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[8].X_add_number) ); }

static int _sym203_mod_indices[] = { 8,  -1 };
struct adl_operand _sym200_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym201_modifier, _sym201_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym202_modifier, _sym202_mod_indices, 0, 0,0, -1,-1,0},{113, -1, 0, 0, 0, 0, 0, 0, 0, _sym203_modifier, _sym203_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction fir
struct adl_operand _sym204_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{113, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym205[] = {
  // fir_    (0)
  { "fir_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa4000000,},0, "", 0, 11, 11, 0, 4, 0, _sym200_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym206[] = { &_sym36, &_sym140, &_sym46, &_sym118, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction fir_

// Instruction fir_
struct adl_operand _sym207_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 3, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 4, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{113, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 11, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 12, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 13, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 14, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym208[] = { &_sym36, &_sym140, &_sym46, 0, &_sym30, 0, 0, 0, 0, 0, 0, &_sym114, 0, &_sym116, &_sym118,  (struct enum_fields *) -1,};

// Instruction fir_ind

// Shorthand:  fir_ind -> fir_;

static bfd_uint64_t _sym210_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[6].X_add_number) ); }

static int _sym210_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym211_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[7].X_add_number) ); }

static int _sym211_mod_indices[] = { 7,  -1 };
struct adl_operand _sym209_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym210_modifier, _sym210_mod_indices, 0, 0,0, -1,-1,0},{113, -1, 0, 0, 0, 0, 0, 0, 0, _sym211_modifier, _sym211_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction fir_ind
struct adl_operand _sym212_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{113, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym213[] = {
  // fir_    (0)
  { "fir_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa4002000,},0, "", 0, 10, 10, 0, 4, 0, _sym209_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym214[] = { &_sym36, &_sym140, &_sym46, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction fir_shift_wr

// Shorthand:  fir_shift_wr -> fir_;

static bfd_uint64_t _sym216_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym216_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym217_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym217_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym218_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym218_mod_indices[] = { 9,  -1 };
struct adl_operand _sym215_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 5, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym216_modifier, _sym216_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym217_modifier, _sym217_mod_indices, 0, 0,0, -1,-1,0},{113, -1, 0, 0, 0, 0, 0, 0, 0, _sym218_modifier, _sym218_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction fir_shift_wr
struct adl_operand _sym219_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 5, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{113, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym220[] = {
  // fir_    (0)
  { "fir_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xa4000000,},0, "", 0, 12, 12, 0, 4, 0, _sym215_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym221[] = { &_sym36, &_sym140, &_sym46, &_sym114, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction fir_shift_wr_ind

// Shorthand:  fir_shift_wr_ind -> fir_;

static bfd_uint64_t _sym223_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[7].X_add_number) ); }

static int _sym223_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym224_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[8].X_add_number) ); }

static int _sym224_mod_indices[] = { 8,  -1 };
struct adl_operand _sym222_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 5, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym223_modifier, _sym223_mod_indices, 0, 0,0, -1,-1,0},{113, -1, 0, 0, 0, 0, 0, 0, 0, _sym224_modifier, _sym224_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction fir_shift_wr_ind
struct adl_operand _sym225_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 5, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{113, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym226[] = {
  // fir_    (0)
  { "fir_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xa4002000,},0, "", 0, 11, 11, 0, 4, 0, _sym222_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym227[] = { &_sym36, &_sym140, &_sym46, &_sym114, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction get

// Shorthand:  get -> get_;

static bfd_uint64_t _sym229_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( is_not_register ( (operands[0].X_add_number) ) , 0 ); }

static int _sym229_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym230_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr_spr ( (operands[1].X_add_number) ); }

static int _sym230_mod_indices[] = { 1,  -1 };
struct adl_operand _sym228_operands[] = { {104, -1, 0, 0, 0, 0, 0, 0, 0, _sym229_modifier, _sym229_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym230_modifier, _sym230_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction get
struct adl_operand _sym231_operands_operands[] = { {104, 0, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 1, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym232[] = {
  // get_    (0)
  { "get_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8000000,},0, "", 0, 2, 2, 0, 0, 0, _sym228_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym233[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction get_

// Instruction get_
struct adl_operand _sym234_operands_operands[] = { {25, 0, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 1, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 2, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym235[] = { &_sym30, 0, 0,  (struct enum_fields *) -1,};

// Instruction get_ind

// Shorthand:  get_ind -> get_;

static bfd_uint64_t _sym237_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[0].X_add_number) ); }

static int _sym237_mod_indices[] = { 0,  -1 };
struct adl_operand _sym236_operands[] = { {104, -1, 0, 0, 0, 0, 0, 0, 0, _sym237_modifier, _sym237_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction get_ind
struct adl_operand _sym238_operands_operands[] = { {104, 0, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym239[] = {
  // get_    (0)
  { "get_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8002000,},0, "", 0, 1, 1, 0, 0, 0, _sym236_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym240[] = { 0,  (struct enum_fields *) -1,};

// Instruction hist

// Shorthand:  hist -> hist_;

static bfd_uint64_t _sym242_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym242_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym243_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[8].X_add_number) , 1 ); }

static int _sym243_mod_indices[] = { 8,  -1 };
struct adl_operand _sym241_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{24, 2, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{4, 3, 0, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{62, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym242_modifier, _sym242_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym243_modifier, _sym243_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{117, 11, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{11, 5, 0, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction hist
struct adl_operand _sym244_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{24, 2, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{4, 3, 0, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{62, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{11, 5, 0, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{117, 11, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym245[] = {
  // hist_    (0)
  { "hist_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x90000000,},0, "", 0, 12, 12, 0, 6, 0, _sym241_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym246[] = { &_sym38, &_sym90, &_sym28, &_sym8, &_sym76, &_sym14, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction hist_

// Instruction hist_
struct adl_operand _sym247_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{24, 2, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{4, 3, 0, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{62, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 5, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{117, 11, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{11, 12, 0, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym248[] = { &_sym38, &_sym90, &_sym28, &_sym8, &_sym76, &_sym30, 0, 0, 0, 0, 0, 0, &_sym14,  (struct enum_fields *) -1,};

// Instruction hist_ind

// Shorthand:  hist_ind -> hist_;

static bfd_uint64_t _sym250_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[7].X_add_number) ); }

static int _sym250_mod_indices[] = { 7,  -1 };
struct adl_operand _sym249_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{24, 2, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{4, 3, 0, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{62, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym250_modifier, _sym250_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{117, 10, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{11, 5, 0, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction hist_ind
struct adl_operand _sym251_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{24, 2, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{4, 3, 0, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{62, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{11, 5, 0, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{117, 10, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym252[] = {
  // hist_    (0)
  { "hist_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x90002000,},0, "", 0, 11, 11, 0, 6, 0, _sym249_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym253[] = { &_sym38, &_sym90, &_sym28, &_sym8, &_sym76, &_sym14, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2

// Shorthand:  irdx2 -> irdx2_;

static bfd_uint64_t _sym255_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym255_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym256_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym256_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym257_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym257_mod_indices[] = { 9,  -1 };
struct adl_operand _sym254_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym255_modifier, _sym255_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym256_modifier, _sym256_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym257_modifier, _sym257_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2
struct adl_operand _sym258_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym259[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb0000000,},0, "", 0, 12, 12, 0, 6, 0, _sym254_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym260[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_

// Instruction irdx2_
struct adl_operand _sym261_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 1, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 2, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 3, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 5, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 6, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 13, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 14, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 15, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 16, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 17, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym262[] = { &_sym36, &_sym26, &_sym2, &_sym6, &_sym92, &_sym102, &_sym30, 0, 0, 0, 0, 0, 0, &_sym4, 0, &_sym116, &_sym118, &_sym132,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv

// Shorthand:  irdx2_adptv -> irdx2_;

static bfd_uint64_t _sym264_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[10].X_add_number) ); }

static int _sym264_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym265_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[11].X_add_number) ); }

static int _sym265_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym266_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[12].X_add_number) ); }

static int _sym266_mod_indices[] = { 12,  -1 };
struct adl_operand _sym263_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym264_modifier, _sym264_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym265_modifier, _sym265_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym266_modifier, _sym266_mod_indices, 0, 0,0, -1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_adptv
struct adl_operand _sym267_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 10, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 11, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym268[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb0040000,},0, "", 0, 15, 15, 0, 8, 0, _sym263_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym269[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym118, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv_ind

// Shorthand:  irdx2_adptv_ind -> irdx2_;

static bfd_uint64_t _sym271_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym271_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym272_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[11].X_add_number) ); }

static int _sym272_mod_indices[] = { 11,  -1 };
struct adl_operand _sym270_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym271_modifier, _sym271_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym272_modifier, _sym272_mod_indices, 0, 0,0, -1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_adptv_ind
struct adl_operand _sym273_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 10, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym274[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb0042000,},0, "", 0, 14, 14, 0, 8, 0, _sym270_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym275[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym118, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv_shift_wr

// Shorthand:  irdx2_adptv_shift_wr -> irdx2_;

static bfd_uint64_t _sym277_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym277_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym278_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym278_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym279_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym279_mod_indices[] = { 10,  -1 };
struct adl_operand _sym276_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym277_modifier, _sym277_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym278_modifier, _sym278_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym279_modifier, _sym279_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_adptv_shift_wr
struct adl_operand _sym280_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym281[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xb0040000,},0, "", 0, 13, 13, 0, 6, 0, _sym276_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym282[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv_shift_wr_ind

// Shorthand:  irdx2_adptv_shift_wr_ind -> irdx2_;

static bfd_uint64_t _sym284_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym284_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym285_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym285_mod_indices[] = { 9,  -1 };
struct adl_operand _sym283_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym284_modifier, _sym284_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym285_modifier, _sym285_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_adptv_shift_wr_ind
struct adl_operand _sym286_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym287[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xb0042000,},0, "", 0, 12, 12, 0, 6, 0, _sym283_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym288[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_ind

// Shorthand:  irdx2_ind -> irdx2_;

static bfd_uint64_t _sym290_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[7].X_add_number) ); }

static int _sym290_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym291_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[8].X_add_number) ); }

static int _sym291_mod_indices[] = { 8,  -1 };
struct adl_operand _sym289_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym290_modifier, _sym290_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym291_modifier, _sym291_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_ind
struct adl_operand _sym292_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 5, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym293[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb0002000,},0, "", 0, 11, 11, 0, 6, 0, _sym289_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym294[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym118, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_shift_wr

// Shorthand:  irdx2_shift_wr -> irdx2_;

static bfd_uint64_t _sym296_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym296_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym297_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym297_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym298_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym298_mod_indices[] = { 9,  -1 };
struct adl_operand _sym295_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym296_modifier, _sym296_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym297_modifier, _sym297_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym298_modifier, _sym298_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 4, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 5, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_shift_wr
struct adl_operand _sym299_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 4, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 5, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym300[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xb0000000,},0, "", 0, 12, 12, 0, 5, 0, _sym295_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym301[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_shift_wr_ind

// Shorthand:  irdx2_shift_wr_ind -> irdx2_;

static bfd_uint64_t _sym303_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[7].X_add_number) ); }

static int _sym303_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym304_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[8].X_add_number) ); }

static int _sym304_mod_indices[] = { 8,  -1 };
struct adl_operand _sym302_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym303_modifier, _sym303_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym304_modifier, _sym304_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 4, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 5, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx2_shift_wr_ind
struct adl_operand _sym305_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 4, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 5, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym306[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xb0002000,},0, "", 0, 11, 11, 0, 5, 0, _sym302_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym307[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mm0

// Shorthand:  irdx4_mm0 -> irdx4_mm0_;

static bfd_uint64_t _sym309_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym309_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym310_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym310_mod_indices[] = { 9,  -1 };
struct adl_operand _sym308_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym309_modifier, _sym309_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym310_modifier, _sym310_mod_indices, 0, 0,0, -1,-1,0},{7, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mm0
struct adl_operand _sym311_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym312[] = {
  // irdx4_mm0_    (0)
  { "irdx4_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac000000,},0, "", 0, 14, 14, 0, 7, 0, _sym308_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym313[] = { &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym118, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mm0_

// Instruction irdx4_mm0_
struct adl_operand _sym314_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 2, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 5, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 13, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 14, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym315[] = { &_sym36, &_sym142, &_sym24, &_sym92, &_sym100, &_sym30, 0, 0, 0, 0, 0, 0, 0, &_sym118, &_sym132,  (struct enum_fields *) -1,};

// Instruction irdx4_mm0_ind

// Shorthand:  irdx4_mm0_ind -> irdx4_mm0_;

static bfd_uint64_t _sym317_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym317_mod_indices[] = { 8,  -1 };
struct adl_operand _sym316_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym317_modifier, _sym317_mod_indices, 0, 0,0, -1,-1,0},{7, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mm0_ind
struct adl_operand _sym318_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym319[] = {
  // irdx4_mm0_    (0)
  { "irdx4_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac002000,},0, "", 0, 13, 13, 0, 7, 0, _sym316_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym320[] = { &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0

// Shorthand:  irdx4_mmn0 -> irdx4_mmn0_;

static bfd_uint64_t _sym322_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym322_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym323_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym323_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym324_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym324_mod_indices[] = { 10,  -1 };
struct adl_operand _sym321_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym322_modifier, _sym322_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym323_modifier, _sym323_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym324_modifier, _sym324_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0
struct adl_operand _sym325_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym326[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac000000,},0, "", 0, 15, 15, 0, 7, 0, _sym321_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym327[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_

// Instruction irdx4_mmn0_
struct adl_operand _sym328_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 2, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 3, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 5, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 7, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 15, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 17, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 18, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 19, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 20, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 21, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym329[] = { &_sym36, &_sym142, &_sym24, &_sym2, &_sym6, &_sym92, &_sym100, &_sym30, 0, 0, 0, 0, 0, 0, &_sym60, &_sym4, 0, 0, &_sym64, &_sym116, &_sym118, &_sym132,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_adptv

// Shorthand:  irdx4_mmn0_adptv -> irdx4_mmn0_;

static bfd_uint64_t _sym331_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[11].X_add_number) ); }

static int _sym331_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym332_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[12].X_add_number) ); }

static int _sym332_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym333_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[13].X_add_number) ); }

static int _sym333_mod_indices[] = { 13,  -1 };
struct adl_operand _sym330_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym331_modifier, _sym331_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym332_modifier, _sym332_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym333_modifier, _sym333_mod_indices, 0, 0,0, -1,-1,0},{105, 14, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 15, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 16, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 17, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_adptv
struct adl_operand _sym334_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 12, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 13, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 14, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 15, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 16, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 17, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym335[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac040000,},0, "", 0, 18, 18, 0, 9, 0, _sym330_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym336[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_adptv_ind

// Shorthand:  irdx4_mmn0_adptv_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym338_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[11].X_add_number) ); }

static int _sym338_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym339_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[12].X_add_number) ); }

static int _sym339_mod_indices[] = { 12,  -1 };
struct adl_operand _sym337_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym338_modifier, _sym338_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym339_modifier, _sym339_mod_indices, 0, 0,0, -1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 15, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_adptv_ind
struct adl_operand _sym340_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 15, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym341[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac042000,},0, "", 0, 17, 17, 0, 9, 0, _sym337_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym342[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_ind

// Shorthand:  irdx4_mmn0_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym344_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym344_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym345_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym345_mod_indices[] = { 9,  -1 };
struct adl_operand _sym343_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym344_modifier, _sym344_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym345_modifier, _sym345_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_ind
struct adl_operand _sym346_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym347[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac002000,},0, "", 0, 14, 14, 0, 7, 0, _sym343_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym348[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft

// Shorthand:  irdx4_mmn0_shft -> irdx4_mmn0_;

static bfd_uint64_t _sym350_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym350_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym351_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym351_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym352_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym352_mod_indices[] = { 10,  -1 };
struct adl_operand _sym349_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym350_modifier, _sym350_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym351_modifier, _sym351_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym352_modifier, _sym352_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_shft
struct adl_operand _sym353_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym354[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac000000,},0, "", 0, 15, 15, 0, 7, 0, _sym349_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym355[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym118, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft_ind

// Shorthand:  irdx4_mmn0_shft_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym357_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym357_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym358_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym358_mod_indices[] = { 9,  -1 };
struct adl_operand _sym356_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym357_modifier, _sym357_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym358_modifier, _sym358_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_shft_ind
struct adl_operand _sym359_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym360[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac002000,},0, "", 0, 14, 14, 0, 7, 0, _sym356_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym361[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym118, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft_wr

// Shorthand:  irdx4_mmn0_shft_wr -> irdx4_mmn0_;

static bfd_uint64_t _sym363_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym363_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym364_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[10].X_add_number) ); }

static int _sym364_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym365_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[11].X_add_number) ); }

static int _sym365_mod_indices[] = { 11,  -1 };
struct adl_operand _sym362_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym363_modifier, _sym363_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym364_modifier, _sym364_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym365_modifier, _sym365_mod_indices, 0, 0,0, -1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_shft_wr
struct adl_operand _sym366_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym367[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xac000000,},0, "", 0, 16, 16, 0, 7, 0, _sym362_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym368[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym4, 0, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft_wr_ind

// Shorthand:  irdx4_mmn0_shft_wr_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym370_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym370_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym371_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym371_mod_indices[] = { 10,  -1 };
struct adl_operand _sym369_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym370_modifier, _sym370_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym371_modifier, _sym371_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction irdx4_mmn0_shft_wr_ind
struct adl_operand _sym372_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym373[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xac002000,},0, "", 0, 15, 15, 0, 7, 0, _sym369_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym374[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym4, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction jump_

// Instruction jump_
struct adl_operand _sym375_operands_operands[] = { {39, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{38, 1, 0, 0, 0, 7, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{40, 2, 0, 0, 0, 42, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{37, 3, ADL_RELATIVE | ADL_SIGNED, 0, 0, 64, ((bfd_int64_t)18446744071562067969ull-1), 2147483647ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym376[] = { &_sym52, &_sym50, 0, 0,  (struct enum_fields *) -1,};

// Instruction jump_alw

// Shorthand:  jump_alw -> jump_;
struct adl_operand _sym377_operands[] = { {37, 0, ADL_RELATIVE | ADL_SIGNED, 0, 0, 64, ((bfd_int64_t)18446744071562067969ull-1), 2147483647ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction jump_alw
struct adl_operand _sym378_operands_operands[] = { {37, 0, ADL_RELATIVE | ADL_SIGNED, 0, 0, 64, ((bfd_int64_t)18446744071562067969ull-1), 2147483647ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym379[] = {
  // jump_    (0)
  { "jump_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x34000000,},0, "", 0, 1, 1, 0, 0, 0, _sym377_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym380[] = { 0,  (struct enum_fields *) -1,};

// Instruction jump_cond

// Shorthand:  jump_cond -> jump_;

static bfd_uint64_t _sym382_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[1].X_add_number) ); }

static int _sym382_mod_indices[] = { 1,  -1 };
struct adl_operand _sym381_operands[] = { {38, 0, 0, 0, 0, 7, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{40, -1, 0, 0, 0, 0, 0, 0, 0, _sym382_modifier, _sym382_mod_indices, 0, 0,0, -1,-1,0},{37, 2, ADL_RELATIVE | ADL_SIGNED, 0, 0, 64, ((bfd_int64_t)18446744071562067969ull-1), 2147483647ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction jump_cond
struct adl_operand _sym383_operands_operands[] = { {38, 0, 0, 0, 0, 7, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{40, 1, 0, 0, 0, 42, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{37, 2, ADL_RELATIVE | ADL_SIGNED, 0, 0, 64, ((bfd_int64_t)18446744071562067969ull-1), 2147483647ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym384[] = {
  // jump_    (0)
  { "jump_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x36000000,},0, "", 0, 3, 3, 0, 0, 0, _sym381_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym385[] = { &_sym50, 0, 0,  (struct enum_fields *) -1,};

// Instruction loop

// Instruction loop
struct adl_operand _sym386_operands_operands[] = { {29, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{42, 1, 0, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{43, 2, 0, 0, 0, 42, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym387[] = { &_sym34, 0, 0,  (struct enum_fields *) -1,};

// Instruction loop_

// Shorthand:  loop_ -> loop;

static bfd_uint64_t _sym389_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_loop_immed ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym389_mod_indices[] = { 0, 1,  -1 };

static bfd_uint64_t _sym390_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_loop_wr ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym390_mod_indices[] = { 0, 1,  -1 };
struct adl_operand _sym388_operands[] = { {29, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{42, -1, 0, 0, 0, 0, 0, 0, 0, _sym389_modifier, _sym389_mod_indices, 0, 0,0, -1,-1,0},{43, -1, 0, 0, 0, 0, 0, 0, 0, _sym390_modifier, _sym390_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction loop_
struct adl_operand _sym391_operands_operands[] = { {29, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{42, 1, 0, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym392[] = {
  // loop    (0)
  { "loop", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x14000000,},0, "", 0, 3, 3, 0, 1, 0, _sym388_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym393[] = { &_sym34, 0,  (struct enum_fields *) -1,};

// Instruction maxs

// Shorthand:  maxs -> maxs_;

static bfd_uint64_t _sym395_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[7].X_add_number) ); }

static int _sym395_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym396_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym396_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym397_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[10].X_add_number) , 1 ); }

static int _sym397_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym398_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[7].X_add_number) ); }

static int _sym398_mod_indices[] = { 7,  -1 };
struct adl_operand _sym394_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{116, 2, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 3, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{112, 4, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{10, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{45, -1, 0, 0, 0, 0, 0, 0, 0, _sym395_modifier, _sym395_mod_indices, 0, 0,0, -1,-1,0},{33, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym396_modifier, _sym396_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym397_modifier, _sym397_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, -1, 0, 0, 0, 0, 0, 0, 0, _sym398_modifier, _sym398_mod_indices, 0, 0,0, -1,-1,0},{115, 13, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction maxs
struct adl_operand _sym399_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{116, 2, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 3, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{112, 4, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{10, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, 7, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 13, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym400[] = {
  // maxs_    (0)
  { "maxs_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x9c080000,},0, "", 0, 15, 15, 0, 8, 0, _sym394_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym401[] = { &_sym38, &_sym90, &_sym128, &_sym44, &_sym126, &_sym12, &_sym42, &_sym58, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction maxs_

// Instruction maxs_
struct adl_operand _sym402_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{116, 2, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 3, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{41, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{112, 5, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{10, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{45, 7, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 8, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 9, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 12, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, 15, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 16, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym403[] = { &_sym38, &_sym90, &_sym128, &_sym44, &_sym54, &_sym126, &_sym12, &_sym56, &_sym42, &_sym30, 0, 0, 0, 0, 0, &_sym58, 0,  (struct enum_fields *) -1,};

// Instruction maxs_gbl

// Shorthand:  maxs_gbl -> maxs_;

static bfd_uint64_t _sym405_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[3].X_add_number) ); }

static int _sym405_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym406_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[5].X_add_number) ); }

static int _sym406_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym407_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[6].X_add_number) , 1 ); }

static int _sym407_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym408_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[3].X_add_number) ); }

static int _sym408_mod_indices[] = { 3,  -1 };
struct adl_operand _sym404_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{45, -1, 0, 0, 0, 0, 0, 0, 0, _sym405_modifier, _sym405_mod_indices, 0, 0,0, -1,-1,0},{33, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym406_modifier, _sym406_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym407_modifier, _sym407_mod_indices, 0, 0,0, -1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, -1, 0, 0, 0, 0, 0, 0, 0, _sym408_modifier, _sym408_mod_indices, 0, 0,0, -1,-1,0},{115, 9, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction maxs_gbl
struct adl_operand _sym409_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, 3, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 6, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 9, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym410[] = {
  // maxs_    (0)
  { "maxs_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x9c000000,},0, "", 0, 11, 11, 0, 4, 0, _sym404_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym411[] = { &_sym38, &_sym90, &_sym42, &_sym58, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction maxs_gbl_ind

// Shorthand:  maxs_gbl_ind -> maxs_;

static bfd_uint64_t _sym413_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[3].X_add_number) ); }

static int _sym413_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym414_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[5].X_add_number) ); }

static int _sym414_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym415_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[3].X_add_number) ); }

static int _sym415_mod_indices[] = { 3,  -1 };
struct adl_operand _sym412_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{45, -1, 0, 0, 0, 0, 0, 0, 0, _sym413_modifier, _sym413_mod_indices, 0, 0,0, -1,-1,0},{33, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym414_modifier, _sym414_mod_indices, 0, 0,0, -1,-1,0},{105, 6, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 7, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, -1, 0, 0, 0, 0, 0, 0, 0, _sym415_modifier, _sym415_mod_indices, 0, 0,0, -1,-1,0},{115, 8, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction maxs_gbl_ind
struct adl_operand _sym416_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, 3, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 6, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 7, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 8, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym417[] = {
  // maxs_    (0)
  { "maxs_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x9c002000,},0, "", 0, 10, 10, 0, 4, 0, _sym412_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym418[] = { &_sym38, &_sym90, &_sym42, &_sym58, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction maxs_ind

// Shorthand:  maxs_ind -> maxs_;

static bfd_uint64_t _sym420_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[7].X_add_number) ); }

static int _sym420_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym421_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym421_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym422_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[7].X_add_number) ); }

static int _sym422_mod_indices[] = { 7,  -1 };
struct adl_operand _sym419_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{116, 2, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 3, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{112, 4, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{10, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{45, -1, 0, 0, 0, 0, 0, 0, 0, _sym420_modifier, _sym420_mod_indices, 0, 0,0, -1,-1,0},{33, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym421_modifier, _sym421_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, -1, 0, 0, 0, 0, 0, 0, 0, _sym422_modifier, _sym422_mod_indices, 0, 0,0, -1,-1,0},{115, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction maxs_ind
struct adl_operand _sym423_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{116, 2, 0, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 3, 0, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{112, 4, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{10, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{46, 7, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{115, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym424[] = {
  // maxs_    (0)
  { "maxs_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x9c082000,},0, "", 0, 14, 14, 0, 8, 0, _sym419_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym425[] = { &_sym38, &_sym90, &_sym128, &_sym44, &_sym126, &_sym12, &_sym42, &_sym58, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction next

// Instruction next
struct enum_fields *_sym427[] = {  (struct enum_fields *) -1,};

// Instruction pdma

// Instruction pdma
struct adl_operand _sym428_operands_operands[] = { {68, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{64, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{69, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{73, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{63, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{71, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{66, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{67, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{65, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };


// Assembler for instruction 'pdma'.
static InstrBundle _sym429(const InstrArgs & args){
       InstrBundle b ;
       InstrArgs nargs = args ;
       unsigned addend = nargs [ 5 ] . value (  ) + nargs [ 4 ] . value (  ) * 2 ;
      if ( addend ) nargs [ 7 ] . set_value ( nargs [ 7 ] . value (  ) + addend ) ;
      nargs . erase ( nargs . begin (  ) + 4 , nargs . begin (  ) + 5 ) ;
      b . push_back ( createInstr ( "pdma_" , nargs ) ) ;
      return b ;
}
struct enum_fields *_sym430[] = { &_sym82, &_sym80, &_sym88, &_sym84, &_sym86, &_sym78, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction pdma_

// Instruction pdma_
struct adl_operand _sym431_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{91, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{12, 2, 0, 0, 0, 8, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{118, 3, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{106, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{121, 5, 0, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{110, 6, 0, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{56, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{57, 8, 0, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{55, 9, 0, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{111, 10, 0, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{109, 11, 0, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym432[] = { &_sym32, &_sym110, &_sym16, &_sym130, &_sym122, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction pdma_ind

// Instruction pdma_ind
struct adl_operand _sym433_operands_operands[] = { {68, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{64, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{69, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{73, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{63, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{71, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{66, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{67, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{65, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 12, 0, 0, 0, 0, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };


// Assembler for instruction 'pdma_ind'.
static InstrBundle _sym434(const InstrArgs & args){
       InstrBundle b ;
       InstrArgs nargs = args ;
       unsigned addend = nargs [ 5 ] . value (  ) + nargs [ 4 ] . value (  ) * 2 ;
      if ( addend ) nargs [ 7 ] . set_value ( nargs [ 7 ] . value (  ) + addend ) ;
      nargs . erase ( nargs . begin (  ) + 4 , nargs . begin (  ) + 5 ) ;
      b . push_back ( createInstr ( "pdma_" , nargs ) ) ;
      return b ;
}
struct enum_fields *_sym435[] = { &_sym82, &_sym80, &_sym88, &_sym84, &_sym86, &_sym78, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2

// Shorthand:  rdx2 -> rdx2_;

static bfd_uint64_t _sym437_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym437_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym438_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym438_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym439_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym439_mod_indices[] = { 10,  -1 };
struct adl_operand _sym436_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym437_modifier, _sym437_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym438_modifier, _sym438_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym439_modifier, _sym439_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2
struct adl_operand _sym440_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym441[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8c000000,},0, "", 0, 13, 13, 0, 7, 0, _sym436_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym442[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym98, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_

// Instruction rdx2_
struct adl_operand _sym443_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 1, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 2, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 3, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 5, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 7, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 14, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 15, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 16, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 17, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 18, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym444[] = { &_sym36, &_sym26, &_sym98, &_sym2, &_sym6, &_sym92, &_sym102, &_sym30, 0, 0, 0, 0, 0, 0, &_sym4, 0, &_sym116, &_sym118, &_sym132,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv

// Shorthand:  rdx2_adptv -> rdx2_;

static bfd_uint64_t _sym446_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[11].X_add_number) ); }

static int _sym446_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym447_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[12].X_add_number) ); }

static int _sym447_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym448_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[13].X_add_number) ); }

static int _sym448_mod_indices[] = { 13,  -1 };
struct adl_operand _sym445_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym446_modifier, _sym446_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym447_modifier, _sym447_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym448_modifier, _sym448_mod_indices, 0, 0,0, -1,-1,0},{105, 14, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 15, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_adptv
struct adl_operand _sym449_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 12, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 13, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 14, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 15, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym450[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8c040000,},0, "", 0, 16, 16, 0, 9, 0, _sym445_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym451[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym98, &_sym118, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv_ind

// Shorthand:  rdx2_adptv_ind -> rdx2_;

static bfd_uint64_t _sym453_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[11].X_add_number) ); }

static int _sym453_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym454_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[12].X_add_number) ); }

static int _sym454_mod_indices[] = { 12,  -1 };
struct adl_operand _sym452_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym453_modifier, _sym453_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym454_modifier, _sym454_mod_indices, 0, 0,0, -1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_adptv_ind
struct adl_operand _sym455_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym456[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8c042000,},0, "", 0, 15, 15, 0, 9, 0, _sym452_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym457[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym98, &_sym118, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv_shift_wr

// Shorthand:  rdx2_adptv_shift_wr -> rdx2_;

static bfd_uint64_t _sym459_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym459_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym460_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[10].X_add_number) ); }

static int _sym460_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym461_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[11].X_add_number) ); }

static int _sym461_mod_indices[] = { 11,  -1 };
struct adl_operand _sym458_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym459_modifier, _sym459_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym460_modifier, _sym460_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym461_modifier, _sym461_mod_indices, 0, 0,0, -1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_adptv_shift_wr
struct adl_operand _sym462_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym463[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x8c040000,},0, "", 0, 14, 14, 0, 7, 0, _sym458_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym464[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym98, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv_shift_wr_ind

// Shorthand:  rdx2_adptv_shift_wr_ind -> rdx2_;

static bfd_uint64_t _sym466_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym466_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym467_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym467_mod_indices[] = { 10,  -1 };
struct adl_operand _sym465_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym466_modifier, _sym466_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym467_modifier, _sym467_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_adptv_shift_wr_ind
struct adl_operand _sym468_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym469[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x8c042000,},0, "", 0, 13, 13, 0, 7, 0, _sym465_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym470[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym98, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_ind

// Shorthand:  rdx2_ind -> rdx2_;

static bfd_uint64_t _sym472_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym472_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym473_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym473_mod_indices[] = { 9,  -1 };
struct adl_operand _sym471_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym472_modifier, _sym472_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym473_modifier, _sym473_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_ind
struct adl_operand _sym474_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{23, 3, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 5, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym475[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8c002000,},0, "", 0, 12, 12, 0, 7, 0, _sym471_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym476[] = { &_sym36, &_sym92, &_sym132, &_sym26, &_sym100, &_sym98, &_sym118, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_shift_wr

// Shorthand:  rdx2_shift_wr -> rdx2_;

static bfd_uint64_t _sym478_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym478_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym479_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym479_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym480_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym480_mod_indices[] = { 10,  -1 };
struct adl_operand _sym477_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym478_modifier, _sym478_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym479_modifier, _sym479_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym480_modifier, _sym480_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_shift_wr
struct adl_operand _sym481_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym482[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x8c000000,},0, "", 0, 13, 13, 0, 6, 0, _sym477_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym483[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym98, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_shift_wr_ind

// Shorthand:  rdx2_shift_wr_ind -> rdx2_;

static bfd_uint64_t _sym485_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym485_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym486_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym486_mod_indices[] = { 9,  -1 };
struct adl_operand _sym484_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym485_modifier, _sym485_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym486_modifier, _sym486_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx2_shift_wr_ind
struct adl_operand _sym487_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 2, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 4, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 5, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 6, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym488[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x8c002000,},0, "", 0, 12, 12, 0, 6, 0, _sym484_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym489[] = { &_sym36, &_sym92, &_sym132, &_sym100, &_sym98, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0

// Shorthand:  rdx4_mm0 -> rdx4_mm0_;

static bfd_uint64_t _sym491_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym491_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym492_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym492_mod_indices[] = { 9,  -1 };
struct adl_operand _sym490_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym491_modifier, _sym491_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym492_modifier, _sym492_mod_indices, 0, 0,0, -1,-1,0},{7, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mm0
struct adl_operand _sym493_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym494[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88000000,},0, "", 0, 14, 14, 0, 7, 0, _sym490_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym495[] = { &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym118, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0_

// Instruction rdx4_mm0_
struct adl_operand _sym496_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 2, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 4, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 5, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 6, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 7, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 8, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 13, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 14, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym497[] = { &_sym36, &_sym142, &_sym24, &_sym92, &_sym100, &_sym30, 0, 0, 0, 0, 0, 0, 0, &_sym118, &_sym132,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0_ind

// Shorthand:  rdx4_mm0_ind -> rdx4_mm0_;

static bfd_uint64_t _sym499_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym499_mod_indices[] = { 8,  -1 };
struct adl_operand _sym498_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym499_modifier, _sym499_mod_indices, 0, 0,0, -1,-1,0},{7, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mm0_ind
struct adl_operand _sym500_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 4, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 5, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym501[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88002000,},0, "", 0, 13, 13, 0, 7, 0, _sym498_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym502[] = { &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0

// Shorthand:  rdx4_mmn0 -> rdx4_mmn0_;

static bfd_uint64_t _sym504_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym504_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym505_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym505_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym506_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym506_mod_indices[] = { 10,  -1 };
struct adl_operand _sym503_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym504_modifier, _sym504_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym505_modifier, _sym505_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym506_modifier, _sym506_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0
struct adl_operand _sym507_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym508[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88000000,},0, "", 0, 15, 15, 0, 7, 0, _sym503_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym509[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_

// Instruction rdx4_mmn0_
struct adl_operand _sym510_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 2, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 3, 0, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 4, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 5, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 6, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 7, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 15, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 17, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 18, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 19, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 20, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 21, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym511[] = { &_sym36, &_sym142, &_sym24, &_sym2, &_sym6, &_sym92, &_sym100, &_sym30, 0, 0, 0, 0, 0, 0, &_sym60, &_sym4, 0, 0, &_sym64, &_sym116, &_sym118, &_sym132,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv

// Shorthand:  rdx4_mmn0_adptv -> rdx4_mmn0_;

static bfd_uint64_t _sym513_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[11].X_add_number) ); }

static int _sym513_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym514_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[12].X_add_number) ); }

static int _sym514_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym515_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[13].X_add_number) ); }

static int _sym515_mod_indices[] = { 13,  -1 };
struct adl_operand _sym512_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym513_modifier, _sym513_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym514_modifier, _sym514_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym515_modifier, _sym515_mod_indices, 0, 0,0, -1,-1,0},{105, 14, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 15, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 16, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 17, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_adptv
struct adl_operand _sym516_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 12, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 13, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 14, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 15, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 16, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 17, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym517[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88040000,},0, "", 0, 18, 18, 0, 9, 0, _sym512_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym518[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_ind

// Shorthand:  rdx4_mmn0_adptv_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym520_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[11].X_add_number) ); }

static int _sym520_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym521_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[12].X_add_number) ); }

static int _sym521_mod_indices[] = { 12,  -1 };
struct adl_operand _sym519_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym520_modifier, _sym520_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym521_modifier, _sym521_mod_indices, 0, 0,0, -1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 15, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_adptv_ind
struct adl_operand _sym522_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 8, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 9, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 10, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 11, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 15, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym523[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88042000,},0, "", 0, 17, 17, 0, 9, 0, _sym519_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym524[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft

// Shorthand:  rdx4_mmn0_adptv_shft -> rdx4_mmn0_;

static bfd_uint64_t _sym526_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym526_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym527_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[10].X_add_number) ); }

static int _sym527_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym528_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[11].X_add_number) ); }

static int _sym528_mod_indices[] = { 11,  -1 };
struct adl_operand _sym525_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym526_modifier, _sym526_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym527_modifier, _sym527_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym528_modifier, _sym528_mod_indices, 0, 0,0, -1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_adptv_shft
struct adl_operand _sym529_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym530[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88040000,},0, "", 0, 16, 16, 0, 8, 0, _sym525_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym531[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym118, &_sym6, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft_ind

// Shorthand:  rdx4_mmn0_adptv_shft_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym533_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym533_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym534_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym534_mod_indices[] = { 10,  -1 };
struct adl_operand _sym532_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym533_modifier, _sym533_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym534_modifier, _sym534_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_adptv_shft_ind
struct adl_operand _sym535_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 7, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym536[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88042000,},0, "", 0, 15, 15, 0, 6, 0, _sym532_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym537[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym118, &_sym6, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft_wr

// Shorthand:  rdx4_mmn0_adptv_shft_wr -> rdx4_mmn0_;

static bfd_uint64_t _sym539_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[10].X_add_number) ); }

static int _sym539_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym540_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[11].X_add_number) ); }

static int _sym540_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym541_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[12].X_add_number) ); }

static int _sym541_mod_indices[] = { 12,  -1 };
struct adl_operand _sym538_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym539_modifier, _sym539_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym540_modifier, _sym540_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym541_modifier, _sym541_mod_indices, 0, 0,0, -1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 15, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_adptv_shft_wr
struct adl_operand _sym542_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 10, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 11, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 15, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 16, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym543[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x88040000,},0, "", 0, 17, 17, 0, 8, 0, _sym538_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym544[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym6, &_sym114, 0, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft_wr_ind

// Shorthand:  rdx4_mmn0_adptv_shft_wr_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym546_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym546_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym547_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[11].X_add_number) ); }

static int _sym547_mod_indices[] = { 11,  -1 };
struct adl_operand _sym545_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym546_modifier, _sym546_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym547_modifier, _sym547_mod_indices, 0, 0,0, -1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_adptv_shft_wr_ind
struct adl_operand _sym548_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{2, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 7, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 8, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 10, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym549[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x88042000,},0, "", 0, 16, 16, 0, 8, 0, _sym545_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym550[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym6, &_sym114, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_ind

// Shorthand:  rdx4_mmn0_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym552_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym552_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym553_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym553_mod_indices[] = { 9,  -1 };
struct adl_operand _sym551_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym552_modifier, _sym552_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym553_modifier, _sym553_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_ind
struct adl_operand _sym554_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{22, 6, 0, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym555[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88002000,},0, "", 0, 14, 14, 0, 7, 0, _sym551_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym556[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym24, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft

// Shorthand:  rdx4_mmn0_shft -> rdx4_mmn0_;

static bfd_uint64_t _sym558_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[8].X_add_number) ); }

static int _sym558_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym559_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym559_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym560_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym560_mod_indices[] = { 10,  -1 };
struct adl_operand _sym557_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym558_modifier, _sym558_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym559_modifier, _sym559_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym560_modifier, _sym560_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_shft
struct adl_operand _sym561_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym562[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88000000,},0, "", 0, 15, 15, 0, 7, 0, _sym557_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym563[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym118, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft_ind

// Shorthand:  rdx4_mmn0_shft_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym565_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym565_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym566_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[9].X_add_number) ); }

static int _sym566_mod_indices[] = { 9,  -1 };
struct adl_operand _sym564_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym565_modifier, _sym565_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym566_modifier, _sym566_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_shft_ind
struct adl_operand _sym567_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 6, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 12, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 13, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym568[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88002000,},0, "", 0, 14, 14, 0, 5, 0, _sym564_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym569[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym118, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft_wr

// Shorthand:  rdx4_mmn0_shft_wr -> rdx4_mmn0_;

static bfd_uint64_t _sym571_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[9].X_add_number) ); }

static int _sym571_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym572_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[10].X_add_number) ); }

static int _sym572_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym573_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[11].X_add_number) ); }

static int _sym573_mod_indices[] = { 11,  -1 };
struct adl_operand _sym570_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym571_modifier, _sym571_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym572_modifier, _sym572_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym573_modifier, _sym573_mod_indices, 0, 0,0, -1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_shft_wr
struct adl_operand _sym574_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 10, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 11, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 12, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 13, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 14, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 15, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym575[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x88000000,},0, "", 0, 16, 16, 0, 7, 0, _sym570_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym576[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym114, 0, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft_wr_ind

// Shorthand:  rdx4_mmn0_shft_wr_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym578_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym578_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym579_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[10].X_add_number) ); }

static int _sym579_mod_indices[] = { 10,  -1 };
struct adl_operand _sym577_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym578_modifier, _sym578_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym579_modifier, _sym579_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction rdx4_mmn0_shft_wr_ind
struct adl_operand _sym580_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{128, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{81, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 4, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{119, 5, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 6, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 7, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 8, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 9, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 13, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 14, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym581[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x88002000,},0, "", 0, 15, 15, 0, 7, 0, _sym577_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym582[] = { &_sym64, &_sym36, &_sym142, &_sym100, &_sym92, &_sym132, &_sym114, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction repeat

// Instruction repeat
struct adl_operand _sym583_operands_operands[] = { {87, 0, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{83, 1, 0, 0, 0, 68, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{84, 2, 0, 0, 0, 84, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{85, 3, 0, 0, 0, 100, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{86, 4, 0, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym584[] = { 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp

// Shorthand:  scp -> scp_;

static bfd_uint64_t _sym586_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[5].X_add_number) ); }

static int _sym586_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym587_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym587_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym588_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[7].X_add_number) ); }

static int _sym588_mod_indices[] = { 7,  -1 };
struct adl_operand _sym585_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 3, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym586_modifier, _sym586_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym587_modifier, _sym587_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym588_modifier, _sym588_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction scp
struct adl_operand _sym589_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 3, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 6, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym590[] = {
  // scp_    (0)
  { "scp_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa8000000,},0, "", 0, 10, 10, 0, 3, 0, _sym585_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym591[] = { &_sym36, &_sym96, &_sym118, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp_

// Instruction scp_
struct adl_operand _sym592_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 2, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 3, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 6, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 10, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 11, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 12, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 13, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym593[] = { &_sym36, &_sym96, 0, &_sym30, 0, 0, 0, 0, 0, 0, &_sym114, 0, &_sym116, &_sym118,  (struct enum_fields *) -1,};

// Instruction scp_ind

// Shorthand:  scp_ind -> scp_;

static bfd_uint64_t _sym595_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[5].X_add_number) ); }

static int _sym595_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym596_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[6].X_add_number) ); }

static int _sym596_mod_indices[] = { 6,  -1 };
struct adl_operand _sym594_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 3, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym595_modifier, _sym595_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym596_modifier, _sym596_mod_indices, 0, 0,0, -1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction scp_ind
struct adl_operand _sym597_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 3, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 6, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym598[] = {
  // scp_    (0)
  { "scp_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa8002000,},0, "", 0, 9, 9, 0, 3, 0, _sym594_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym599[] = { &_sym36, &_sym96, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp_shft_wr

// Shorthand:  scp_shft_wr -> scp_;

static bfd_uint64_t _sym601_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym601_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym602_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym602_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym603_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[8].X_add_number) ); }

static int _sym603_mod_indices[] = { 8,  -1 };
struct adl_operand _sym600_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym601_modifier, _sym601_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym602_modifier, _sym602_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym603_modifier, _sym603_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 2, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 3, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction scp_shft_wr
struct adl_operand _sym604_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 2, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 3, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym605[] = {
  // scp_    (0)
  { "scp_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xa8000000,},0, "", 0, 11, 11, 0, 4, 0, _sym600_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym606[] = { &_sym36, &_sym96, &_sym114, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp_shft_wr_ind

// Shorthand:  scp_shft_wr_ind -> scp_;

static bfd_uint64_t _sym608_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[6].X_add_number) ); }

static int _sym608_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym609_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[7].X_add_number) ); }

static int _sym609_mod_indices[] = { 7,  -1 };
struct adl_operand _sym607_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym608_modifier, _sym608_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym609_modifier, _sym609_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 2, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 3, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction scp_shft_wr_ind
struct adl_operand _sym610_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{79, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 2, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 3, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{53, 4, 0, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym611[] = {
  // scp_    (0)
  { "scp_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0xa8002000,},0, "", 0, 10, 10, 0, 4, 0, _sym607_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym612[] = { &_sym36, &_sym96, &_sym114, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sel

// Shorthand:  sel -> sel_;

static bfd_uint64_t _sym614_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[2].X_add_number) , 1 ); }

static int _sym614_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym615_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[4].X_add_number) , 0 ); }

static int _sym615_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym616_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[5].X_add_number) , 0 ); }

static int _sym616_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym617_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[3].X_add_number) , 0 ); }

static int _sym617_mod_indices[] = { 3,  -1 };
struct adl_operand _sym613_operands[] = { {78, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{94, 1, 0, 0, 0, 42, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym614_modifier, _sym614_mod_indices, 0, 0,0, -1,-1,0},{103, -1, 0, 0, 0, 0, 0, 0, 0, _sym615_modifier, _sym615_mod_indices, 0, 0,0, -1,-1,0},{93, -1, 0, 0, 0, 0, 0, 0, 0, _sym616_modifier, _sym616_mod_indices, 0, 0,0, -1,-1,0},{92, -1, 0, 0, 0, 0, 0, 0, 0, _sym617_modifier, _sym617_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction sel
struct adl_operand _sym618_operands_operands[] = { {78, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{94, 1, 0, 0, 0, 42, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 2, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{92, 3, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{103, 4, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{93, 5, 0, 0, 0, 80, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym619[] = {
  // sel_    (0)
  { "sel_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x38000000,},0, "", 0, 6, 6, 0, 1, 0, _sym613_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym620[] = { &_sym94, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sel_

// Instruction sel_
struct adl_operand _sym621_operands_operands[] = { {78, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{94, 1, 0, 0, 0, 42, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 2, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{103, 3, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{93, 4, 0, 0, 0, 80, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{92, 5, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym622[] = { &_sym94, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set

// Shorthand:  set -> set_;

static bfd_uint64_t _sym624_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( get_wr ( (operands[0].X_add_number) , (operands[1].X_add_number) ) ); }

static int _sym624_mod_indices[] = { 0, 1,  -1 };

static bfd_uint64_t _sym625_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[2].X_add_number) , 1 ); }

static int _sym625_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym626_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym626_mod_indices[] = { 0, 1,  -1 };
struct adl_operand _sym623_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym624_modifier, _sym624_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym625_modifier, _sym625_mod_indices, 0, 0,0, -1,-1,0},{27, -1, 0, 0, 0, 0, 0, 0, 0, _sym626_modifier, _sym626_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction set
struct adl_operand _sym627_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 1, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 2, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym628[] = {
  // set_    (0)
  { "set_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x4000000,},0, "", 0, 4, 4, 0, 1, 0, _sym623_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym629[] = { &_sym32, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_

// Instruction set_
struct adl_operand _sym630_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 1, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 2, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 3, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 4, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym631[] = { &_sym32, &_sym30, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_ind

// Shorthand:  set_ind -> set_;

static bfd_uint64_t _sym633_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[0].X_add_number) ); }

static int _sym633_mod_indices[] = { 0,  -1 };
struct adl_operand _sym632_operands[] = { {104, -1, 0, 0, 0, 0, 0, 0, 0, _sym633_modifier, _sym633_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction set_ind
struct adl_operand _sym634_operands_operands[] = { {104, 0, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym635[] = {
  // set_    (0)
  { "set_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x6002000,},0, "", 0, 1, 1, 0, 0, 0, _sym632_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym636[] = { 0,  (struct enum_fields *) -1,};

// Instruction sort

// Shorthand:  sort -> sort_;

static bfd_uint64_t _sym638_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[5].X_add_number) ); }

static int _sym638_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym639_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym639_mod_indices[] = { 6,  -1 };
struct adl_operand _sym637_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym638_modifier, _sym638_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym639_modifier, _sym639_mod_indices, 0, 0,0, -1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction sort
struct adl_operand _sym640_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 6, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym641[] = {
  // sort_    (0)
  { "sort_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x74000000,},0, "", 0, 9, 9, 0, 4, 0, _sym637_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym642[] = { &_sym38, &_sym90, &_sym112, &_sym42, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sort_

// Instruction sort_
struct adl_operand _sym643_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{102, 2, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 4, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{101, 10, 0, 0, 0, 106, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 11, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym644[] = { &_sym38, &_sym90, 0, &_sym42, &_sym30, 0, 0, 0, 0, 0, 0, &_sym112,  (struct enum_fields *) -1,};

// Instruction sort_ind

// Shorthand:  sort_ind -> sort_;

static bfd_uint64_t _sym646_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[5].X_add_number) ); }

static int _sym646_mod_indices[] = { 5,  -1 };
struct adl_operand _sym645_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym646_modifier, _sym646_mod_indices, 0, 0,0, -1,-1,0},{105, 6, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 7, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction sort_ind
struct adl_operand _sym647_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 6, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 7, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym648[] = {
  // sort_    (0)
  { "sort_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x74002000,},0, "", 0, 8, 8, 0, 4, 0, _sym645_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym649[] = { &_sym38, &_sym90, &_sym112, &_sym42, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sort_slide

// Shorthand:  sort_slide -> sort_;

static bfd_uint64_t _sym651_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym651_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym652_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym652_mod_indices[] = { 7,  -1 };
struct adl_operand _sym650_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym651_modifier, _sym651_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym652_modifier, _sym652_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{101, 4, 0, 0, 0, 106, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction sort_slide
struct adl_operand _sym653_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{101, 4, 0, 0, 0, 106, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym654[] = {
  // sort_    (0)
  { "sort_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x74010000,},0, "", 0, 10, 10, 0, 5, 0, _sym650_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym655[] = { &_sym38, &_sym90, &_sym112, &_sym42, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sort_slide_ind

// Shorthand:  sort_slide_ind -> sort_;

static bfd_uint64_t _sym657_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[6].X_add_number) ); }

static int _sym657_mod_indices[] = { 6,  -1 };
struct adl_operand _sym656_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym657_modifier, _sym657_mod_indices, 0, 0,0, -1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{101, 4, 0, 0, 0, 106, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction sort_slide_ind
struct adl_operand _sym658_operands_operands[] = { {31, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{76, 1, 0, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{95, 2, 0, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{33, 3, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{101, 4, 0, 0, 0, 106, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym659[] = {
  // sort_    (0)
  { "sort_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x74012000,},0, "", 0, 9, 9, 0, 5, 0, _sym656_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym660[] = { &_sym38, &_sym90, &_sym112, &_sym42, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction stop

// Instruction stop
struct enum_fields *_sym662[] = {  (struct enum_fields *) -1,};

// Instruction sub

// Shorthand:  sub -> sub_;

static bfd_uint64_t _sym664_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[3].X_add_number) , 0 ); }

static int _sym664_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym665_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return validate_addr ( (operands[5].X_add_number) , 1 ); }

static int _sym665_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym666_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr_spr ( get_wr ( (operands[0].X_add_number) , (operands[4].X_add_number) ) ); }

static int _sym666_mod_indices[] = { 0, 4,  -1 };

static bfd_uint64_t _sym667_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym667_mod_indices[] = { 0, 4,  -1 };
struct adl_operand _sym663_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{100, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 2, 0, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym664_modifier, _sym664_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym665_modifier, _sym665_mod_indices, 0, 0,0, -1,-1,0},{103, -1, 0, 0, 0, 0, 0, 0, 0, _sym666_modifier, _sym666_mod_indices, 0, 0,0, -1,-1,0},{27, -1, 0, 0, 0, 0, 0, 0, 0, _sym667_modifier, _sym667_mod_indices, 0, 0,0, -1,-1,0}, };

// Instruction sub
struct adl_operand _sym668_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{100, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 2, 0, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 3, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 4, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 5, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym669[] = {
  // sub_    (0)
  { "sub_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x2c000000,},0, "", 0, 7, 7, 0, 3, 0, _sym663_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym670[] = { &_sym32, &_sym120, &_sym62, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sub_

// Instruction sub_
struct adl_operand _sym671_operands_operands[] = { {28, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{100, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 2, 0, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 3, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 4, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{103, 5, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{27, 6, 0, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym672[] = { &_sym32, &_sym120, &_sym62, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sync

// Instruction sync
struct adl_operand _sym673_operands_operands[] = { {108, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{107, 1, 0, 0, 0, 123, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym674[] = { &_sym124, 0,  (struct enum_fields *) -1,};

// Instruction sync_

// Shorthand:  sync_ -> sync;

// Instruction sync_
static struct adl_opcode _sym677[] = {
  // sync    (0)
  { "sync", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x1c000000,},0, "", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym678[] = {  (struct enum_fields *) -1,};

// Instruction sync__

// Shorthand:  sync__ -> sync;
struct adl_operand _sym679_operands[] = { {108, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{107, 1, 0, 0, 0, 123, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction sync__
struct adl_operand _sym680_operands_operands[] = { {108, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{107, 1, 0, 0, 0, 123, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym681[] = {
  // sync    (0)
  { "sync", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x1c000000,},0, "", 0, 2, 2, 0, 1, 0, _sym679_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym682[] = { &_sym124, 0,  (struct enum_fields *) -1,};

// Instruction sync_dsp

// Shorthand:  sync_dsp -> sync;

// Instruction sync_dsp
static struct adl_opcode _sym685[] = {
  // sync    (0)
  { "sync", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x1f000000,},0, "", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym686[] = {  (struct enum_fields *) -1,};

// Instruction thread

// Instruction thread
struct adl_operand _sym687_operands_operands[] = { {114, 0, 0, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym688[] = { 0,  (struct enum_fields *) -1,};

// Instruction vmt

// Shorthand:  vmt -> vmt_;

static bfd_uint64_t _sym690_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[8].X_add_number) ); }

static int _sym690_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym691_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[9].X_add_number) ); }

static int _sym691_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym692_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym692_mod_indices[] = { 10,  -1 };
struct adl_operand _sym689_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym690_modifier, _sym690_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym691_modifier, _sym691_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym692_modifier, _sym692_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt
struct adl_operand _sym693_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym694[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98000000,},0, "", 0, 13, 13, 0, 7, 0, _sym689_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym695[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_

// Instruction vmt_
struct adl_operand _sym696_operands_operands[] = { {89, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 1, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 3, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{60, 4, 0, 0, 0, 11, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 5, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 6, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 7, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 8, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 9, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 10, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 11, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 12, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 13, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 14, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{26, 15, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 16, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym697[] = { &_sym106, &_sym40, &_sym68, &_sym70, &_sym72, &_sym74, &_sym66, &_sym48, &_sym30, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_imm_off_sq2s2

// Shorthand:  vmt_imm_off_sq2s2 -> vmt_;

static bfd_uint64_t _sym699_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[8].X_add_number) ); }

static int _sym699_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym700_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[9].X_add_number) ); }

static int _sym700_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym701_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym701_mod_indices[] = { 10,  -1 };
struct adl_operand _sym698_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym699_modifier, _sym699_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym700_modifier, _sym700_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym701_modifier, _sym701_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{26, 13, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 14, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_imm_off_sq2s2
struct adl_operand _sym702_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 13, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 14, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym703[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x980c0000,},0, "", 0, 15, 15, 0, 7, 0, _sym698_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym704[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_imm_off_sq2s2_ind

// Shorthand:  vmt_imm_off_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym706_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym706_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym707_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym707_mod_indices[] = { 9,  -1 };
struct adl_operand _sym705_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym706_modifier, _sym706_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym707_modifier, _sym707_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{26, 12, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 13, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_imm_off_sq2s2_ind
struct adl_operand _sym708_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 12, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 13, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym709[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x980c2000,},0, "", 0, 14, 14, 0, 7, 0, _sym705_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym710[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_ind

// Shorthand:  vmt_ind -> vmt_;

static bfd_uint64_t _sym712_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym712_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym713_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym713_mod_indices[] = { 9,  -1 };
struct adl_operand _sym711_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym712_modifier, _sym712_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym713_modifier, _sym713_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_ind
struct adl_operand _sym714_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym715[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98002000,},0, "", 0, 12, 12, 0, 7, 0, _sym711_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym716[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_shift_sq2s2

// Shorthand:  vmt_shift_sq2s2 -> vmt_;

static bfd_uint64_t _sym718_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[8].X_add_number) ); }

static int _sym718_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym719_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[9].X_add_number) ); }

static int _sym719_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym720_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym720_mod_indices[] = { 10,  -1 };
struct adl_operand _sym717_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym718_modifier, _sym718_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym719_modifier, _sym719_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym720_modifier, _sym720_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 13, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_shift_sq2s2
struct adl_operand _sym721_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 13, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym722[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98040000,},0, "", 0, 14, 14, 0, 7, 0, _sym717_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym723[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_shift_sq2s2_ind

// Shorthand:  vmt_shift_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym725_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym725_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym726_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym726_mod_indices[] = { 9,  -1 };
struct adl_operand _sym724_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym725_modifier, _sym725_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym726_modifier, _sym726_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_shift_sq2s2_ind
struct adl_operand _sym727_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 12, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym728[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98042000,},0, "", 0, 13, 13, 0, 7, 0, _sym724_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym729[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_vec_sq2s2

// Shorthand:  vmt_vec_sq2s2 -> vmt_;

static bfd_uint64_t _sym731_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[8].X_add_number) ); }

static int _sym731_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym732_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[9].X_add_number) ); }

static int _sym732_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym733_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym733_mod_indices[] = { 10,  -1 };
struct adl_operand _sym730_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym731_modifier, _sym731_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym732_modifier, _sym732_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym733_modifier, _sym733_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 13, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_vec_sq2s2
struct adl_operand _sym734_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 13, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym735[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98100000,},0, "", 0, 14, 14, 0, 7, 0, _sym730_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym736[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_vec_sq2s2_ind

// Shorthand:  vmt_vec_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym738_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym738_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym739_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym739_mod_indices[] = { 9,  -1 };
struct adl_operand _sym737_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym738_modifier, _sym738_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym739_modifier, _sym739_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_vec_sq2s2_ind
struct adl_operand _sym740_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 12, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym741[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98102000,},0, "", 0, 13, 13, 0, 7, 0, _sym737_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym742[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_wr_off_sq2s2

// Shorthand:  vmt_wr_off_sq2s2 -> vmt_;

static bfd_uint64_t _sym744_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[8].X_add_number) ); }

static int _sym744_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym745_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram_tram ( (operands[9].X_add_number) ); }

static int _sym745_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym746_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[10].X_add_number) ); }

static int _sym746_mod_indices[] = { 10,  -1 };
struct adl_operand _sym743_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym744_modifier, _sym744_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym745_modifier, _sym745_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym746_modifier, _sym746_mod_indices, 0, 0,0, -1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 13, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_wr_off_sq2s2
struct adl_operand _sym747_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 9, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 10, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 11, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 12, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 13, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym748[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98080000,},0, "", 0, 14, 14, 0, 7, 0, _sym743_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym749[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_wr_off_sq2s2_ind

// Shorthand:  vmt_wr_off_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym751_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[8].X_add_number) ); }

static int _sym751_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym752_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[9].X_add_number) ); }

static int _sym752_mod_indices[] = { 9,  -1 };
struct adl_operand _sym750_operands[] = { {89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym751_modifier, _sym751_mod_indices, 0, 0,0, -1,-1,0},{52, -1, 0, 0, 0, 0, 0, 0, 0, _sym752_modifier, _sym752_mod_indices, 0, 0,0, -1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{19, 12, 0, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction vmt_wr_off_sq2s2_ind
struct adl_operand _sym753_operands_operands[] = { {32, 0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{89, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{36, 2, 0, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 3, 0, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 5, 0, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 7, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 8, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 9, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 10, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 11, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{20, 12, 0, 0, 0, 0, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym754[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98082000,},0, "", 0, 13, 13, 0, 7, 0, _sym750_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym755[] = { &_sym40, &_sym106, &_sym48, &_sym66, &_sym68, &_sym70, &_sym74, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction wait

// Instruction wait
struct adl_operand _sym756_operands_operands[] = { {17, 0, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{122, 1, 0, 0, 0, 25, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym757[] = { &_sym20, 0,  (struct enum_fields *) -1,};

// Instruction watchdog

// Shorthand:  watchdog -> watchdog_;
struct adl_operand _sym758_operands[] = { {125, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{126, 1, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{124, 2, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{123, 3, 0, 0, 0, 104, 0ull, 0xffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction watchdog
struct adl_operand _sym759_operands_operands[] = { {125, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{126, 1, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{124, 2, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{123, 3, 0, 0, 0, 104, 0ull, 0xffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym760[] = {
  // watchdog_    (0)
  { "watchdog_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x28000000,},0, "", 0, 4, 4, 0, 1, 0, _sym758_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym761[] = { &_sym136, &_sym138, &_sym134, 0,  (struct enum_fields *) -1,};

// Instruction watchdog_

// Instruction watchdog_
struct adl_operand _sym762_operands_operands[] = { {125, 0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{126, 1, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{124, 2, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{123, 3, 0, 0, 0, 104, 0ull, 0xffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym763[] = { &_sym136, &_sym138, &_sym134, 0,  (struct enum_fields *) -1,};

// Instruction win_mm0

// Shorthand:  win_mm0 -> win_mm0_;

static bfd_uint64_t _sym765_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[4].X_add_number) ); }

static int _sym765_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym766_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[5].X_add_number) ); }

static int _sym766_mod_indices[] = { 5,  -1 };
struct adl_operand _sym764_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym765_modifier, _sym765_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym766_modifier, _sym766_mod_indices, 0, 0,0, -1,-1,0},{7, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 6, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 7, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 9, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction win_mm0
struct adl_operand _sym767_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 4, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 5, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 6, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 7, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 9, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym768[] = {
  // win_mm0_    (0)
  { "win_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x84000000,},0, "", 0, 10, 10, 0, 2, 0, _sym764_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym769[] = { &_sym36, &_sym140, &_sym118, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction win_mm0_

// Instruction win_mm0_
struct adl_operand _sym770_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 2, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 4, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 5, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 6, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 9, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 10, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym771[] = { &_sym36, &_sym140, &_sym30, 0, 0, 0, 0, 0, 0, 0, &_sym118,  (struct enum_fields *) -1,};

// Instruction win_mm0_ind

// Shorthand:  win_mm0_ind -> win_mm0_;

static bfd_uint64_t _sym773_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[4].X_add_number) ); }

static int _sym773_mod_indices[] = { 4,  -1 };
struct adl_operand _sym772_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym773_modifier, _sym773_mod_indices, 0, 0,0, -1,-1,0},{7, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 5, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 6, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 8, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction win_mm0_ind
struct adl_operand _sym774_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 2, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 4, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 5, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 6, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 8, 0, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym775[] = {
  // win_mm0_    (0)
  { "win_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x84002000,},0, "", 0, 9, 9, 0, 2, 0, _sym772_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym776[] = { &_sym36, &_sym140, &_sym118, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0

// Shorthand:  win_mmn0 -> win_mmn0_;

static bfd_uint64_t _sym778_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[5].X_add_number) ); }

static int _sym778_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym779_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym779_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym780_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[7].X_add_number) ); }

static int _sym780_mod_indices[] = { 7,  -1 };
struct adl_operand _sym777_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym778_modifier, _sym778_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym779_modifier, _sym779_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym780_modifier, _sym780_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 10, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 11, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction win_mmn0
struct adl_operand _sym781_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 6, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 10, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 11, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym782[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x84000000,},0, "", 0, 12, 12, 0, 3, 0, _sym777_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym783[] = { &_sym64, &_sym36, &_sym140, &_sym118, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0_

// Instruction win_mmn0_
struct adl_operand _sym784_operands_operands[] = { {30, 0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 1, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{25, 2, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 3, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 4, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 5, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 6, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 9, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 10, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 11, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 12, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 13, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{97, 14, 0, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 15, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
struct enum_fields *_sym785[] = { &_sym36, &_sym140, &_sym30, 0, 0, 0, 0, 0, 0, &_sym60, &_sym114, 0, 0, &_sym64, &_sym116, &_sym118,  (struct enum_fields *) -1,};

// Instruction win_mmn0_ind

// Shorthand:  win_mmn0_ind -> win_mmn0_;

static bfd_uint64_t _sym787_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[5].X_add_number) ); }

static int _sym787_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym788_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[6].X_add_number) ); }

static int _sym788_mod_indices[] = { 6,  -1 };
struct adl_operand _sym786_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym787_modifier, _sym787_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym788_modifier, _sym788_mod_indices, 0, 0,0, -1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 9, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 10, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction win_mmn0_ind
struct adl_operand _sym789_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{98, 3, 0, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 4, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 5, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 6, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 7, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 8, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 9, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 10, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym790[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x84002000,},0, "", 0, 11, 11, 0, 3, 0, _sym786_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym791[] = { &_sym64, &_sym36, &_sym140, &_sym118, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0_shft

// Shorthand:  win_mmn0_shft -> win_mmn0_;

static bfd_uint64_t _sym793_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[6].X_add_number) ); }

static int _sym793_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym794_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_oram ( (operands[7].X_add_number) ); }

static int _sym794_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym795_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[8].X_add_number) ); }

static int _sym795_mod_indices[] = { 8,  -1 };
struct adl_operand _sym792_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym793_modifier, _sym793_mod_indices, 0, 0,0, -1,-1,0},{13, -1, 0, 0, 0, 0, 0, 0, 0, _sym794_modifier, _sym794_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym795_modifier, _sym795_mod_indices, 0, 0,0, -1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 11, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 12, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction win_mmn0_shft
struct adl_operand _sym796_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{13, 7, 0, 0, 0, 48, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 8, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 9, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 10, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 11, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 12, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym797[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x84000000,},0, "", 0, 13, 13, 0, 4, 0, _sym792_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym798[] = { &_sym64, &_sym36, &_sym140, &_sym114, 0, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0_shft_ind

// Shorthand:  win_mmn0_shft_ind -> win_mmn0_;

static bfd_uint64_t _sym800_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_wr ( (operands[6].X_add_number) ); }

static int _sym800_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym801_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_addr_tram_wr ( (operands[7].X_add_number) ); }

static int _sym801_mod_indices[] = { 7,  -1 };
struct adl_operand _sym799_operands[] = { {30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, -1, 0, 0, 0, 0, 0, 0, 0, _sym800_modifier, _sym800_mod_indices, 0, 0,0, -1,-1,0},{50, -1, 0, 0, 0, 0, 0, 0, 0, _sym801_modifier, _sym801_mod_indices, 0, 0,0, -1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 10, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 11, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction win_mmn0_shft_ind
struct adl_operand _sym802_operands_operands[] = { {51, 0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{30, 1, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{127, 2, 0, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{96, 3, 0, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{99, 4, 0, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{120, 5, 0, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{104, 6, 0, 0, 0, 32, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{50, 7, 0, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{105, 8, 0, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{14, 9, 0, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{48, 10, 0, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 11, 0, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym803[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 1, 16, 128, 128,  0xf, { 0x80,0x0,0x0,0x84002000,},0, "", 0, 12, 12, 0, 4, 0, _sym799_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym804[] = { &_sym64, &_sym36, &_sym140, &_sym114, 0, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instructions named 'add'.
static struct adl_opcode _sym805[] = {
  // add    (0)
  { "add", 1, 0, 128, 128,  0xf, { 0 },_sym150, "^ *(\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24|) (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24|) (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24|) ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 3, 0, _sym148_operands_operands,_sym149,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'add_'.
static struct adl_opcode _sym806[] = {
  // add_    (0)
  { "add_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xc000000,},_sym152, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 7, 14, 0, 0, 7, _sym151_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'cmp'.
static struct adl_opcode _sym807[] = {
  // cmp    (0)
  { "cmp", 1, 0, 128, 128,  0xf, { 0 },_sym160, "^ *(\\.immed|\\.reg|) ([^, ,, ]+),([^, ,, ]+),([^, ,, ]+)", 0, 4, 4, 0, 1, 0, _sym158_operands_operands,_sym159,1,1, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'cmp_'.
static struct adl_opcode _sym808[] = {
  // cmp_    (0)
  { "cmp_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x30000000,},_sym162, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 5, 10, 0, 0, 5, _sym161_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy'.
static struct adl_opcode _sym809[] = {
  // copy    (0)
  { "copy", 1, 0, 128, 128,  0xf, { 0 },_sym168, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values|) ([^,    ,,,,,, ]+) ([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+)", 0, 11, 11, 0, 3, 0, _sym166_operands_operands,_sym167,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.ind'.
static struct adl_opcode _sym810[] = {
  // copy_ind    (0)
  { "copy_ind", 1, 0, 128, 128,  0xf, { 0 },_sym175, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values|) ([^,    ,,,,, ]+) ([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+)", 0, 10, 10, 0, 3, 0, _sym173_operands_operands,_sym174,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.thld'.
static struct adl_opcode _sym811[] = {
  // copy_thld    (0)
  { "copy_thld", 1, 0, 128, 128,  0xf, { 0 },_sym181, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) ([^,      ,,,,,,, ]+) ([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+)", 0, 14, 14, 0, 5, 0, _sym179_operands_operands,_sym180,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.thld.ind'.
static struct adl_opcode _sym812[] = {
  // copy_thld_ind    (0)
  { "copy_thld_ind", 1, 0, 128, 128,  0xf, { 0 },_sym186, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values|) ([^,      ,,,,,, ]+) ([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+)", 0, 13, 13, 0, 5, 0, _sym184_operands_operands,_sym185,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy_'.
static struct adl_opcode _sym813[] = {
  // copy_    (0)
  { "copy_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x94000000,},_sym170, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, 15, _sym169_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'dsp'.
static struct adl_opcode _sym814[] = {
  // dsp    (0)
  { "dsp", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb8000000,},_sym188, "^ *([^ ,\t,]+)", 0, 1, 2, 0, 0, 1, _sym187_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // dsp_    (1)
  { "dsp_", 1, 0, 128, 128,  0xf, { 0 },_sym192, "^ *([^, ]+)", 0, 1, 1, 0, 0, 0, _sym190_operands_operands,_sym191,1,0, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'evt'.
static struct adl_opcode _sym815[] = {
  // evt    (0)
  { "evt", 1, 0, 128, 128,  0xf, { 0 },_sym197, "^ *(\\.cpu|\\.ext|\\.int|\\.low|\\.high|) (\\.cpu|\\.ext|\\.int|\\.low|\\.high|) (\\.lsb|\\.bit0|\\.bit1|\\.bit2|\\.bit3|\\.bit4|\\.bit5|\\.bit6|\\.msb|\\.bit7)", 0, 3, 3, 0, 2, 0, _sym195_operands_operands,_sym196,1,2, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'evt_'.
static struct adl_opcode _sym816[] = {
  // evt_    (0)
  { "evt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x24000000,},_sym199, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 3, 6, 0, 0, 3, _sym198_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir'.
static struct adl_opcode _sym817[] = {
  // fir    (0)
  { "fir", 1, 0, 128, 128,  0xf, { 0 },_sym206, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,      ,,,, ]+) ([^,      ,,,, ]+) ([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+)", 0, 11, 11, 0, 4, 0, _sym204_operands_operands,_sym205,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.ind'.
static struct adl_opcode _sym818[] = {
  // fir_ind    (0)
  { "fir_ind", 1, 0, 128, 128,  0xf, { 0 },_sym214, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+)", 0, 10, 10, 0, 4, 0, _sym212_operands_operands,_sym213,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.shift_wr'.
static struct adl_opcode _sym819[] = {
  // fir_shift_wr    (0)
  { "fir_shift_wr", 1, 0, 128, 128,  0xf, { 0 },_sym221, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,       ,,,, ]+) ([^,       ,,,, ]+) ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 4, 0, _sym219_operands_operands,_sym220,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.shift_wr.ind'.
static struct adl_opcode _sym820[] = {
  // fir_shift_wr_ind    (0)
  { "fir_shift_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym227, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,       ,,, ]+) ([^,       ,,, ]+) ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 4, 0, _sym225_operands_operands,_sym226,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir_'.
static struct adl_opcode _sym821[] = {
  // fir_    (0)
  { "fir_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa4000000,},_sym208, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, 15, _sym207_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get'.
static struct adl_opcode _sym822[] = {
  // get    (0)
  { "get", 1, 0, 128, 128,  0xf, { 0 },_sym233, "^ *([^,, ]+),([^,, ]+)", 0, 2, 2, 0, 0, 0, _sym231_operands_operands,_sym232,1,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get.ind'.
static struct adl_opcode _sym823[] = {
  // get_ind    (0)
  { "get_ind", 1, 0, 128, 128,  0xf, { 0 },_sym240, "^ *([^, ]+)", 0, 1, 1, 0, 0, 0, _sym238_operands_operands,_sym239,1,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get_'.
static struct adl_opcode _sym824[] = {
  // get_    (0)
  { "get_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8000000,},_sym235, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 3, 6, 0, 0, 3, _sym234_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'hist'.
static struct adl_opcode _sym825[] = {
  // hist    (0)
  { "hist", 1, 0, 128, 128,  0xf, { 0 },_sym246, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 6, 0, _sym244_operands_operands,_sym245,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'hist.ind'.
static struct adl_opcode _sym826[] = {
  // hist_ind    (0)
  { "hist_ind", 1, 0, 128, 128,  0xf, { 0 },_sym253, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits|) ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 6, 0, _sym251_operands_operands,_sym252,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'hist_'.
static struct adl_opcode _sym827[] = {
  // hist_    (0)
  { "hist_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x90000000,},_sym248, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 13, 26, 0, 0, 13, _sym247_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2'.
static struct adl_opcode _sym828[] = {
  // irdx2    (0)
  { "irdx2", 1, 0, 128, 128,  0xf, { 0 },_sym260, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 6, 0, _sym258_operands_operands,_sym259,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv'.
static struct adl_opcode _sym829[] = {
  // irdx2_adptv    (0)
  { "irdx2_adptv", 1, 0, 128, 128,  0xf, { 0 },_sym269, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,          ,,,, ]+) ([^,          ,,,, ]+) ([^,          ,,,, ]+),([^,          ,,,, ]+),([^,          ,,,, ]+),([^,          ,,,, ]+),([^,          ,,,, ]+)", 0, 15, 15, 0, 8, 0, _sym267_operands_operands,_sym268,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv.ind'.
static struct adl_opcode _sym830[] = {
  // irdx2_adptv_ind    (0)
  { "irdx2_adptv_ind", 1, 0, 128, 128,  0xf, { 0 },_sym275, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,          ,,, ]+) ([^,          ,,, ]+) ([^,          ,,, ]+),([^,          ,,, ]+),([^,          ,,, ]+),([^,          ,,, ]+)", 0, 14, 14, 0, 8, 0, _sym273_operands_operands,_sym274,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv.shift_wr'.
static struct adl_opcode _sym831[] = {
  // irdx2_adptv_shift_wr    (0)
  { "irdx2_adptv_shift_wr", 1, 0, 128, 128,  0xf, { 0 },_sym282, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,        ,,,, ]+) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 6, 0, _sym280_operands_operands,_sym281,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv.shift_wr.ind'.
static struct adl_opcode _sym832[] = {
  // irdx2_adptv_shift_wr_ind    (0)
  { "irdx2_adptv_shift_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym288, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,        ,,, ]+) ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 6, 0, _sym286_operands_operands,_sym287,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.ind'.
static struct adl_opcode _sym833[] = {
  // irdx2_ind    (0)
  { "irdx2_ind", 1, 0, 128, 128,  0xf, { 0 },_sym294, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 6, 0, _sym292_operands_operands,_sym293,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.shift_wr'.
static struct adl_opcode _sym834[] = {
  // irdx2_shift_wr    (0)
  { "irdx2_shift_wr", 1, 0, 128, 128,  0xf, { 0 },_sym301, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,       ,,,, ]+) ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 5, 0, _sym299_operands_operands,_sym300,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.shift_wr.ind'.
static struct adl_opcode _sym835[] = {
  // irdx2_shift_wr_ind    (0)
  { "irdx2_shift_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym307, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,       ,,, ]+) ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 5, 0, _sym305_operands_operands,_sym306,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2_'.
static struct adl_opcode _sym836[] = {
  // irdx2_    (0)
  { "irdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xb0000000,},_sym262, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 18, 36, 0, 0, 18, _sym261_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4'.
static struct adl_opcode _sym837[] = {
  // irdx4_mmn0    (0)
  { "irdx4_mmn0", 1, 0, 128, 128,  0xf, { 0 },_sym327, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym325_operands_operands,_sym326,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // irdx4_mm0    (1)
  { "irdx4_mm0", 1, 0, 128, 128,  0xf, { 0 },_sym313, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym311_operands_operands,_sym312,1,7, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'irdx4.adptv'.
static struct adl_opcode _sym838[] = {
  // irdx4_mmn0_adptv    (0)
  { "irdx4_mmn0_adptv", 1, 0, 128, 128,  0xf, { 0 },_sym336, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,           ,,,,,, ]+)", 0, 18, 18, 0, 9, 0, _sym334_operands_operands,_sym335,1,9, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.adptv.ind'.
static struct adl_opcode _sym839[] = {
  // irdx4_mmn0_adptv_ind    (0)
  { "irdx4_mmn0_adptv_ind", 1, 0, 128, 128,  0xf, { 0 },_sym342, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,           ,,,,, ]+) ([^,           ,,,,, ]+) ([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,           ,,,,, ]+)", 0, 17, 17, 0, 9, 0, _sym340_operands_operands,_sym341,1,9, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.ind'.
static struct adl_opcode _sym840[] = {
  // irdx4_mmn0_ind    (0)
  { "irdx4_mmn0_ind", 1, 0, 128, 128,  0xf, { 0 },_sym348, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym346_operands_operands,_sym347,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // irdx4_mm0_ind    (1)
  { "irdx4_mm0_ind", 1, 0, 128, 128,  0xf, { 0 },_sym320, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym318_operands_operands,_sym319,1,7, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'irdx4.shift'.
static struct adl_opcode _sym841[] = {
  // irdx4_mmn0_shft    (0)
  { "irdx4_mmn0_shft", 1, 0, 128, 128,  0xf, { 0 },_sym355, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym353_operands_operands,_sym354,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.shift.ind'.
static struct adl_opcode _sym842[] = {
  // irdx4_mmn0_shft_ind    (0)
  { "irdx4_mmn0_shft_ind", 1, 0, 128, 128,  0xf, { 0 },_sym361, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym359_operands_operands,_sym360,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.shift_wr'.
static struct adl_opcode _sym843[] = {
  // irdx4_mmn0_shft_wr    (0)
  { "irdx4_mmn0_shft_wr", 1, 0, 128, 128,  0xf, { 0 },_sym368, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,         ,,,,,, ]+)", 0, 16, 16, 0, 7, 0, _sym366_operands_operands,_sym367,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.shift_wr.ind'.
static struct adl_opcode _sym844[] = {
  // irdx4_mmn0_shft_wr_ind    (0)
  { "irdx4_mmn0_shft_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym374, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,         ,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym372_operands_operands,_sym373,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4_mm0_'.
static struct adl_opcode _sym845[] = {
  // irdx4_mm0_    (0)
  { "irdx4_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac000000,},_sym315, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, 15, _sym314_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4_mmn0_'.
static struct adl_opcode _sym846[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xac000000,},_sym329, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 22, 44, 0, 0, 22, _sym328_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jump_'.
static struct adl_opcode _sym847[] = {
  // jump_    (0)
  { "jump_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x34000000,},_sym376, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 4, 8, 0, 0, 4, _sym375_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jumpa'.
static struct adl_opcode _sym848[] = {
  // jump_alw    (0)
  { "jump_alw", 1, 0, 128, 128,  0xf, { 0 },_sym380, "^ *([^, ]+)", 0, 1, 1, 0, 0, 0, _sym378_operands_operands,_sym379,1,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jumpc'.
static struct adl_opcode _sym849[] = {
  // jump_cond    (0)
  { "jump_cond", 1, 0, 128, 128,  0xf, { 0 },_sym385, "^ *(\\.bit0|\\.bit1|\\.bit2|\\.bit3|\\.bit4|\\.bit5|\\.bit6|\\.bit7|\\.bit8|\\.bit9) ([^,   ]+) ([^,   ]+)", 0, 3, 3, 0, 0, 0, _sym383_operands_operands,_sym384,1,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'loop'.
static struct adl_opcode _sym850[] = {
  // loop    (0)
  { "loop", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x14000000,},_sym387, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 3, 6, 0, 0, 3, _sym386_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // loop_    (1)
  { "loop_", 1, 0, 128, 128,  0xf, { 0 },_sym393, "^ *(\\.immed|\\.reg|) ([^,  ]+)", 0, 2, 2, 0, 1, 0, _sym391_operands_operands,_sym392,1,1, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'maxs'.
static struct adl_opcode _sym851[] = {
  // maxs    (0)
  { "maxs", 1, 0, 128, 128,  0xf, { 0 },_sym401, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) ([^,         ,,,, ]+) ([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+)", 0, 14, 14, 0, 8, 0, _sym399_operands_operands,_sym400,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs.gbl'.
static struct adl_opcode _sym852[] = {
  // maxs_gbl    (0)
  { "maxs_gbl", 1, 0, 128, 128,  0xf, { 0 },_sym411, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) ([^,     ,,,, ]+) ([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+)", 0, 10, 10, 0, 4, 0, _sym409_operands_operands,_sym410,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs.gbl.ind'.
static struct adl_opcode _sym853[] = {
  // maxs_gbl_ind    (0)
  { "maxs_gbl_ind", 1, 0, 128, 128,  0xf, { 0 },_sym418, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) ([^,     ,,, ]+) ([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+)", 0, 9, 9, 0, 4, 0, _sym416_operands_operands,_sym417,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs.ind'.
static struct adl_opcode _sym854[] = {
  // maxs_ind    (0)
  { "maxs_ind", 1, 0, 128, 128,  0xf, { 0 },_sym425, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4|) ([^,         ,,, ]+) ([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+)", 0, 13, 13, 0, 8, 0, _sym423_operands_operands,_sym424,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs_'.
static struct adl_opcode _sym855[] = {
  // maxs_    (0)
  { "maxs_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x9c000000,},_sym403, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 17, 34, 0, 0, 17, _sym402_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'next'.
static struct adl_opcode _sym856[] = {
  // next    (0)
  { "next", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x18000000,},_sym427, "^", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'pdma'.
static struct adl_opcode _sym857[] = {
  // pdma    (0)
  { "pdma", 1, 0, 128, 128,  0xf, { 0 },_sym430, "^ *(\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) ([^,       ,,,,, ]+) ([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+)", 0, 13, 13, 0, 6, 0, _sym428_operands_operands,0,0,6, _sym429,0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'pdma.ind'.
static struct adl_opcode _sym858[] = {
  // pdma_ind    (0)
  { "pdma_ind", 1, 0, 128, 128,  0xf, { 0 },_sym435, "^ *(\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.CP4Q|\\.CP4Q_FMTA|\\.CP4Q_FMTB|\\.CP8D_FMTA|\\.CP8D_FMTB|\\.CP8D_FMTC|\\.CP16_FMTA|\\.CP16_FMTB|\\.CP16_FMTC|\\.CP16_FMTD|\\.CP32_FMTB|\\.abs_8_untagged|\\.idx_8_untagged|\\.idx_sum8_untagged|\\.abs_8_tagged|\\.idx_8_tagged|\\.idx_sum8_tagged|\\.abs_16_untagged|\\.idx_16_untagged|\\.idx_sum16_untagged|\\.abs_16_tagged|\\.idx_16_tagged|\\.idx_sum16_tagged|\\.abs_24_untagged|\\.idx_24_untagged|\\.idx_sum24_untagged|\\.abs_24_tagged|\\.idx_24_tagged|\\.idx_sum24_tagged|\\.abs_32_untagged|\\.idx_32_untagged|\\.idx_sum32_untagged|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync|\\.notrace|\\.trace|\\.nocoherent|\\.coherent|) ([^,       ,,,,, ]+) ([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+)", 0, 13, 13, 0, 6, 0, _sym433_operands_operands,0,0,6, _sym434,0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'pdma_'.
static struct adl_opcode _sym859[] = {
  // pdma_    (0)
  { "pdma_", 0, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa0000000,},_sym432, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 12, 24, 0, 0, 12, _sym431_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2'.
static struct adl_opcode _sym860[] = {
  // rdx2    (0)
  { "rdx2", 1, 0, 128, 128,  0xf, { 0 },_sym442, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym440_operands_operands,_sym441,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv'.
static struct adl_opcode _sym861[] = {
  // rdx2_adptv    (0)
  { "rdx2_adptv", 1, 0, 128, 128,  0xf, { 0 },_sym451, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,           ,,,, ]+) ([^,           ,,,, ]+) ([^,           ,,,, ]+),([^,           ,,,, ]+),([^,           ,,,, ]+),([^,           ,,,, ]+),([^,           ,,,, ]+)", 0, 16, 16, 0, 9, 0, _sym449_operands_operands,_sym450,1,9, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv.ind'.
static struct adl_opcode _sym862[] = {
  // rdx2_adptv_ind    (0)
  { "rdx2_adptv_ind", 1, 0, 128, 128,  0xf, { 0 },_sym457, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,           ,,, ]+) ([^,           ,,, ]+) ([^,           ,,, ]+),([^,           ,,, ]+),([^,           ,,, ]+),([^,           ,,, ]+)", 0, 15, 15, 0, 9, 0, _sym455_operands_operands,_sym456,1,9, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv.shift_wr'.
static struct adl_opcode _sym863[] = {
  // rdx2_adptv_shift_wr    (0)
  { "rdx2_adptv_shift_wr", 1, 0, 128, 128,  0xf, { 0 },_sym464, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,         ,,,, ]+) ([^,         ,,,, ]+) ([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym462_operands_operands,_sym463,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv.shift_wr.ind'.
static struct adl_opcode _sym864[] = {
  // rdx2_adptv_shift_wr_ind    (0)
  { "rdx2_adptv_shift_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym470, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,         ,,, ]+) ([^,         ,,, ]+) ([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+)", 0, 13, 13, 0, 7, 0, _sym468_operands_operands,_sym469,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.ind'.
static struct adl_opcode _sym865[] = {
  // rdx2_ind    (0)
  { "rdx2_ind", 1, 0, 128, 128,  0xf, { 0 },_sym476, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 7, 0, _sym474_operands_operands,_sym475,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.shift_wr'.
static struct adl_opcode _sym866[] = {
  // rdx2_shift_wr    (0)
  { "rdx2_shift_wr", 1, 0, 128, 128,  0xf, { 0 },_sym483, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,        ,,,, ]+) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 6, 0, _sym481_operands_operands,_sym482,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.shift_wr.ind'.
static struct adl_opcode _sym867[] = {
  // rdx2_shift_wr_ind    (0)
  { "rdx2_shift_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym489, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,        ,,, ]+) ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 6, 0, _sym487_operands_operands,_sym488,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2_'.
static struct adl_opcode _sym868[] = {
  // rdx2_    (0)
  { "rdx2_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x8c000000,},_sym444, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 19, 38, 0, 0, 19, _sym443_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4'.
static struct adl_opcode _sym869[] = {
  // rdx4_mmn0    (0)
  { "rdx4_mmn0", 1, 0, 128, 128,  0xf, { 0 },_sym509, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym507_operands_operands,_sym508,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // rdx4_mm0    (1)
  { "rdx4_mm0", 1, 0, 128, 128,  0xf, { 0 },_sym495, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym493_operands_operands,_sym494,1,7, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'rdx4.adptv'.
static struct adl_opcode _sym870[] = {
  // rdx4_mmn0_adptv    (0)
  { "rdx4_mmn0_adptv", 1, 0, 128, 128,  0xf, { 0 },_sym518, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,           ,,,,,, ]+)", 0, 18, 18, 0, 9, 0, _sym516_operands_operands,_sym517,1,9, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.ind'.
static struct adl_opcode _sym871[] = {
  // rdx4_mmn0_adptv_ind    (0)
  { "rdx4_mmn0_adptv_ind", 1, 0, 128, 128,  0xf, { 0 },_sym524, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,           ,,,,, ]+) ([^,           ,,,,, ]+) ([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,           ,,,,, ]+)", 0, 17, 17, 0, 9, 0, _sym522_operands_operands,_sym523,1,9, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift'.
static struct adl_opcode _sym872[] = {
  // rdx4_mmn0_adptv_shft    (0)
  { "rdx4_mmn0_adptv_shft", 1, 0, 128, 128,  0xf, { 0 },_sym531, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,         ,,,,,, ]+)", 0, 16, 16, 0, 8, 0, _sym529_operands_operands,_sym530,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift.ind'.
static struct adl_opcode _sym873[] = {
  // rdx4_mmn0_adptv_shft_ind    (0)
  { "rdx4_mmn0_adptv_shft_ind", 1, 0, 128, 128,  0xf, { 0 },_sym537, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) (\\.15down|\\.23down) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,         ,,,,, ]+)", 0, 15, 15, 0, 6, 0, _sym535_operands_operands,_sym536,1,6, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift_wr'.
static struct adl_opcode _sym874[] = {
  // rdx4_mmn0_adptv_shft_wr    (0)
  { "rdx4_mmn0_adptv_shft_wr", 1, 0, 128, 128,  0xf, { 0 },_sym544, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,          ,,,,,, ]+) ([^,          ,,,,,, ]+) ([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,          ,,,,,, ]+)", 0, 17, 17, 0, 8, 0, _sym542_operands_operands,_sym543,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift_wr.ind'.
static struct adl_opcode _sym875[] = {
  // rdx4_mmn0_adptv_shft_wr_ind    (0)
  { "rdx4_mmn0_adptv_shft_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym550, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,          ,,,,, ]+) ([^,          ,,,,, ]+) ([^,          ,,,,, ]+),([^,          ,,,,, ]+),([^,          ,,,,, ]+),([^,          ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,          ,,,,, ]+)", 0, 16, 16, 0, 8, 0, _sym548_operands_operands,_sym549,1,8, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.ind'.
static struct adl_opcode _sym876[] = {
  // rdx4_mmn0_ind    (0)
  { "rdx4_mmn0_ind", 1, 0, 128, 128,  0xf, { 0 },_sym556, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym554_operands_operands,_sym555,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // rdx4_mm0_ind    (1)
  { "rdx4_mm0_ind", 1, 0, 128, 128,  0xf, { 0 },_sym502, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym500_operands_operands,_sym501,1,7, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'rdx4.shift'.
static struct adl_opcode _sym877[] = {
  // rdx4_mmn0_shft    (0)
  { "rdx4_mmn0_shft", 1, 0, 128, 128,  0xf, { 0 },_sym563, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym561_operands_operands,_sym562,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.shift.ind'.
static struct adl_opcode _sym878[] = {
  // rdx4_mmn0_shft_ind    (0)
  { "rdx4_mmn0_shft_ind", 1, 0, 128, 128,  0xf, { 0 },_sym569, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|) (\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|) (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,        ,,,,, ]+)", 0, 14, 14, 0, 5, 0, _sym567_operands_operands,_sym568,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.shift_wr'.
static struct adl_opcode _sym879[] = {
  // rdx4_mmn0_shft_wr    (0)
  { "rdx4_mmn0_shft_wr", 1, 0, 128, 128,  0xf, { 0 },_sym576, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,         ,,,,,, ]+)", 0, 16, 16, 0, 7, 0, _sym574_operands_operands,_sym575,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.shift_wr.ind'.
static struct adl_opcode _sym880[] = {
  // rdx4_mmn0_shft_wr_ind    (0)
  { "rdx4_mmn0_shft_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym582, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,         ,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym580_operands_operands,_sym581,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4_mm0_'.
static struct adl_opcode _sym881[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88000000,},_sym497, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, 15, _sym496_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4_mmn0_'.
static struct adl_opcode _sym882[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x88000000,},_sym511, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 22, 44, 0, 0, 22, _sym510_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'repeat'.
static struct adl_opcode _sym883[] = {
  // repeat    (0)
  { "repeat", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x3c000000,},_sym584, "^ *([^, ,,, ]+) ([^, ,,, ]+),([^, ,,, ]+),([^, ,,, ]+),([^, ,,, ]+)", 0, 5, 5, 0, 0, 0, _sym583_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp'.
static struct adl_opcode _sym884[] = {
  // scp    (0)
  { "scp", 1, 0, 128, 128,  0xf, { 0 },_sym591, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,     ,,,, ]+) ([^,     ,,,, ]+) ([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+)", 0, 10, 10, 0, 3, 0, _sym589_operands_operands,_sym590,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp.ind'.
static struct adl_opcode _sym885[] = {
  // scp_ind    (0)
  { "scp_ind", 1, 0, 128, 128,  0xf, { 0 },_sym599, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|) ([^,     ,,, ]+) ([^,     ,,, ]+) ([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+)", 0, 9, 9, 0, 3, 0, _sym597_operands_operands,_sym598,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp.shift_wr'.
static struct adl_opcode _sym886[] = {
  // scp_shft_wr    (0)
  { "scp_shft_wr", 1, 0, 128, 128,  0xf, { 0 },_sym606, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,      ,,,, ]+) ([^,      ,,,, ]+) ([^,      ,,,, ]+) ([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+)", 0, 11, 11, 0, 4, 0, _sym604_operands_operands,_sym605,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp.shift_wr.ind'.
static struct adl_opcode _sym887[] = {
  // scp_shft_wr_ind    (0)
  { "scp_shft_wr_ind", 1, 0, 128, 128,  0xf, { 0 },_sym612, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+)", 0, 10, 10, 0, 4, 0, _sym610_operands_operands,_sym611,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp_'.
static struct adl_opcode _sym888[] = {
  // scp_    (0)
  { "scp_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0xa8000000,},_sym593, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 14, 28, 0, 0, 14, _sym592_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sel'.
static struct adl_opcode _sym889[] = {
  // sel    (0)
  { "sel", 1, 0, 128, 128,  0xf, { 0 },_sym620, "^ *(\\.im|\\.re) ([^,   ,, ]+) ([^,   ,, ]+) ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 1, 0, _sym618_operands_operands,_sym619,1,1, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sel_'.
static struct adl_opcode _sym890[] = {
  // sel_    (0)
  { "sel_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x38000000,},_sym622, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 6, 12, 0, 0, 6, _sym621_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set'.
static struct adl_opcode _sym891[] = {
  // set    (0)
  { "set", 1, 0, 128, 128,  0xf, { 0 },_sym629, "^ *(\\.immed|\\.reg|) ([^, , ]+),([^, , ]+)", 0, 3, 3, 0, 1, 0, _sym627_operands_operands,_sym628,1,1, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.ind'.
static struct adl_opcode _sym892[] = {
  // set_ind    (0)
  { "set_ind", 1, 0, 128, 128,  0xf, { 0 },_sym636, "^ *([^, ]+)", 0, 1, 1, 0, 0, 0, _sym634_operands_operands,_sym635,1,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set_'.
static struct adl_opcode _sym893[] = {
  // set_    (0)
  { "set_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x4000000,},_sym631, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 5, 10, 0, 0, 5, _sym630_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sort'.
static struct adl_opcode _sym894[] = {
  // sort    (0)
  { "sort", 1, 0, 128, 128,  0xf, { 0 },_sym642, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) ([^,     ,,, ]+) ([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+)", 0, 9, 9, 0, 4, 0, _sym640_operands_operands,_sym641,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sort.ind'.
static struct adl_opcode _sym895[] = {
  // sort_ind    (0)
  { "sort_ind", 1, 0, 128, 128,  0xf, { 0 },_sym649, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) ([^,     ,, ]+) ([^,     ,, ]+),([^,     ,, ]+),([^,     ,, ]+)", 0, 8, 8, 0, 4, 0, _sym647_operands_operands,_sym648,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sort.slide'.
static struct adl_opcode _sym896[] = {
  // sort_slide    (0)
  { "sort_slide", 1, 0, 128, 128,  0xf, { 0 },_sym655, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+)", 0, 10, 10, 0, 5, 0, _sym653_operands_operands,_sym654,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sort.slide.ind'.
static struct adl_opcode _sym897[] = {
  // sort_slide_ind    (0)
  { "sort_slide_ind", 1, 0, 128, 128,  0xf, { 0 },_sym660, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.ss4|\\.ss8|\\.ss16|\\.in_24real|\\.in_24im|\\.in_48packed|) ([^,      ,, ]+) ([^,      ,, ]+) ([^,      ,, ]+),([^,      ,, ]+),([^,      ,, ]+)", 0, 9, 9, 0, 5, 0, _sym658_operands_operands,_sym659,1,5, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sort_'.
static struct adl_opcode _sym898[] = {
  // sort_    (0)
  { "sort_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x74000000,},_sym644, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 12, 24, 0, 0, 12, _sym643_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'stop'.
static struct adl_opcode _sym899[] = {
  // stop    (0)
  { "stop", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x10000000,},_sym662, "^", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'sub'.
static struct adl_opcode _sym900[] = {
  // sub    (0)
  { "sub", 1, 0, 128, 128,  0xf, { 0 },_sym670, "^ *(\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24|) (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24|) (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24|) ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 3, 0, _sym668_operands_operands,_sym669,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sub_'.
static struct adl_opcode _sym901[] = {
  // sub_    (0)
  { "sub_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x2c000000,},_sym672, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 7, 14, 0, 0, 7, _sym671_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sync'.
static struct adl_opcode _sym902[] = {
  // sync    (0)
  { "sync", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x1c000000,},_sym674, "^ *([^ ,\t,]+),([^ ,\t,]+)", 0, 2, 4, 0, 0, 2, _sym673_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // sync__    (1)
  { "sync__", 1, 0, 128, 128,  0xf, { 0 },_sym682, "^ *(\\.pdma|\\.thread|\\.dsp) ([^,  ]+)", 0, 2, 2, 0, 1, 0, _sym680_operands_operands,_sym681,1,1, 0,0,0,0,{}, 0,0,0,0,0,1, },
  // sync_    (2)
  { "sync_", 1, 0, 128, 128,  0xf, { 0 },_sym678, "^", 0, 0, 0, 0, 0, 0, 0,_sym677,1,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'sync.dsp'.
static struct adl_opcode _sym903[] = {
  // sync_dsp    (0)
  { "sync_dsp", 1, 0, 128, 128,  0xf, { 0 },_sym686, "^", 0, 0, 0, 0, 0, 0, 0,_sym685,1,0, 0,0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'thread'.
static struct adl_opcode _sym904[] = {
  // thread    (0)
  { "thread", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x40000000,},_sym688, "^ *([^, ]+)", 0, 1, 1, 0, 0, 0, _sym687_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt'.
static struct adl_opcode _sym905[] = {
  // vmt    (0)
  { "vmt", 1, 0, 128, 128,  0xf, { 0 },_sym695, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym693_operands_operands,_sym694,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.imm_off_sq2s2'.
static struct adl_opcode _sym906[] = {
  // vmt_imm_off_sq2s2    (0)
  { "vmt_imm_off_sq2s2", 1, 0, 128, 128,  0xf, { 0 },_sym704, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, 0, _sym702_operands_operands,_sym703,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.imm_off_sq2s2.ind'.
static struct adl_opcode _sym907[] = {
  // vmt_imm_off_sq2s2_ind    (0)
  { "vmt_imm_off_sq2s2_ind", 1, 0, 128, 128,  0xf, { 0 },_sym710, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym708_operands_operands,_sym709,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.ind'.
static struct adl_opcode _sym908[] = {
  // vmt_ind    (0)
  { "vmt_ind", 1, 0, 128, 128,  0xf, { 0 },_sym716, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 7, 0, _sym714_operands_operands,_sym715,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.shift_sq2s2'.
static struct adl_opcode _sym909[] = {
  // vmt_shift_sq2s2    (0)
  { "vmt_shift_sq2s2", 1, 0, 128, 128,  0xf, { 0 },_sym723, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym721_operands_operands,_sym722,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.shift_sq2s2.ind'.
static struct adl_opcode _sym910[] = {
  // vmt_shift_sq2s2_ind    (0)
  { "vmt_shift_sq2s2_ind", 1, 0, 128, 128,  0xf, { 0 },_sym729, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym727_operands_operands,_sym728,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.vec_sq2s2'.
static struct adl_opcode _sym911[] = {
  // vmt_vec_sq2s2    (0)
  { "vmt_vec_sq2s2", 1, 0, 128, 128,  0xf, { 0 },_sym736, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym734_operands_operands,_sym735,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.vec_sq2s2.ind'.
static struct adl_opcode _sym912[] = {
  // vmt_vec_sq2s2_ind    (0)
  { "vmt_vec_sq2s2_ind", 1, 0, 128, 128,  0xf, { 0 },_sym742, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym740_operands_operands,_sym741,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.wr_off_sq2s2'.
static struct adl_opcode _sym913[] = {
  // vmt_wr_off_sq2s2    (0)
  { "vmt_wr_off_sq2s2", 1, 0, 128, 128,  0xf, { 0 },_sym749, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, 0, _sym747_operands_operands,_sym748,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.wr_off_sq2s2.ind'.
static struct adl_opcode _sym914[] = {
  // vmt_wr_off_sq2s2_ind    (0)
  { "vmt_wr_off_sq2s2_ind", 1, 0, 128, 128,  0xf, { 0 },_sym755, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3|) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, 0, _sym753_operands_operands,_sym754,1,7, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt_'.
static struct adl_opcode _sym915[] = {
  // vmt_    (0)
  { "vmt_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x98000000,},_sym697, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 17, 34, 0, 0, 17, _sym696_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'wait'.
static struct adl_opcode _sym916[] = {
  // wait    (0)
  { "wait", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x20000000,},_sym757, "^ *(\\.cpu|\\.ext|\\.int) ([^,  ]+)", 0, 2, 2, 0, 1, 0, _sym756_operands_operands,0,0,1, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'watchdog'.
static struct adl_opcode _sym917[] = {
  // watchdog    (0)
  { "watchdog", 1, 0, 128, 128,  0xf, { 0 },_sym761, "^ *(\\.l0|\\.l1|\\.pos|\\.neg|) (\\.start|\\.stop|\\.reset|\\.event) (\\.ev0|\\.ev1|\\.ev2|\\.ev3|\\.rcs|\\.rfs) ([^,    ]+)", 0, 4, 4, 0, 1, 0, _sym759_operands_operands,_sym760,1,1, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'watchdog_'.
static struct adl_opcode _sym918[] = {
  // watchdog_    (0)
  { "watchdog_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x28000000,},_sym763, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 4, 8, 0, 0, 4, _sym762_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win'.
static struct adl_opcode _sym919[] = {
  // win_mmn0    (0)
  { "win_mmn0", 1, 0, 128, 128,  0xf, { 0 },_sym783, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,     ,,,,,, ]+) ([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,     ,,,,,, ]+)", 0, 12, 12, 0, 3, 0, _sym781_operands_operands,_sym782,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // win_mm0    (1)
  { "win_mm0", 1, 0, 128, 128,  0xf, { 0 },_sym769, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,    ,,,,, ]+) ([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+)", 0, 10, 10, 0, 2, 0, _sym767_operands_operands,_sym768,1,2, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'win.ind'.
static struct adl_opcode _sym920[] = {
  // win_mmn0_ind    (0)
  { "win_mmn0_ind", 1, 0, 128, 128,  0xf, { 0 },_sym791, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,     ,,,,, ]+) ([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,     ,,,,, ]+)", 0, 11, 11, 0, 3, 0, _sym789_operands_operands,_sym790,1,3, 0,0,0,0,{}, 0,0,0,0,0,0, },
  // win_mm0_ind    (1)
  { "win_mm0_ind", 1, 0, 128, 128,  0xf, { 0 },_sym776, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|) (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,    ,,,, ]+) ([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+)", 0, 9, 9, 0, 2, 0, _sym774_operands_operands,_sym775,1,2, 0,0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'win.shift_wr'.
static struct adl_opcode _sym921[] = {
  // win_mmn0_shft    (0)
  { "win_mmn0_shft", 1, 0, 128, 128,  0xf, { 0 },_sym798, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,      ,,,,,, ]+) ([^,      ,,,,,, ]+) ([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,      ,,,,,, ]+)", 0, 13, 13, 0, 4, 0, _sym796_operands_operands,_sym797,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win.shift_wr.ind'.
static struct adl_opcode _sym922[] = {
  // win_mmn0_shft_ind    (0)
  { "win_mmn0_shft_ind", 1, 0, 128, 128,  0xf, { 0 },_sym804, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47|) ([^,      ,,,,, ]+) ([^,      ,,,,, ]+) ([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512|),([^,      ,,,,, ]+)", 0, 12, 12, 0, 4, 0, _sym802_operands_operands,_sym803,1,4, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win_mm0_'.
static struct adl_opcode _sym923[] = {
  // win_mm0_    (0)
  { "win_mm0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x84000000,},_sym771, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 11, 22, 0, 0, 11, _sym770_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win_mmn0_'.
static struct adl_opcode _sym924[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 1, 16, 128, 128,  0xf, { 0x0,0x0,0x0,0x84000000,},_sym785, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 16, 32, 0, 0, 16, _sym784_operands_operands,0,0,0, 0,0,0,0,{}, 0,0,0,0,0,0, },
};

// Instruction table.
static struct adl_instr other_instructions [] = {
  { "add", 1, _sym805 },
  { "add_", 1, _sym806 },
  { "cmp", 1, _sym807 },
  { "cmp_", 1, _sym808 },
  { "copy", 1, _sym809 },
  { "copy.ind", 1, _sym810 },
  { "copy.thld", 1, _sym811 },
  { "copy.thld.ind", 1, _sym812 },
  { "copy_", 1, _sym813 },
  { "dsp", 2, _sym814 },
  { "evt", 1, _sym815 },
  { "evt_", 1, _sym816 },
  { "fir", 1, _sym817 },
  { "fir.ind", 1, _sym818 },
  { "fir.shift_wr", 1, _sym819 },
  { "fir.shift_wr.ind", 1, _sym820 },
  { "fir_", 1, _sym821 },
  { "get", 1, _sym822 },
  { "get.ind", 1, _sym823 },
  { "get_", 1, _sym824 },
  { "hist", 1, _sym825 },
  { "hist.ind", 1, _sym826 },
  { "hist_", 1, _sym827 },
  { "irdx2", 1, _sym828 },
  { "irdx2.adptv", 1, _sym829 },
  { "irdx2.adptv.ind", 1, _sym830 },
  { "irdx2.adptv.shift_wr", 1, _sym831 },
  { "irdx2.adptv.shift_wr.ind", 1, _sym832 },
  { "irdx2.ind", 1, _sym833 },
  { "irdx2.shift_wr", 1, _sym834 },
  { "irdx2.shift_wr.ind", 1, _sym835 },
  { "irdx2_", 1, _sym836 },
  { "irdx4", 2, _sym837 },
  { "irdx4.adptv", 1, _sym838 },
  { "irdx4.adptv.ind", 1, _sym839 },
  { "irdx4.ind", 2, _sym840 },
  { "irdx4.shift", 1, _sym841 },
  { "irdx4.shift.ind", 1, _sym842 },
  { "irdx4.shift_wr", 1, _sym843 },
  { "irdx4.shift_wr.ind", 1, _sym844 },
  { "irdx4_mm0_", 1, _sym845 },
  { "irdx4_mmn0_", 1, _sym846 },
  { "jump_", 1, _sym847 },
  { "jumpa", 1, _sym848 },
  { "jumpc", 1, _sym849 },
  { "loop", 2, _sym850 },
  { "maxs", 1, _sym851 },
  { "maxs.gbl", 1, _sym852 },
  { "maxs.gbl.ind", 1, _sym853 },
  { "maxs.ind", 1, _sym854 },
  { "maxs_", 1, _sym855 },
  { "next", 1, _sym856 },
  { "pdma", 1, _sym857 },
  { "pdma.ind", 1, _sym858 },
  { "pdma_", 1, _sym859 },
  { "rdx2", 1, _sym860 },
  { "rdx2.adptv", 1, _sym861 },
  { "rdx2.adptv.ind", 1, _sym862 },
  { "rdx2.adptv.shift_wr", 1, _sym863 },
  { "rdx2.adptv.shift_wr.ind", 1, _sym864 },
  { "rdx2.ind", 1, _sym865 },
  { "rdx2.shift_wr", 1, _sym866 },
  { "rdx2.shift_wr.ind", 1, _sym867 },
  { "rdx2_", 1, _sym868 },
  { "rdx4", 2, _sym869 },
  { "rdx4.adptv", 1, _sym870 },
  { "rdx4.adptv.ind", 1, _sym871 },
  { "rdx4.adptv.shift", 1, _sym872 },
  { "rdx4.adptv.shift.ind", 1, _sym873 },
  { "rdx4.adptv.shift_wr", 1, _sym874 },
  { "rdx4.adptv.shift_wr.ind", 1, _sym875 },
  { "rdx4.ind", 2, _sym876 },
  { "rdx4.shift", 1, _sym877 },
  { "rdx4.shift.ind", 1, _sym878 },
  { "rdx4.shift_wr", 1, _sym879 },
  { "rdx4.shift_wr.ind", 1, _sym880 },
  { "rdx4_mm0_", 1, _sym881 },
  { "rdx4_mmn0_", 1, _sym882 },
  { "repeat", 1, _sym883 },
  { "scp", 1, _sym884 },
  { "scp.ind", 1, _sym885 },
  { "scp.shift_wr", 1, _sym886 },
  { "scp.shift_wr.ind", 1, _sym887 },
  { "scp_", 1, _sym888 },
  { "sel", 1, _sym889 },
  { "sel_", 1, _sym890 },
  { "set", 1, _sym891 },
  { "set.ind", 1, _sym892 },
  { "set_", 1, _sym893 },
  { "sort", 1, _sym894 },
  { "sort.ind", 1, _sym895 },
  { "sort.slide", 1, _sym896 },
  { "sort.slide.ind", 1, _sym897 },
  { "sort_", 1, _sym898 },
  { "stop", 1, _sym899 },
  { "sub", 1, _sym900 },
  { "sub_", 1, _sym901 },
  { "sync", 3, _sym902 },
  { "sync.dsp", 1, _sym903 },
  { "thread", 1, _sym904 },
  { "vmt", 1, _sym905 },
  { "vmt.imm_off_sq2s2", 1, _sym906 },
  { "vmt.imm_off_sq2s2.ind", 1, _sym907 },
  { "vmt.ind", 1, _sym908 },
  { "vmt.shift_sq2s2", 1, _sym909 },
  { "vmt.shift_sq2s2.ind", 1, _sym910 },
  { "vmt.vec_sq2s2", 1, _sym911 },
  { "vmt.vec_sq2s2.ind", 1, _sym912 },
  { "vmt.wr_off_sq2s2", 1, _sym913 },
  { "vmt.wr_off_sq2s2.ind", 1, _sym914 },
  { "vmt_", 1, _sym915 },
  { "wait", 1, _sym916 },
  { "watchdog", 1, _sym917 },
  { "watchdog_", 1, _sym918 },
  { "win", 2, _sym919 },
  { "win.ind", 2, _sym920 },
  { "win.shift_wr", 1, _sym921 },
  { "win.shift_wr.ind", 1, _sym922 },
  { "win_mm0_", 1, _sym923 },
  { "win_mmn0_", 1, _sym924 },
};

static const int num_other_instructions = 120;

static const struct adl_name_pair ppc_regnames[] = {
  {"r0",0},
  {"r1",1},
  {"r2",2},
  {"r3",3},
  {"r4",4},
  {"r5",5},
  {"r6",6},
  {"r7",7},
  {"r8",8},
  {"r9",9},
  {"r10",10},
  {"r11",11},
  {"r12",12},
  {"r13",13},
  {"r14",14},
  {"r15",15},
  {"r16",16},
  {"r17",17},
  {"r18",18},
  {"r19",19},
  {"r20",20},
  {"r21",21},
  {"r22",22},
  {"r23",23},
  {"r24",24},
  {"r25",25},
  {"r26",26},
  {"r27",27},
  {"r28",28},
  {"r29",29},
  {"r30",30},
  {"r31",31},
  {"r32",32},
  {"r33",33},
  {"r34",34},
  {"r35",35},
  {"r36",36},
  {"r37",37},
  {"r38",38},
  {"r39",39},
};

static const int num_ppc_regnames = 40;

static const char *ppc_itnames[] = {
  "default",
};


static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(258,0,0,0,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_AARCH64_ABS32",0,0x0,0x0,0), // relocation R_AARCH64_ABS32 (R_AARCH64_ABS32)
  HOWTO(5,0,2,32,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_ADDR32",0,0x0,0xffffffff,0), // relocation R_ADDR32 (R_ADDR32)
  HOWTO(2,0,0,0,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_ARM_ABS32",0,0x0,0x0,0), // relocation R_ARM_ABS32 (R_ARM_ABS32)
  HOWTO(4,0,2,32,1,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_REL32",0,0x0,0xffffffff,1), // relocation R_REL32 (R_REL32)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos ATTRIBUTE_UNUSED = 5;
extern "C" int adl_size_lookup(unsigned size)
{
  switch (size) {
    case 1:
    return BFD_RELOC_8;
    break;
    case 2:
    return BFD_RELOC_16;
    break;
    case 3:
    return BFD_RELOC_24;
    break;
    case 4:
    return BFD_RELOC_32;
    break;
    case 8:
    return BFD_RELOC_64;
    break;
    default:
    return -1;
  }
}


// Relocations ordered by name, for fast name -> type searches.
static struct adl_reloc_name ppc_relocs_by_index [] = {
   { "R_AARCH64_ABS32", 0, -1, false }, // R_AARCH64_ABS32
   { "R_ADDR32", 1, 110, false }, // R_ADDR32
   { "R_ARM_ABS32", 2, -1, false }, // R_ARM_ABS32
   { "R_REL32", 3, 37, false }, // R_REL32
};

static const int num_ppc_relocs_by_index = 4;


// Relocation offsets.
static struct adl_int_pair ppc_reloc_offsets [] = {
   { 258,-1 }, // R_AARCH64_ABS32
   { 5,-1 }, // R_ADDR32
   { 2,-1 }, // R_ARM_ABS32
   { 4,-1 }, // R_REL32
};

static const int num_ppc_reloc_offsets = 4;

static const char *instr_names[] = {
  "add",
  "add_",
  "cmp",
  "cmp_",
  "copy",
  "copy.ind",
  "copy.thld",
  "copy.thld.ind",
  "copy_",
  "dsp",
  "evt",
  "evt_",
  "fir",
  "fir.ind",
  "fir.shift_wr",
  "fir.shift_wr.ind",
  "fir_",
  "get",
  "get.ind",
  "get_",
  "hist",
  "hist.ind",
  "hist_",
  "irdx2",
  "irdx2.adptv",
  "irdx2.adptv.ind",
  "irdx2.adptv.shift_wr",
  "irdx2.adptv.shift_wr.ind",
  "irdx2.ind",
  "irdx2.shift_wr",
  "irdx2.shift_wr.ind",
  "irdx2_",
  "irdx4",
  "irdx4.adptv",
  "irdx4.adptv.ind",
  "irdx4.ind",
  "irdx4.shift",
  "irdx4.shift.ind",
  "irdx4.shift_wr",
  "irdx4.shift_wr.ind",
  "irdx4_mm0_",
  "irdx4_mmn0_",
  "jump_",
  "jumpa",
  "jumpc",
  "loop",
  "maxs",
  "maxs.gbl",
  "maxs.gbl.ind",
  "maxs.ind",
  "maxs_",
  "next",
  "pdma",
  "pdma.ind",
  "pdma_",
  "rdx2",
  "rdx2.adptv",
  "rdx2.adptv.ind",
  "rdx2.adptv.shift_wr",
  "rdx2.adptv.shift_wr.ind",
  "rdx2.ind",
  "rdx2.shift_wr",
  "rdx2.shift_wr.ind",
  "rdx2_",
  "rdx4",
  "rdx4.adptv",
  "rdx4.adptv.ind",
  "rdx4.adptv.shift",
  "rdx4.adptv.shift.ind",
  "rdx4.adptv.shift_wr",
  "rdx4.adptv.shift_wr.ind",
  "rdx4.ind",
  "rdx4.shift",
  "rdx4.shift.ind",
  "rdx4.shift_wr",
  "rdx4.shift_wr.ind",
  "rdx4_mm0_",
  "rdx4_mmn0_",
  "repeat",
  "scp",
  "scp.ind",
  "scp.shift_wr",
  "scp.shift_wr.ind",
  "scp_",
  "sel",
  "sel_",
  "set",
  "set.ind",
  "set_",
  "sort",
  "sort.ind",
  "sort.slide",
  "sort.slide.ind",
  "sort_",
  "stop",
  "sub",
  "sub_",
  "sync",
  "sync.dsp",
  "thread",
  "vmt",
  "vmt.imm_off_sq2s2",
  "vmt.imm_off_sq2s2.ind",
  "vmt.ind",
  "vmt.shift_sq2s2",
  "vmt.shift_sq2s2.ind",
  "vmt.vec_sq2s2",
  "vmt.vec_sq2s2.ind",
  "vmt.wr_off_sq2s2",
  "vmt.wr_off_sq2s2.ind",
  "vmt_",
  "wait",
  "watchdog",
  "watchdog_",
  "win",
  "win.ind",
  "win.shift_wr",
  "win.shift_wr.ind",
  "win_mm0_",
  "win_mmn0_",
};

static int num_instr_names = 120;

static const char *instr_pfx_fields[] ATTRIBUTE_UNUSED = {
   0 };

static int num_instr_pfx_fields ATTRIBUTE_UNUSED = 0;

//
// Helper code.
//

 int evt_type ( int et ) {
      if ( et != 1 && et != 3 ) { std::ostringstream ss; ss    <<  "illegal event type "  <<  et ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return et ;
}

 unsigned long long get_imm_dat ( unsigned isreg , unsigned long long x ) {
      return isreg ? 0 : x ;
}

 unsigned get_loop_immed ( unsigned mode , unsigned val ) {
      if ( mode == 0 ) return val ; else return 0 ;
}

 unsigned get_loop_wr ( unsigned mode , unsigned val ) {
      if ( mode == 0 ) return 0 ; else if ( val < 48 ) return val ; else { std::ostringstream ss; ss    <<  "illegal work register %d"  <<  val ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return 0 ;
}

 unsigned get_maxsN ( unsigned x ) {
      if ( ! x ) return 0 ; else return x - 1 ;
}

 unsigned get_mode ( unsigned x ) {
      return x >> 14 ;
}

 unsigned get_wr ( unsigned notzero , unsigned x ) {
      return ( ! notzero ) ? 0 : x ;
}

 unsigned is_addr_oram ( unsigned x ) {
       unsigned wr = x ;
      if ( get_mode ( x ) < 2 ) { std::ostringstream ss; ss    <<  "illegal Operand RAM 0x"  <<  hex  <<  wr ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}

 unsigned is_addr_oram_tram ( unsigned x ) {
       unsigned md = get_mode ( x ) ;
      if ( md == 0 ) { std::ostringstream ss; ss    <<  "illegal Operand RAM 0x"  <<  hex  <<  x ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}

 unsigned is_addr_tram_wr ( unsigned x ) {
       unsigned md = get_mode ( x ) ;
      if ( md != 0 && md != 1 ) { std::ostringstream ss; ss    <<  "illegal Twiddle RAM or register 0x"  <<  hex  <<  x ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}

 unsigned is_addr_wr ( unsigned x ) {
       unsigned wr = x ;
      if ( wr > 47 ) { std::ostringstream ss; ss    <<  "illegal register 0x"  <<  hex  <<  wr ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}

 unsigned is_addr_wr_spr ( unsigned x ) {
       unsigned wr = x ;
      if ( 47 < wr && wr < 0x1000 || 0x1010 <= wr ) { std::ostringstream ss; ss    <<  "illegal register 0x"  <<  hex  <<  wr ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}

 unsigned is_maxsN ( unsigned x ) {
      return x != 0 ;
}

 unsigned is_not_register ( unsigned x ) {
       unsigned wr = x ;
      if ( wr <= 47 ) { std::ostringstream ss; ss    <<  "illegal register 0x"  <<  hex  <<  wr ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}

 unsigned validate_addr ( unsigned x , int isdest ) {
       unsigned wr ;
      switch ( get_mode ( x ) ) {
            case 0x0 : wr = x & 0x003F ;
            if ( ( x & 0x1000 ) == 0 ) {
                  if ( 0 <= wr && wr <= 47 && ( x & 0x0FC0 ) == 0 ) return x ;
              } else {
                  if ( 0 <= wr && ( isdest && wr < 12 || ! isdest && wr < 16 ) && ( x & 0x0FC0 ) == 0 ) return x ;
              }
            break ;
            case 0x1 : if ( ( x & 0x3000 ) == 0 ) return x ;
            break ;
            case 0x2 : case 0x3 : return x ;
            break ;
        }
      { std::ostringstream ss; ss    <<  "illegal address 0x"  <<  hex  <<  x ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
      return x ;
}


static struct adl_asm_instr asm_instrs[] ATTRIBUTE_UNUSED = {
   {"",0 } 
};
static int num_asm_instrs ATTRIBUTE_UNUSED = 0;
static int internal_current_table = 0;
static bool show_warnings = false;
static struct hash_control *instr_hash[1];

static struct hash_control *reg_hash;

static struct hash_control *asm_instr_hash;

static struct hash_control *instr_pfx_fields_hash;

static const char *terminating_chars     = "\t .";

static const char *min_terminating_chars = "\t ";

static bool setup_endianness()
{
  adl_setup_endianness(false); return true;
}

static bool setup_endianness_var ATTRIBUTE_UNUSED = setup_endianness();

void md_begin()
{
  adl_setup_general(min_terminating_chars,terminating_chars,0,0,0,0,0,init_queue_size, init_queue_offset, show_warnings, false,16);
  adl_setup_comments(init_comment_strs, init_num_comment_strs, init_line_comment_strs, init_num_line_comment_strs);
  adl_setup_instrfields(ppc_operands, num_ppc_operands,ppc_operands_by_index, num_ppc_operands_by_index);
  adl_setup_grouping(packet_begin_chars, packet_end_chars);
  adl_setup_prefix(pfx_queue, 0,0,0,reset_prefix_counters);
  adl_setup_relocations(ppc_elf_howto_table,num_ppc_elf_howtos,ppc_relocs_by_index,num_ppc_relocs_by_index,ppc_reloc_offsets,num_ppc_reloc_offsets);
  instr_hash[0] = adl_setup_instructions(other_instructions,num_other_instructions,ppc_operands);
  reg_hash = adl_setup_name_hash(ppc_regnames,num_ppc_regnames,"register");
  asm_instr_hash = 0;
  instr_pfx_fields_hash = 0;
  adl_setup_finish();
}

std::string adl_asm_version = "2017.10.30";

extern "C" void md_assemble(char *str)
{
  adl_assemble(str,instr_hash[internal_current_table],asm_instr_hash,reg_hash,instr_pfx_fields_hash,22,internal_current_table,ppc_itnames[internal_current_table]);
}

extern "C" void md_apply_fix (fixS *fixP ,valueT *valP ,segT seg)
{
  if (!acb_apply_fix(fixP,valP,seg)) {
    adl_apply_fix(fixP,valP,seg);
  }
}

int adl_parse_option(int,char*);

extern "C" int md_parse_option (int c,char *arg)
{
  if (c == 'd') {
    show_warnings = TRUE;
    return 1;
  } else if (c == 'm') {
    if (!strcmp(arg,"default")) {
      internal_current_table = 0;
      return 1;
    }
  }
  return adl_parse_option(c,arg);
}

void adl_show_usage(FILE*);

extern "C" void md_show_usage (FILE *stream ATTRIBUTE_UNUSED)
{
  fprintf (stream,
  "\nInstruction-selection options:\n\n"
  "-mdefault		Select the default instruction table.\n"
  "-d			Show debugging warnings about undefined symbols.\n"
  );
  adl_show_usage(stream);
}

extern "C" void adl_get_instr_names(const char ***names, int *num_names)
{
  *names = instr_names;
  *num_names = num_instr_names;
};

extern "C" void adl_get_instr_ops(const struct adl_name_pair **names, int* num_names)
{
  *names = ppc_regnames;
  *num_names = num_ppc_regnames;
}

extern "C" bfd_boolean  dt_debug(void);

extern "C" bfd_boolean  dt_debug(void)
{
  #ifdef _DEVTECH_DEBUG_
  return TRUE;
  #else
  return FALSE;
  #endif
}

