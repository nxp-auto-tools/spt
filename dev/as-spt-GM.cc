/*
	
	Assembler code implementation file for ppc generated by ADL.
	
	*/

#ifndef _MSC_VER
extern "C" {
  #  include "as.h"
}
#endif

#include <stdio.h>
#include <sstream>
#include <string>

extern "C" {
  #  include "as.h"
  #  include "bfd/elf-bfd.h"
  #  include "bfd/bfd.h"
  #  include "bfd/libbfd.h"
}

#define __NO_RNUMBER__

#include "adl-asm-impl.h"
#include "adl-asm-info.h"

#include "helpers/Macros.h"
#include "helpers/le_sintbv.h"
#define bits le_intbv
#define sbits le_sintbv

#define ns_bits le_intbv
#define ns_sbits le_sintbv

#include "helpers/LogUsage.h"
#include "helpers/TypeConv.h"
extern "C" {
  #include "tc-ppc.h"
}

using namespace adl;



/* Figure out the BFD architecture to use.  These functions 
   are called well before md_begin, when the output file is opened.  */ 

enum bfd_architecture ppc_arch () 
{
  return ADL_TARGET_ARCH;
}

const char adl_parallel_separator_chars[] = "";
const char adl_symbol_chars[] = "";
const char comment_chars[] = "#";
const char line_comment_chars[] = "#";
const char line_separator_chars[] = "";
const char packet_begin_chars[] = "";
const char packet_end_chars[] = "";
static const char *init_comment_strs[] = { 0 };
static int init_num_comment_strs = 0;
static const char *init_line_comment_strs[] = { 0 };
static int init_num_line_comment_strs = 0;
static int init_queue_size = 1;
unsigned long ppc_mach ()
{
  return default_adl_mach();
}

extern char*
ppc_target_format ()
{
  return default_adl_target_format();
}



// Prefix variables.
struct adl_prefix_field *pfx_fields0[] = { 0 };
struct adl_prefix_fields pfx_queue[] = {{pfx_fields0},};
// Prefix counters.

static void reset_prefix_counters()
{
}

 unsigned get_bank ( unsigned x );
 unsigned get_col ( unsigned isreg , unsigned x );
 unsigned long long get_imm_dat ( unsigned isreg , unsigned long long x );
 unsigned get_mode ( unsigned x );
 unsigned get_slice ( unsigned x );
//
// Instruction field inserter functions.
//

static  void set_adptv_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 18);
}

static  void set_adptv_offset_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7) << 25);
}

static  void set_adptv_shft_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 17);
}

static  void set_adptv_wrnum_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3f) << 10);
}

static  void set_blk_dest_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7f) << 16);
}

static  void set_blk_src_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xff) << 24);
}

static  void set_cc_im_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xffff) << 16);
}

static  void set_cc_re_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff) << 16);
}

static  void set_cp_type_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 16);
}

static  void set_data_packing_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 18);
}

static  void set_dest_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 12);
}

static  void set_dest_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x1ff) << 3);
}

static  void set_dest_add_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xff));
}

static  void set_dest_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 14);
}

static  void set_dest_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7));
}

static  void set_dest_add_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7ff) << 3);
}

static  void set_ev_lvl_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_ev_tr_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_evt_ev_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_fft16_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 24);
}

static  void set_fft_rnd_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 20);
}

static  void set_fft_rnd2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 20);
}

static  void set_ima_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 13);
}

static  void set_ima2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_imm_dat_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffffffff));
  val >>=   0x20;
  x[2] |= ((val&0xffff));
}

static  void set_in_dattyp_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_in_dattyp2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_init_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 20);
}

static  void set_lp_cnt_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xffff));
}

static  void set_mask_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff) << 16);
}

static  void set_mca_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x1ff) << 16);
}

static  void set_mca_mod_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xf) << 28);
}

static  void set_modulo_val_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f));
}

static  void set_mult_coef_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_mult_coef_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_mult_coef_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_mult_coef_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_mult_mod_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3) << 8);
}

static  void set_no_of_taps_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 16);
}

static  void set_opram_continuous_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xff) << 24);
  val >>=   0x8;
  x[2] |= ((val&0xf));
}

static  void set_opram_mem_start_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_opram_mem_start_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_opram_mem_start_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_opram_mem_start_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_opram_skip_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xfff) << 4);
}

static  void set_quad_ext_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 16);
}

static  void set_real_fft_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_rst_n_keep_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 15);
}

static  void set_se_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 24);
}

static  void set_shft_val_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7) << 4);
}

static  void set_shift_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 24);
}

static  void set_src_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_src2_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_src2_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_src2_add_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_src_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 28);
}

static  void set_src_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x1ff) << 19);
}

static  void set_src_add_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xff) << 8);
}

static  void set_src_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 30);
}

static  void set_src_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7) << 16);
}

static  void set_src_add_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7ff) << 19);
}

static  void set_sync_async_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 16);
}

static  void set_sysram_continous_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xfff));
}

static  void set_sysram_mem_start_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0xffffffff));
}

static  void set_sysram_skip_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xfff) << 12);
}

static  void set_tap_coef_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_tap_coef_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_tap_coef_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_tap_coef_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_trans_type_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 17);
}

static  void set_tw_ovs_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7));
}

static  void set_tw_ovs2_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xf));
}

static  void set_vec_sz_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1fff));
}

static  void set_vector_len_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xffff));
}

static  void set_wait_ev_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f) << 16);
}

static  void set_win_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}


//
// Instruction field clearer functions.
//

static  void clear_adptv_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x40000);
  
}

static  void clear_adptv_offset_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xe000000);
  
}

static  void clear_adptv_shft_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x20000);
  
}

static  void clear_adptv_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfc00);
  
}

static  void clear_blk_dest_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x7f0000);
  
}

static  void clear_blk_src_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff000000);
  
}

static  void clear_cc_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffff0000);
  
}

static  void clear_cc_re_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff0000);
  
}

static  void clear_cp_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0000);
  
}

static  void clear_data_packing_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c0000);
  
}

static  void clear_dest_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x3000);
  
}

static  void clear_dest_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff8);
  
}

static  void clear_dest_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff);
  
}

static  void clear_dest_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xc000);
  
}

static  void clear_dest_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x7);
  
}

static  void clear_dest_add_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x3ff8);
  
}

static  void clear_ev_lvl_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_ev_tr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_evt_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_fft16_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1000000);
  
}

static  void clear_fft_rnd_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x700000);
  
}

static  void clear_fft_rnd2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x700000);
  
}

static  void clear_ima_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000);
  
}

static  void clear_ima2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_imm_dat_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffff);
    x[3] = x[3] & (~0xffffffff);
  
}

static  void clear_in_dattyp_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_in_dattyp2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_init_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x100000);
  
}

static  void clear_lp_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff);
  
}

static  void clear_mask_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff0000);
  
}

static  void clear_mca_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1ff0000);
  
}

static  void clear_mca_mod_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xf0000000);
  
}

static  void clear_modulo_val_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1f);
  
}

static  void clear_mult_coef_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_mult_coef_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_mult_coef_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_mult_coef_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_mult_mod_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x300);
  
}

static  void clear_no_of_taps_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0000);
  
}

static  void clear_opram_continuous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xf);
    x[3] = x[3] & (~0xff000000);
  
}

static  void clear_opram_mem_start_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_opram_mem_start_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_opram_mem_start_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_opram_mem_start_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_opram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xfff0);
  
}

static  void clear_quad_ext_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x10000);
  
}

static  void clear_real_fft_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_rst_n_keep_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x8000);
  
}

static  void clear_se_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1000000);
  
}

static  void clear_shft_val_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x70);
  
}

static  void clear_shift_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1000000);
  
}

static  void clear_src_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_src2_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_src2_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_src2_add_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_src_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x30000000);
  
}

static  void clear_src_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff80000);
  
}

static  void clear_src_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff00);
  
}

static  void clear_src_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xc0000000);
  
}

static  void clear_src_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x70000);
  
}

static  void clear_src_add_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x3ff80000);
  
}

static  void clear_sync_async_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x10000);
  
}

static  void clear_sysram_continous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfff);
  
}

static  void clear_sysram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffffffff);
  
}

static  void clear_sysram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfff000);
  
}

static  void clear_tap_coef_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_tap_coef_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_tap_coef_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_tap_coef_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_trans_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x20000);
  
}

static  void clear_tw_ovs_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x7);
  
}

static  void clear_tw_ovs2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xf);
  
}

static  void clear_vec_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1fff);
  
}

static  void clear_vector_len_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff);
  
}

static  void clear_wait_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1f0000);
  
}

static  void clear_win_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}


static bfd_uint64_t dest_add_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (32768ULL <= n && n <= 49151ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_T_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (16384ULL <= n && n <= 20479ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_T is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_T_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  result1 = TRUE;
  
  if ((16384ULL & n)  ==  16384ULL) {
      result2 = TRUE;
  } else if ((32768ULL & n)  ==  32768ULL) {
      result2 = TRUE;
  } 
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_T_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_WR_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_WR is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_wr_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 47UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_wr is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t mult_coef_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 20479UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand mult_coef_add is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t opram_mem_start_addr_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  result1 = TRUE;
  
  if ((32768ULL & n)  ==  32768ULL) {
      result2 = TRUE;
  } else if ((16384ULL & n)  ==  16384ULL) {
      result2 = TRUE;
  } 
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand opram_mem_start_addr is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t opram_mem_start_addr_ind_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand opram_mem_start_addr_ind is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src2_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src2_add is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (32768ULL <= n && n <= 49151ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_T_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (16384ULL <= n && n <= 20479ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_T is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_T_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  result1 = TRUE;
  
  if ((16384ULL & n)  ==  16384ULL) {
      result2 = TRUE;
  } else if ((32768ULL & n)  ==  32768ULL) {
      result2 = TRUE;
  } 
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_T_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_WR_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_WR is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t tap_coef_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 20479UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand tap_coef_add is out of bounds"));
      return -1;
  }
  return n;
};
// For field adptv
enum_field _sym1[] = { { ".adptv", 1 }, { ".noadptv", 0 }, };
enum_fields _sym2 = { _sym1 , 2 };

// For field adptv_offset
enum_field _sym3[] = { { ".bits_0_5", 0 }, { ".bits_12_17", 2 }, { ".bits_18_23", 3 }, { ".bits_24_29", 4 }, { ".bits_30_35", 5 }, { ".bits_36_41", 6 }, { ".bits_42_47", 7 }, { ".bits_6_11", 1 }, };
enum_fields _sym4 = { _sym3 , 8 };

// For field adptv_shft
enum_field _sym5[] = { { ".15down", 0 }, { ".23down", 1 }, };
enum_fields _sym6 = { _sym5 , 2 };

// For field cp_type
enum_field _sym7[] = { { ".copy_clear", 11 }, { ".copy_imag_pack", 5 }, { ".copy_real_pack", 4 }, { ".copy_shift", 12 }, { ".copy_unpack", 6 }, { ".partial_copy_i2r", 10 }, { ".partial_copy_imag", 8 }, { ".partial_copy_r2i", 9 }, { ".partial_copy_real", 7 }, { ".simple_copy", 0 }, { ".transpose_copy", 3 }, };
enum_fields _sym8 = { _sym7 , 11 };

// For field data_packing
enum_field _sym9[] = { { ".16clubbing", 6 }, { ".16cmplx", 0 }, { ".16real", 3 }, { ".16swap", 5 }, { ".24cmplx", 1 }, { ".24real", 2 }, { ".48bin", 4 }, };
enum_fields _sym10 = { _sym9 , 7 };

// For field dest_add_mode
enum_field _sym11[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym12 = { _sym11 , 3 };

// For field ev_lvl
enum_field _sym13[] = { { ".high", 1 }, { ".low", 0 }, };
enum_fields _sym14 = { _sym13 , 2 };

// For field ev_tr
enum_field _sym15[] = { { ".l0", 0 }, { ".l1", 1 }, { ".neg", 3 }, { ".pos", 2 }, };
enum_fields _sym16 = { _sym15 , 4 };

// For field fft16
enum_field _sym17[] = { { ".fft16", 1 }, { ".nofft16", 0 }, };
enum_fields _sym18 = { _sym17 , 2 };

// For field fft_rnd
enum_field _sym19[] = { { ".round0", 0 }, { ".round1", 1 }, { ".round2", 2 }, { ".round3", 3 }, { ".round4", 4 }, { ".round5", 5 }, };
enum_fields _sym20 = { _sym19 , 6 };

// For field fft_rnd2
enum_field _sym21[] = { { ".round2", 2 }, { ".round3", 3 }, { ".round4", 4 }, { ".round5", 5 }, };
enum_fields _sym22 = { _sym21 , 4 };

// For field ima
enum_field _sym23[] = { { ".imm", 0 }, { ".ind", 1 }, };
enum_fields _sym24 = { _sym23 , 2 };

// For field ima2
enum_field _sym25[] = { { ".imm", 0 }, { ".ind", 1 }, };
enum_fields _sym26 = { _sym25 , 2 };

// For field in_dattyp
enum_field _sym27[] = { { ".cmplx", 1 }, { ".real", 0 }, };
enum_fields _sym28 = { _sym27 , 2 };

// For field in_dattyp2
enum_field _sym29[] = { { ".cmplx", 1 }, { ".log2", 2 }, { ".real", 0 }, };
enum_fields _sym30 = { _sym29 , 3 };

// For field init
enum_field _sym31[] = { { ".init", 1 }, { ".noinit", 0 }, };
enum_fields _sym32 = { _sym31 , 2 };

// For field mca_mod
enum_field _sym33[] = { { "", 0 }, { ".mod0", 0 }, { ".mod128", 7 }, { ".mod16", 4 }, { ".mod2", 1 }, { ".mod256", 8 }, { ".mod32", 5 }, { ".mod4", 2 }, { ".mod512", 9 }, { ".mod64", 6 }, { ".mod8", 3 }, };
enum_fields _sym34 = { _sym33 , 11 };

// For field modulo_val
enum_field _sym35[] = { { "", 0 }, { ".mod0", 0 }, { ".mod1", 1 }, { ".mod10", 10 }, { ".mod11", 11 }, { ".mod12", 12 }, { ".mod13", 13 }, { ".mod14", 14 }, { ".mod15", 15 }, { ".mod16", 16 }, { ".mod17", 17 }, { ".mod18", 18 }, { ".mod19", 19 }, { ".mod2", 2 }, { ".mod20", 20 }, { ".mod21", 21 }, { ".mod22", 22 }, { ".mod23", 23 }, { ".mod24", 24 }, { ".mod3", 3 }, { ".mod4", 4 }, { ".mod5", 5 }, { ".mod6", 6 }, { ".mod7", 7 }, { ".mod8", 8 }, { ".mod9", 9 }, };
enum_fields _sym36 = { _sym35 , 26 };

// For field mult_coef_mode
enum_field _sym37[] = { { "or", 2 }, { "tr", 1 }, };
enum_fields _sym38 = { _sym37 , 2 };

// For field mult_mod
enum_field _sym39[] = { { ".caddr", 2 }, { ".const", 1 }, };
enum_fields _sym40 = { _sym39 , 2 };

// For field opram_mem_start_mode
enum_field _sym41[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym42 = { _sym41 , 3 };

// For field quad_ext
enum_field _sym43[] = { { ".noqext", 0 }, { ".qext", 1 }, };
enum_fields _sym44 = { _sym43 , 2 };

// For field real_fft
enum_field _sym45[] = { { ".nosplit", 0 }, { ".opsplit", 1 }, };
enum_fields _sym46 = { _sym45 , 2 };

// For field rst_n_keep
enum_field _sym47[] = { { ".keep_orig", 0 }, { ".reset_values", 1 }, };
enum_fields _sym48 = { _sym47 , 2 };

// For field se
enum_field _sym49[] = { { ".signext", 1 }, { ".zeropad", 0 }, };
enum_fields _sym50 = { _sym49 , 2 };

// For field shft_val
enum_field _sym51[] = { { "", 0 }, { ".nosft", 0 }, { ".shift1", 1 }, { ".shift2", 2 }, { ".shift3", 3 }, { ".shift4", 4 }, { ".shift8", 5 }, };
enum_fields _sym52 = { _sym51 , 7 };

// For field shift
enum_field _sym53[] = { { "", 1 }, { ".noshift", 0 }, { ".shift", 1 }, };
enum_fields _sym54 = { _sym53 , 3 };

// For field src
enum_field _sym55[] = { { "", 1 }, { ".immed", 0 }, { ".reg", 1 }, };
enum_fields _sym56 = { _sym55 , 3 };

// For field src2_add_mode
enum_field _sym57[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym58 = { _sym57 , 3 };

// For field src_add_mode
enum_field _sym59[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym60 = { _sym59 , 3 };

// For field sync_async
enum_field _sym61[] = { { ".async", 0 }, { ".sync", 1 }, };
enum_fields _sym62 = { _sym61 , 2 };

// For field trans_type
enum_field _sym63[] = { { ".opram2sysram", 1 }, { ".sysram2opram", 0 }, };
enum_fields _sym64 = { _sym63 , 2 };

// For field tw_ovs
enum_field _sym65[] = { { ".noovs", 0 }, { ".ovs128", 7 }, { ".ovs16", 4 }, { ".ovs2", 1 }, { ".ovs32", 5 }, { ".ovs4", 2 }, { ".ovs64", 6 }, { ".ovs8", 3 }, };
enum_fields _sym66 = { _sym65 , 8 };

// For field tw_ovs2
enum_field _sym67[] = { { ".noovs", 0 }, { ".ovs128", 7 }, { ".ovs16", 4 }, { ".ovs2", 1 }, { ".ovs256", 8 }, { ".ovs32", 5 }, { ".ovs4", 2 }, { ".ovs64", 6 }, { ".ovs8", 3 }, };
enum_fields _sym68 = { _sym67 , 9 };

// For field win
enum_field _sym69[] = { { ".nowin", 0 }, { ".win", 1 }, };
enum_fields _sym70 = { _sym69 , 2 };

// Instruction operands.
static struct adl_field ppc_operands [] = {
  {"adptv_width_128",0,0,1,set_adptv_width_128,clear_adptv_width_128,-1,-1,-1,0,&_sym2,0},	// 0
  {"adptv_offset_width_128",1,1,3,set_adptv_offset_width_128,clear_adptv_offset_width_128,-1,-1,-1,0,&_sym4,0},	// 1
  {"adptv_shft_width_128",2,2,1,set_adptv_shft_width_128,clear_adptv_shft_width_128,-1,-1,-1,0,&_sym6,0},	// 2
  {"adptv_wrnum_width_128",3,3,6,set_adptv_wrnum_width_128,clear_adptv_wrnum_width_128,-1,-1,-1,0,0,0},	// 3
  {"blk_dest_inc_width_128",4,4,7,set_blk_dest_inc_width_128,clear_blk_dest_inc_width_128,-1,-1,-1,0,0,0},	// 4
  {"blk_src_inc_width_128",5,5,8,set_blk_src_inc_width_128,clear_blk_src_inc_width_128,-1,-1,-1,0,0,0},	// 5
  {"cc_im_width_128",6,6,16,set_cc_im_width_128,clear_cc_im_width_128,-1,-1,-1,0,0,0},	// 6
  {"cc_re_width_128",7,7,16,set_cc_re_width_128,clear_cc_re_width_128,-1,-1,-1,0,0,0},	// 7
  {"cp_type_width_128",8,8,4,set_cp_type_width_128,clear_cp_type_width_128,0,-1,-1,0,&_sym8,0},	// 8
  {"data_packing_width_128",9,9,4,set_data_packing_width_128,clear_data_packing_width_128,0,-1,-1,0,&_sym10,0},	// 9
  {"dest_add_bank_width_128",15,10,2,set_dest_add_bank_width_128,clear_dest_add_bank_width_128,-1,-1,-1,0,0,0},	// 10
  {"dest_add_col_width_128",16,11,9,set_dest_add_col_width_128,clear_dest_add_col_width_128,-1,-1,-1,0,0,0},	// 11
  {"dest_add_inc_width_128",17,12,8,set_dest_add_inc_width_128,clear_dest_add_inc_width_128,-1,-1,-1,0,0,0},	// 12
  {"dest_add_mode_width_128",18,13,2,set_dest_add_mode_width_128,clear_dest_add_mode_width_128,-1,-1,-1,0,&_sym12,0},	// 13
  {"dest_add_slice_width_128",19,14,3,set_dest_add_slice_width_128,clear_dest_add_slice_width_128,-1,-1,-1,0,0,0},	// 14
  {"dest_add_wr_width_128",20,15,11,set_dest_add_wr_width_128,clear_dest_add_wr_width_128,-1,-1,-1,0,0,0},	// 15
  {"ev_lvl_width_128",21,16,1,set_ev_lvl_width_128,clear_ev_lvl_width_128,0,-1,-1,0,&_sym14,0},	// 16
  {"ev_tr_width_128",22,17,2,set_ev_tr_width_128,clear_ev_tr_width_128,0,-1,-1,0,&_sym16,0},	// 17
  {"evt_ev_width_128",23,18,3,set_evt_ev_width_128,clear_evt_ev_width_128,-1,-1,-1,0,0,0},	// 18
  {"fft16_width_128",24,19,1,set_fft16_width_128,clear_fft16_width_128,0,-1,-1,0,&_sym18,0},	// 19
  {"fft_rnd_width_128",25,20,3,set_fft_rnd_width_128,clear_fft_rnd_width_128,-1,-1,-1,0,&_sym20,0},	// 20
  {"fft_rnd2_width_128",26,21,3,set_fft_rnd2_width_128,clear_fft_rnd2_width_128,-1,-1,-1,0,&_sym22,0},	// 21
  {"ima_width_128",27,22,1,set_ima_width_128,clear_ima_width_128,0,-1,-1,0,&_sym24,0},	// 22
  {"ima2_width_128",28,23,1,set_ima2_width_128,clear_ima2_width_128,0,-1,-1,0,&_sym26,0},	// 23
  {"imm_dat_width_128",29,24,48,set_imm_dat_width_128,clear_imm_dat_width_128,-1,-1,-1,0,0,0},	// 24
  {"in_dattyp_width_128",30,25,1,set_in_dattyp_width_128,clear_in_dattyp_width_128,0,-1,-1,0,&_sym28,0},	// 25
  {"in_dattyp2_width_128",31,26,2,set_in_dattyp2_width_128,clear_in_dattyp2_width_128,0,-1,-1,0,&_sym30,0},	// 26
  {"init_width_128",32,27,1,set_init_width_128,clear_init_width_128,0,-1,-1,0,&_sym32,0},	// 27
  {"lp_cnt_width_128",33,28,16,set_lp_cnt_width_128,clear_lp_cnt_width_128,-1,-1,-1,0,0,0},	// 28
  {"mask_width_128",34,29,16,set_mask_width_128,clear_mask_width_128,-1,-1,-1,0,0,0},	// 29
  {"mca_inc_width_128",35,30,9,set_mca_inc_width_128,clear_mca_inc_width_128,-1,-1,-1,0,0,0},	// 30
  {"mca_mod_width_128",36,31,4,set_mca_mod_width_128,clear_mca_mod_width_128,0,-1,-1,0,&_sym34,0},	// 31
  {"modulo_val_width_128",37,32,5,set_modulo_val_width_128,clear_modulo_val_width_128,0,-1,-1,0,&_sym36,0},	// 32
  {"mult_coef_bank_width_128",39,33,2,set_mult_coef_bank_width_128,clear_mult_coef_bank_width_128,-1,-1,-1,0,0,0},	// 33
  {"mult_coef_col_width_128",40,34,9,set_mult_coef_col_width_128,clear_mult_coef_col_width_128,-1,-1,-1,0,0,0},	// 34
  {"mult_coef_mode_width_128",41,35,2,set_mult_coef_mode_width_128,clear_mult_coef_mode_width_128,-1,-1,-1,0,&_sym38,0},	// 35
  {"mult_coef_slice_width_128",42,36,3,set_mult_coef_slice_width_128,clear_mult_coef_slice_width_128,-1,-1,-1,0,0,0},	// 36
  {"mult_mod_width_128",43,37,2,set_mult_mod_width_128,clear_mult_mod_width_128,-1,-1,-1,0,&_sym40,0},	// 37
  {"no_of_taps_width_128",44,38,4,set_no_of_taps_width_128,clear_no_of_taps_width_128,-1,-1,-1,0,0,0},	// 38
  {"opram_continuous_addr_width_128",46,39,12,set_opram_continuous_addr_width_128,clear_opram_continuous_addr_width_128,-1,-1,-1,0,0,0},	// 39
  {"opram_mem_start_bank_width_128",49,40,2,set_opram_mem_start_bank_width_128,clear_opram_mem_start_bank_width_128,-1,-1,-1,0,0,0},	// 40
  {"opram_mem_start_col_width_128",50,41,9,set_opram_mem_start_col_width_128,clear_opram_mem_start_col_width_128,-1,-1,-1,0,0,0},	// 41
  {"opram_mem_start_mode_width_128",51,42,2,set_opram_mem_start_mode_width_128,clear_opram_mem_start_mode_width_128,-1,-1,-1,0,&_sym42,0},	// 42
  {"opram_mem_start_slice_width_128",52,43,3,set_opram_mem_start_slice_width_128,clear_opram_mem_start_slice_width_128,-1,-1,-1,0,0,0},	// 43
  {"opram_skip_addr_width_128",53,44,12,set_opram_skip_addr_width_128,clear_opram_skip_addr_width_128,-1,-1,-1,0,0,0},	// 44
  {"quad_ext_width_128",54,45,1,set_quad_ext_width_128,clear_quad_ext_width_128,0,-1,-1,0,&_sym44,0},	// 45
  {"real_fft_width_128",55,46,1,set_real_fft_width_128,clear_real_fft_width_128,0,-1,-1,0,&_sym46,0},	// 46
  {"rst_n_keep_width_128",56,47,1,set_rst_n_keep_width_128,clear_rst_n_keep_width_128,0,-1,-1,0,&_sym48,0},	// 47
  {"se_width_128",57,48,1,set_se_width_128,clear_se_width_128,0,-1,-1,0,&_sym50,0},	// 48
  {"shft_val_width_128",58,49,3,set_shft_val_width_128,clear_shft_val_width_128,1,-1,-1,0,&_sym52,0},	// 49
  {"shift_width_128",59,50,1,set_shift_width_128,clear_shift_width_128,2,-1,-1,0,&_sym54,0},	// 50
  {"src_width_128",60,51,1,set_src_width_128,clear_src_width_128,-1,-1,-1,0,&_sym56,0},	// 51
  {"src2_add_mode_width_128",64,52,2,set_src2_add_mode_width_128,clear_src2_add_mode_width_128,-1,-1,-1,0,&_sym58,0},	// 52
  {"src2_add_slice_width_128",65,53,3,set_src2_add_slice_width_128,clear_src2_add_slice_width_128,-1,-1,-1,0,0,0},	// 53
  {"src2_add_wr_width_128",66,54,9,set_src2_add_wr_width_128,clear_src2_add_wr_width_128,-1,-1,-1,0,0,0},	// 54
  {"src_add_bank_width_128",72,55,2,set_src_add_bank_width_128,clear_src_add_bank_width_128,-1,-1,-1,0,0,0},	// 55
  {"src_add_col_width_128",73,56,9,set_src_add_col_width_128,clear_src_add_col_width_128,-1,-1,-1,0,0,0},	// 56
  {"src_add_inc_width_128",74,57,8,set_src_add_inc_width_128,clear_src_add_inc_width_128,-1,-1,-1,0,0,0},	// 57
  {"src_add_mode_width_128",75,58,2,set_src_add_mode_width_128,clear_src_add_mode_width_128,-1,-1,-1,0,&_sym60,0},	// 58
  {"src_add_slice_width_128",76,59,3,set_src_add_slice_width_128,clear_src_add_slice_width_128,-1,-1,-1,0,0,0},	// 59
  {"src_add_wr_width_128",77,60,11,set_src_add_wr_width_128,clear_src_add_wr_width_128,-1,-1,-1,0,0,0},	// 60
  {"sync_async_width_128",78,61,1,set_sync_async_width_128,clear_sync_async_width_128,1,-1,-1,0,&_sym62,0},	// 61
  {"sysram_continous_addr_width_128",79,62,12,set_sysram_continous_addr_width_128,clear_sysram_continous_addr_width_128,-1,-1,-1,0,0,0},	// 62
  {"sysram_mem_start_addr_width_128",80,63,32,set_sysram_mem_start_addr_width_128,clear_sysram_mem_start_addr_width_128,-1,1,-1,0,0,0},	// 63
  {"sysram_skip_addr_width_128",81,64,12,set_sysram_skip_addr_width_128,clear_sysram_skip_addr_width_128,-1,-1,-1,0,0,0},	// 64
  {"tap_coef_bank_width_128",83,65,2,set_tap_coef_bank_width_128,clear_tap_coef_bank_width_128,-1,-1,-1,0,0,0},	// 65
  {"tap_coef_col_width_128",84,66,9,set_tap_coef_col_width_128,clear_tap_coef_col_width_128,-1,-1,-1,0,0,0},	// 66
  {"tap_coef_mode_width_128",85,67,2,set_tap_coef_mode_width_128,clear_tap_coef_mode_width_128,1,-1,-1,0,0,0},	// 67
  {"tap_coef_slice_width_128",86,68,3,set_tap_coef_slice_width_128,clear_tap_coef_slice_width_128,-1,-1,-1,0,0,0},	// 68
  {"trans_type_width_128",87,69,1,set_trans_type_width_128,clear_trans_type_width_128,0,-1,-1,0,&_sym64,0},	// 69
  {"tw_ovs_width_128",88,70,3,set_tw_ovs_width_128,clear_tw_ovs_width_128,0,-1,-1,0,&_sym66,0},	// 70
  {"tw_ovs2_width_128",89,71,4,set_tw_ovs2_width_128,clear_tw_ovs2_width_128,0,-1,-1,0,&_sym68,0},	// 71
  {"vec_sz_width_128",90,72,13,set_vec_sz_width_128,clear_vec_sz_width_128,-1,-1,-1,0,0,0},	// 72
  {"vector_len_width_128",91,73,16,set_vector_len_width_128,clear_vector_len_width_128,-1,-1,-1,0,0,0},	// 73
  {"wait_ev_width_128",92,74,5,set_wait_ev_width_128,clear_wait_ev_width_128,-1,-1,-1,0,0,0},	// 74
  {"win_width_128",93,75,1,set_win_width_128,clear_win_width_128,0,-1,-1,0,&_sym70,0},	// 75
};

static const int num_ppc_operands = 76;

static struct adl_name_pair ppc_operands_by_index [] = {
   { "", 0 }
};

static const int num_ppc_operands_by_index = 0;

enum InstrBlocks {
};


// Instruction add

// Shorthand:  add -> add_;

static bfd_uint64_t _sym73_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[3].X_add_number) ); }

static int _sym73_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym74_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[3].X_add_number) ); }

static int _sym74_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym75_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[3].X_add_number) ); }

static int _sym75_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym76_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[3].X_add_number) ); }

static int _sym76_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym77_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym77_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym78_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym78_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym79_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym79_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym80_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym80_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym81_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym81_mod_indices[] = { 0, 4,  -1 };

static bfd_uint64_t _sym82_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym82_mod_indices[] = { 0, 4,  -1 };
struct adl_operand _sym72_operands[] = { {51, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{50, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym73_modifier, _sym73_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym74_modifier, _sym74_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym75_modifier, _sym75_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym76_modifier, _sym76_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym77_modifier, _sym77_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym78_modifier, _sym78_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym79_modifier, _sym79_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym80_modifier, _sym80_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym81_modifier, _sym81_mod_indices, 0, 0,0, -1,-1,},{24, 0, 0, 0, 0, 0, 0, 0, _sym82_modifier, _sym82_mod_indices, 0, 0,0, -1,-1,},};

// Instruction add
struct adl_operand _sym71_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym83[] = {
  // add_    (0)
  { "add_", 16, 128, 128,  0xf, { 0xc000000,},0, "", 0, 13, 13, 0, 3, _sym72_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym84[] = { &_sym56, &_sym54, &_sym36, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction add_

// Instruction add_
struct adl_operand _sym85_operands[] = { {51, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{50, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 3, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 4, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 5, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 6, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 7, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 8, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 9, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 10, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 11, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 12, ADL_REGISTER, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 13, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 14, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym86[] = { &_sym56, &_sym54, &_sym36, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, &_sym58, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy

// Shorthand:  copy -> copy_;

static bfd_uint64_t _sym89_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym89_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym90_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym90_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym91_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym91_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym92_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym92_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym93_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym93_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym94_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym94_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym95_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym95_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym96_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym96_mod_indices[] = { 5,  -1 };
struct adl_operand _sym88_operands[] = { {26, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym89_modifier, _sym89_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym90_modifier, _sym90_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym91_modifier, _sym91_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym92_modifier, _sym92_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym93_modifier, _sym93_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym94_modifier, _sym94_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym95_modifier, _sym95_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym96_modifier, _sym96_mod_indices, 0, 0,0, -1,-1,},{5, 6, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{4, 7, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 10, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction copy
struct adl_operand _sym87_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym97[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94000000,},0, "", 0, 17, 17, 0, 3, _sym88_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym98[] = { &_sym30, &_sym8, &_sym48, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_

// Instruction copy_
struct adl_operand _sym99_operands[] = { {26, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 3, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 5, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 6, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 7, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 8, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 9, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 10, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 11, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 12, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{5, 13, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{4, 14, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 15, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 16, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 17, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym100[] = { &_sym30, &_sym8, &_sym48, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_ind

// Shorthand:  copy_ind -> copy_;

static bfd_uint64_t _sym103_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym103_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym104_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym104_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym105_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym105_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym106_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym106_mod_indices[] = { 4,  -1 };
struct adl_operand _sym102_operands[] = { {26, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym103_modifier, _sym103_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym104_modifier, _sym104_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym105_modifier, _sym105_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym106_modifier, _sym106_mod_indices, 0, 0,0, -1,-1,},{5, 5, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{4, 6, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction copy_ind
struct adl_operand _sym101_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym107[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94002000,},0, "", 0, 13, 13, 0, 3, _sym102_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym108[] = { &_sym30, &_sym8, &_sym48, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction evt

// Instruction evt
struct adl_operand _sym109_operands[] = { {16, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{18, 1, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym110[] = { &_sym14, 0,  (struct enum_fields *) -1,};

// Instruction fir

// Shorthand:  fir -> fir_;

static bfd_uint64_t _sym113_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym113_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym114_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym114_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym115_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym115_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym116_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym116_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym117_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym117_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym118_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym118_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym119_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym119_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym120_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym120_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym121_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (tap_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym121_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym122_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (tap_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym122_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym123_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (tap_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym123_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym124_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (tap_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym124_mod_indices[] = { 6,  -1 };
struct adl_operand _sym112_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{27, 1, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{38, 2, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym113_modifier, _sym113_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym114_modifier, _sym114_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym115_modifier, _sym115_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym116_modifier, _sym116_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym117_modifier, _sym117_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym118_modifier, _sym118_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym119_modifier, _sym119_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym120_modifier, _sym120_mod_indices, 0, 0,0, -1,-1,},{67, 0, 0, 0, 0, 0, 0, 0, _sym121_modifier, _sym121_mod_indices, 0, 0,0, -1,-1,},{65, 0, 0, 0, 0, 0, 0, 0, _sym122_modifier, _sym122_mod_indices, 0, 0,0, -1,-1,},{66, 0, 0, 0, 0, 0, 0, 0, _sym123_modifier, _sym123_mod_indices, 0, 0,0, -1,-1,},{68, 0, 0, 0, 0, 0, 0, 0, _sym124_modifier, _sym124_mod_indices, 0, 0,0, -1,-1,},{57, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 9, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction fir
struct adl_operand _sym111_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,tap_coef_add_checker, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym125[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4000000,},0, "", 0, 19, 19, 0, 2, _sym112_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym126[] = { &_sym28, &_sym32, 0, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction fir_

// Instruction fir_
struct adl_operand _sym127_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{27, 1, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{38, 2, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 3, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 5, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 6, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 7, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 8, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 9, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 10, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 11, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 12, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 13, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 14, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{66, 15, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{68, 16, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 17, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 18, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 19, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym128[] = { &_sym28, &_sym32, 0, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction fir_ind

// Shorthand:  fir_ind -> fir_;

static bfd_uint64_t _sym131_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym131_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym132_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym132_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym133_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym133_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym134_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym134_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym135_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (tap_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym135_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym136_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (tap_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym136_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym137_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (tap_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym137_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym138_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (tap_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym138_mod_indices[] = { 5,  -1 };
struct adl_operand _sym130_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{27, 1, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{38, 2, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym131_modifier, _sym131_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym132_modifier, _sym132_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym133_modifier, _sym133_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym134_modifier, _sym134_mod_indices, 0, 0,0, -1,-1,},{67, 0, 0, 0, 0, 0, 0, 0, _sym135_modifier, _sym135_mod_indices, 0, 0,0, -1,-1,},{65, 0, 0, 0, 0, 0, 0, 0, _sym136_modifier, _sym136_mod_indices, 0, 0,0, -1,-1,},{66, 0, 0, 0, 0, 0, 0, 0, _sym137_modifier, _sym137_mod_indices, 0, 0,0, -1,-1,},{68, 0, 0, 0, 0, 0, 0, 0, _sym138_modifier, _sym138_mod_indices, 0, 0,0, -1,-1,},{57, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 8, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction fir_ind
struct adl_operand _sym129_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,tap_coef_add_checker, 0,-1,-1,},{0, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym139[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4002000,},0, "", 0, 15, 15, 0, 2, _sym130_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym140[] = { &_sym28, &_sym32, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction get

// Shorthand:  get -> get_;

static bfd_uint64_t _sym143_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym143_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym144_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym144_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym145_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym145_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym146_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym146_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym147_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_WR_checker((operands[1].X_add_number),FALSE)) ); }

static int _sym147_mod_indices[] = { 1,  -1 };
struct adl_operand _sym142_operands[] = { {58, 0, 0, 0, 0, 0, 0, 0, _sym143_modifier, _sym143_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym144_modifier, _sym144_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym145_modifier, _sym145_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym146_modifier, _sym146_mod_indices, 0, 0,0, -1,-1,},{15, 0, 0, 0, 0, 0, 0, 0, _sym147_modifier, _sym147_mod_indices, 0,dest_add_wr_checker,0, -1,-1,},};

// Instruction get
struct adl_operand _sym141_operands[] = { {88, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_T_O_checker, 0,-1,-1,},{80, 1, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_WR_checker, 0,-1,-1,},};
static struct adl_opcode _sym148[] = {
  // get_    (0)
  { "get_", 16, 128, 128,  0xf, { 0x8000000,},0, "", 0, 5, 5, 0, 0, _sym142_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym149[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction get_

// Instruction get_
struct adl_operand _sym150_operands[] = { {22, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 1, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 2, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 3, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 4, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 5, ADL_REGISTER, 0, 50, 0ull, 0x7ffull, 0ull, 0, 0, 0,dest_add_wr_checker, 0,-1,-1,},};
struct enum_fields *_sym151[] = { &_sym24, &_sym60, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction get_ind

// Shorthand:  get_ind -> get_;

static bfd_uint64_t _sym154_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_WR_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym154_mod_indices[] = { 0,  -1 };
struct adl_operand _sym153_operands[] = { {56, 0, 0, 0, 0, 0, 0, 0, _sym154_modifier, _sym154_mod_indices, 0, 0,0, -1,-1,},};

// Instruction get_ind
struct adl_operand _sym152_operands[] = { {89, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_WR_checker, 0,-1,-1,},};
static struct adl_opcode _sym155[] = {
  // get_    (0)
  { "get_", 16, 128, 128,  0xf, { 0x8002000,},0, "", 0, 1, 1, 0, 0, _sym153_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym156[] = { 0,  (struct enum_fields *) -1,};

// Instruction loop

// Instruction loop
struct adl_operand _sym157_operands[] = { {28, 0, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym158[] = { 0,  (struct enum_fields *) -1,};

// Instruction next

// Instruction next
struct adl_operand _sym159_operands[] = {  0 };
struct enum_fields *_sym160[] = {  (struct enum_fields *) -1,};

// Instruction pdma

// Shorthand:  pdma -> pdma_;

static bfd_uint64_t _sym163_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (opram_mem_start_addr_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym163_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym164_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (opram_mem_start_addr_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym164_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym165_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (opram_mem_start_addr_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym165_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym166_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (opram_mem_start_addr_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym166_mod_indices[] = { 6,  -1 };
struct adl_operand _sym162_operands[] = { {48, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 1, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{69, 2, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{61, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 4, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{63, 5, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{42, 0, 0, 0, 0, 0, 0, 0, _sym163_modifier, _sym163_mod_indices, 0, 0,0, -1,-1,},{40, 0, 0, 0, 0, 0, 0, 0, _sym164_modifier, _sym164_mod_indices, 0, 0,0, -1,-1,},{41, 0, 0, 0, 0, 0, 0, 0, _sym165_modifier, _sym165_mod_indices, 0, 0,0, -1,-1,},{43, 0, 0, 0, 0, 0, 0, 0, _sym166_modifier, _sym166_mod_indices, 0, 0,0, -1,-1,},{44, 7, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{39, 8, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 9, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{62, 10, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction pdma
struct adl_operand _sym161_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{82, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,opram_mem_start_addr_checker, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym167[] = {
  // pdma_    (0)
  { "pdma_", 16, 128, 128,  0xf, { 0xa0000000,},0, "", 0, 14, 14, 0, 4, _sym162_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym168[] = { &_sym50, &_sym10, &_sym64, &_sym62, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction pdma_

// Instruction pdma_
struct adl_operand _sym169_operands[] = { {48, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 2, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{69, 3, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{61, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 5, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{63, 6, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{42, 7, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{40, 8, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{41, 9, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{43, 10, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{44, 11, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{39, 12, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 13, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{62, 14, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym170[] = { &_sym50, &_sym26, &_sym10, &_sym64, &_sym62, 0, 0, &_sym42, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction pdma_ind

// Shorthand:  pdma_ind -> pdma_;

static bfd_uint64_t _sym173_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (opram_mem_start_addr_ind_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym173_mod_indices[] = { 6,  -1 };
struct adl_operand _sym172_operands[] = { {48, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 1, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{69, 2, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{61, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 4, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{63, 5, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{41, 0, 0, 0, 0, 0, 0, 0, _sym173_modifier, _sym173_mod_indices, 0, 0,0, -1,-1,},{44, 7, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{39, 8, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 9, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{62, 10, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction pdma_ind
struct adl_operand _sym171_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{83, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,opram_mem_start_addr_ind_checker, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym174[] = {
  // pdma_    (0)
  { "pdma_", 16, 128, 128,  0xf, { 0xa0800000,},0, "", 0, 11, 11, 0, 4, _sym172_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym175[] = { &_sym50, &_sym10, &_sym64, &_sym62, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2

// Shorthand:  rdx2 -> rdx2_;

static bfd_uint64_t _sym178_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym178_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym179_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym179_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym180_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym180_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym181_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym181_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym182_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym182_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym183_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym183_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym184_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym184_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym185_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym185_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym186_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym186_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym187_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym187_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym188_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym188_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym189_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym189_mod_indices[] = { 8,  -1 };
struct adl_operand _sym177_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{21, 4, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym178_modifier, _sym178_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym179_modifier, _sym179_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym180_modifier, _sym180_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym181_modifier, _sym181_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym182_modifier, _sym182_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym183_modifier, _sym183_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym184_modifier, _sym184_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym185_modifier, _sym185_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym186_modifier, _sym186_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym187_modifier, _sym187_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym188_modifier, _sym188_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym189_modifier, _sym189_mod_indices, 0, 0,0, -1,-1,},{57, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 11, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2
struct adl_operand _sym176_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym190[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c000000,},0, "", 0, 21, 21, 0, 4, _sym177_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym191[] = { &_sym28, &_sym46, &_sym44, &_sym68, &_sym22, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx2_

// Instruction rdx2_
struct adl_operand _sym192_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{21, 1, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 2, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 5, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 6, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 8, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 9, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 10, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 11, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 12, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 13, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 14, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 15, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 16, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{33, 17, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{34, 18, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 19, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 20, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 21, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 22, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 23, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 24, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 25, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym193[] = { &_sym28, &_sym22, &_sym46, &_sym2, &_sym6, &_sym44, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, &_sym38, 0, 0, 0, 0, 0, &_sym4, 0, &_sym52, &_sym68,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv

// Shorthand:  rdx2_adptv -> rdx2_;

static bfd_uint64_t _sym196_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym196_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym197_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym197_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym198_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym198_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym199_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym199_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym200_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym200_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym201_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym201_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym202_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym202_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym203_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym203_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym204_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym204_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym205_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym205_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym206_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym206_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym207_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym207_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym208_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym208_mod_indices[] = { 6,  -1 };
struct adl_operand _sym195_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{21, 7, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym196_modifier, _sym196_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym197_modifier, _sym197_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym198_modifier, _sym198_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym199_modifier, _sym199_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym200_modifier, _sym200_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym201_modifier, _sym201_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym202_modifier, _sym202_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym203_modifier, _sym203_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym204_modifier, _sym204_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym205_modifier, _sym205_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym206_modifier, _sym206_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym207_modifier, _sym207_mod_indices, 0, 0,0, -1,-1,},{57, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 0, 0, 0, 0, 0, 0, 0, _sym208_modifier, _sym208_mod_indices, 0, 0,0, -1,-1,},{49, 14, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_adptv
struct adl_operand _sym194_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym209[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c040000,},0, "", 0, 24, 24, 0, 7, _sym195_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym210[] = { &_sym28, &_sym46, &_sym44, &_sym68, &_sym6, &_sym4, 0, &_sym22, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx2_ind

// Shorthand:  rdx2_ind -> rdx2_;

static bfd_uint64_t _sym213_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym213_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym214_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym214_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym215_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym215_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym216_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym216_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym217_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym217_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym218_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym218_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym219_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym219_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym220_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym220_mod_indices[] = { 7,  -1 };
struct adl_operand _sym212_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{21, 4, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym213_modifier, _sym213_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym214_modifier, _sym214_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym215_modifier, _sym215_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym216_modifier, _sym216_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym217_modifier, _sym217_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym218_modifier, _sym218_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym219_modifier, _sym219_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym220_modifier, _sym220_mod_indices, 0, 0,0, -1,-1,},{57, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 10, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_ind
struct adl_operand _sym211_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym221[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c002000,},0, "", 0, 17, 17, 0, 3, _sym212_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym222[] = { &_sym28, &_sym46, &_sym44, &_sym68, &_sym22, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx2_ind_adptv

// Shorthand:  rdx2_ind_adptv -> rdx2_;

static bfd_uint64_t _sym225_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym225_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym226_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym226_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym227_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym227_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym228_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym228_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym229_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym229_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym230_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym230_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym231_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym231_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym232_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym232_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym233_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym233_mod_indices[] = { 6,  -1 };
struct adl_operand _sym224_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{21, 7, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym225_modifier, _sym225_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym226_modifier, _sym226_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym227_modifier, _sym227_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym228_modifier, _sym228_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym229_modifier, _sym229_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym230_modifier, _sym230_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym231_modifier, _sym231_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym232_modifier, _sym232_mod_indices, 0, 0,0, -1,-1,},{57, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 0, 0, 0, 0, 0, 0, 0, _sym233_modifier, _sym233_mod_indices, 0, 0,0, -1,-1,},{49, 13, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_ind_adptv
struct adl_operand _sym223_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym234[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c042000,},0, "", 0, 20, 20, 0, 6, _sym224_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym235[] = { &_sym28, &_sym46, &_sym44, &_sym68, &_sym6, &_sym4, 0, &_sym22, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx4_adptv_mmn0

// Shorthand:  rdx4_adptv_mmn0 -> rdx4_mmn0_;

static bfd_uint64_t _sym238_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym238_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym239_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym239_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym240_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym240_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym241_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym241_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym242_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[12].X_add_number) ); }

static int _sym242_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym243_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[12].X_add_number) ); }

static int _sym243_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym244_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[12].X_add_number) ); }

static int _sym244_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym245_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[12].X_add_number) ); }

static int _sym245_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym246_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym246_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym247_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym247_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym248_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym248_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym249_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym249_mod_indices[] = { 13,  -1 };
struct adl_operand _sym237_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 9, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym238_modifier, _sym238_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym239_modifier, _sym239_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym240_modifier, _sym240_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym241_modifier, _sym241_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym242_modifier, _sym242_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym243_modifier, _sym243_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym244_modifier, _sym244_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym245_modifier, _sym245_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym246_modifier, _sym246_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym247_modifier, _sym247_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym248_modifier, _sym248_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym249_modifier, _sym249_mod_indices, 0, 0,0, -1,-1,},{57, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 16, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 17, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 8, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 18, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_adptv_mmn0
struct adl_operand _sym236_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 17, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 18, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym250[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88040000,},0, "", 0, 28, 28, 0, 9, _sym237_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym251[] = { &_sym28, &_sym18, &_sym70, &_sym44, &_sym40, &_sym66, &_sym6, &_sym4, 0, &_sym20, 0, 0, 0, 0, 0, 0, &_sym34, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx4_adptv_mmn0_ind

// Shorthand:  rdx4_adptv_mmn0_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym254_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym254_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym255_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym255_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym256_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym256_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym257_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym257_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym258_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym258_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym259_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym259_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym260_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym260_mod_indices[] = { 12,  -1 };
struct adl_operand _sym253_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 9, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym254_modifier, _sym254_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym255_modifier, _sym255_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym256_modifier, _sym256_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym257_modifier, _sym257_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym258_modifier, _sym258_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym259_modifier, _sym259_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym260_modifier, _sym260_mod_indices, 0, 0,0, -1,-1,},{57, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 8, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 17, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_adptv_mmn0_ind
struct adl_operand _sym252_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 17, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym261[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88042000,},0, "", 0, 23, 23, 0, 9, _sym253_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym262[] = { &_sym28, &_sym18, &_sym70, &_sym44, &_sym40, &_sym66, &_sym6, &_sym4, 0, &_sym20, 0, 0, 0, 0, 0, &_sym34, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0

// Shorthand:  rdx4_mm0 -> rdx4_mm0_;

static bfd_uint64_t _sym265_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym265_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym266_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym266_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym267_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym267_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym268_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym268_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym269_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym269_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym270_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym270_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym271_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym271_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym272_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym272_mod_indices[] = { 8,  -1 };
struct adl_operand _sym264_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym265_modifier, _sym265_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym266_modifier, _sym266_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym267_modifier, _sym267_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym268_modifier, _sym268_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym269_modifier, _sym269_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym270_modifier, _sym270_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym271_modifier, _sym271_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym272_modifier, _sym272_mod_indices, 0, 0,0, -1,-1,},{6, 9, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 10, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 4, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mm0
struct adl_operand _sym263_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym273[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 16, 128, 128,  0xf, { 0x88000000,},0, "", 0, 20, 20, 0, 5, _sym264_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym274[] = { &_sym28, &_sym18, &_sym70, &_sym44, &_sym66, &_sym20, 0, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0_

// Instruction rdx4_mm0_
struct adl_operand _sym275_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 5, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 7, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 8, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 9, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 10, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 11, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 12, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 13, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 14, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{6, 15, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 16, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 17, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 18, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 19, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 20, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym276[] = { &_sym28, &_sym18, &_sym70, &_sym20, &_sym44, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, 0, 0, 0, 0, &_sym52, &_sym66,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0_ind

// Shorthand:  rdx4_mm0_ind -> rdx4_mm0_;

static bfd_uint64_t _sym279_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym279_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym280_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym280_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym281_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym281_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym282_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym282_mod_indices[] = { 7,  -1 };
struct adl_operand _sym278_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym279_modifier, _sym279_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym280_modifier, _sym280_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym281_modifier, _sym281_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym282_modifier, _sym282_mod_indices, 0, 0,0, -1,-1,},{6, 8, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 12, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 4, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mm0_ind
struct adl_operand _sym277_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym283[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 16, 128, 128,  0xf, { 0x88002000,},0, "", 0, 16, 16, 0, 5, _sym278_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym284[] = { &_sym28, &_sym18, &_sym70, &_sym44, &_sym66, &_sym20, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0

// Shorthand:  rdx4_mmn0 -> rdx4_mmn0_;

static bfd_uint64_t _sym287_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym287_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym288_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym288_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym289_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym289_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym290_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym290_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym291_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym291_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym292_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym292_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym293_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym293_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym294_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym294_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym295_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym295_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym296_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym296_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym297_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym297_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym298_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym298_mod_indices[] = { 10,  -1 };
struct adl_operand _sym286_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym287_modifier, _sym287_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym288_modifier, _sym288_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym289_modifier, _sym289_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym290_modifier, _sym290_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym291_modifier, _sym291_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym292_modifier, _sym292_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym293_modifier, _sym293_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym294_modifier, _sym294_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym295_modifier, _sym295_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym296_modifier, _sym296_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym297_modifier, _sym297_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym298_modifier, _sym298_mod_indices, 0, 0,0, -1,-1,},{57, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 15, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0
struct adl_operand _sym285_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym299[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88000000,},0, "", 0, 25, 25, 0, 6, _sym286_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym300[] = { &_sym28, &_sym18, &_sym70, &_sym44, &_sym40, &_sym66, &_sym20, 0, 0, 0, 0, 0, 0, &_sym34, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_

// Instruction rdx4_mmn0_
struct adl_operand _sym301_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 6, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 7, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 9, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 10, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 11, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 12, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 13, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 14, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 15, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 16, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 17, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{33, 18, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{34, 19, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 20, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 21, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 22, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 23, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 24, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 25, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 26, ADL_REGISTER, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 27, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 28, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 29, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym302[] = { &_sym28, &_sym18, &_sym70, &_sym20, &_sym2, &_sym6, &_sym44, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, &_sym38, 0, 0, 0, 0, 0, &_sym34, &_sym4, 0, 0, &_sym40, &_sym52, &_sym66,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_ind

// Shorthand:  rdx4_mmn0_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym305_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym305_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym306_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym306_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym307_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym307_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym308_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym308_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym309_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym309_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym310_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym310_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym311_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym311_mod_indices[] = { 9,  -1 };
struct adl_operand _sym304_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{20, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym305_modifier, _sym305_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym306_modifier, _sym306_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym307_modifier, _sym307_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym308_modifier, _sym308_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym309_modifier, _sym309_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym310_modifier, _sym310_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym311_modifier, _sym311_mod_indices, 0, 0,0, -1,-1,},{57, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 14, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_ind
struct adl_operand _sym303_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 125, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym312[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88002000,},0, "", 0, 20, 20, 0, 6, _sym304_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym313[] = { &_sym28, &_sym18, &_sym70, &_sym44, &_sym40, &_sym66, &_sym20, 0, 0, 0, 0, 0, &_sym34, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction set

// Shorthand:  set -> set_;

static bfd_uint64_t _sym316_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym316_mod_indices[] = { 0, 1,  -1 };

static bfd_uint64_t _sym317_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[2].X_add_number) ); }

static int _sym317_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym318_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[2].X_add_number) ); }

static int _sym318_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym319_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[2].X_add_number) ); }

static int _sym319_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym320_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[2].X_add_number) ); }

static int _sym320_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym321_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym321_mod_indices[] = { 0, 1,  -1 };
struct adl_operand _sym315_operands[] = { {51, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{60, 0, 0, 0, 0, 0, 0, 0, _sym316_modifier, _sym316_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym317_modifier, _sym317_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym318_modifier, _sym318_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym319_modifier, _sym319_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym320_modifier, _sym320_mod_indices, 0, 0,0, -1,-1,},{24, 0, 0, 0, 0, 0, 0, 0, _sym321_modifier, _sym321_mod_indices, 0, 0,0, -1,-1,},};

// Instruction set
struct adl_operand _sym314_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 2, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym322[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x4000000,},0, "", 0, 7, 7, 0, 1, _sym315_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym323[] = { &_sym56, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_

// Instruction set_
struct adl_operand _sym324_operands[] = { {51, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 1, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{60, 2, ADL_REGISTER, 0, 34, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 3, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 4, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 5, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 6, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 7, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym325[] = { &_sym56, &_sym24, 0, &_sym12, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_ind

// Shorthand:  set_ind -> set_;

static bfd_uint64_t _sym328_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[0].X_add_number) ); }

static int _sym328_mod_indices[] = { 0,  -1 };
struct adl_operand _sym327_operands[] = { {60, 0, 0, 0, 0, 0, 0, 0, _sym328_modifier, _sym328_mod_indices, 0, 0,0, -1,-1,},};

// Instruction set_ind
struct adl_operand _sym326_operands[] = { {85, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym329[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x6002000,},0, "", 0, 1, 1, 0, 0, _sym327_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym330[] = { 0,  (struct enum_fields *) -1,};

// Instruction stop

// Instruction stop
struct adl_operand _sym331_operands[] = {  0 };
struct enum_fields *_sym332[] = {  (struct enum_fields *) -1,};

// Instruction sync

// Instruction sync
struct adl_operand _sym333_operands[] = {  0 };
struct enum_fields *_sym334[] = {  (struct enum_fields *) -1,};

// Instruction wait

// Instruction wait
struct adl_operand _sym335_operands[] = { {17, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 1, 0, 0, 11, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym336[] = { &_sym16, 0,  (struct enum_fields *) -1,};

// Instruction win_mm0

// Shorthand:  win_mm0 -> win_mm0_;

static bfd_uint64_t _sym339_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_O_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym339_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym340_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_O_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym340_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym341_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_O_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym341_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym342_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_O_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym342_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym343_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (dest_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym343_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym344_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (dest_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym344_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym345_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym345_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym346_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (dest_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym346_mod_indices[] = { 3,  -1 };
struct adl_operand _sym338_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 1, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym339_modifier, _sym339_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym340_modifier, _sym340_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym341_modifier, _sym341_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym342_modifier, _sym342_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym343_modifier, _sym343_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym344_modifier, _sym344_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym345_modifier, _sym345_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym346_modifier, _sym346_mod_indices, 0, 0,0, -1,-1,},{6, 4, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 5, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 8, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mm0
struct adl_operand _sym337_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{86, 2, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_O_checker, 0,-1,-1,},{77, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_O_checker, 0,-1,-1,},{0, 4, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym347[] = {
  // win_mm0_    (0)
  { "win_mm0_", 16, 128, 128,  0xf, { 0x84000000,},0, "", 0, 15, 15, 0, 1, _sym338_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym348[] = { &_sym28, 0, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction win_mm0_

// Instruction win_mm0_
struct adl_operand _sym349_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 1, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 2, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 3, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 4, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 5, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 6, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 7, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 8, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 9, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 10, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{6, 11, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 14, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 15, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym350[] = { &_sym28, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction win_mm0_ind

// Shorthand:  win_mm0_ind -> win_mm0_;

static bfd_uint64_t _sym353_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_WR_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym353_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym354_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_WR_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym354_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym355_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_WR_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym355_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym356_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_WR_checker((operands[2].X_add_number),FALSE)) ); }

static int _sym356_mod_indices[] = { 2,  -1 };
struct adl_operand _sym352_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 1, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym353_modifier, _sym353_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym354_modifier, _sym354_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym355_modifier, _sym355_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym356_modifier, _sym356_mod_indices, 0, 0,0, -1,-1,},{6, 3, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 5, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 6, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 4, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 7, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mm0_ind
struct adl_operand _sym351_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_WR_checker, 0,-1,-1,},{0, 3, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym357[] = {
  // win_mm0_    (0)
  { "win_mm0_", 16, 128, 128,  0xf, { 0x84002000,},0, "", 0, 11, 11, 0, 1, _sym352_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym358[] = { &_sym28, 0, 0, 0, 0, 0, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction win_mmn0

// Shorthand:  win_mmn0 -> win_mmn0_;

static bfd_uint64_t _sym361_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym361_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym362_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym362_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym363_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym363_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym364_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_O_checker((operands[3].X_add_number),FALSE)) ); }

static int _sym364_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym365_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (dest_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym365_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym366_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (dest_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym366_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym367_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym367_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym368_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (dest_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym368_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym369_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym369_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym370_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym370_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym371_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym371_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym372_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym372_mod_indices[] = { 5,  -1 };
struct adl_operand _sym360_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 2, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym361_modifier, _sym361_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym362_modifier, _sym362_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym363_modifier, _sym363_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym364_modifier, _sym364_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym365_modifier, _sym365_mod_indices, 0, 0,0, -1,-1,},{10, 0, 0, 0, 0, 0, 0, 0, _sym366_modifier, _sym366_mod_indices, 0, 0,0, -1,-1,},{11, 0, 0, 0, 0, 0, 0, 0, _sym367_modifier, _sym367_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym368_modifier, _sym368_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym369_modifier, _sym369_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym370_modifier, _sym370_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym371_modifier, _sym371_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym372_modifier, _sym372_mod_indices, 0, 0,0, -1,-1,},{57, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 9, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 1, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 10, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mmn0
struct adl_operand _sym359_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{86, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_O_checker, 0,-1,-1,},{77, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_O_checker, 0,-1,-1,},{81, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym373[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84000000,},0, "", 0, 20, 20, 0, 2, _sym360_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym374[] = { &_sym28, &_sym40, 0, 0, 0, 0, 0, 0, &_sym34, 0, &_sym52,  (struct enum_fields *) -1,};

// Instruction win_mmn0_

// Instruction win_mmn0_
struct adl_operand _sym375_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 1, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 2, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 3, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 4, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 5, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 6, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 7, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 8, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 9, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 10, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 11, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{33, 12, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{34, 13, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 14, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 15, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 16, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 17, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 18, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 19, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 20, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym376[] = { &_sym28, &_sym24, 0, &_sym60, 0, 0, 0, &_sym12, 0, 0, 0, &_sym38, 0, 0, 0, 0, 0, &_sym34, 0, &_sym40, &_sym52,  (struct enum_fields *) -1,};

// Instruction win_mmn0_ind

// Shorthand:  win_mmn0_ind -> win_mmn0_;

static bfd_uint64_t _sym379_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[3].X_add_number) ); }

static int _sym379_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym380_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[3].X_add_number) ); }

static int _sym380_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym381_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[3].X_add_number) ); }

static int _sym381_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym382_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[3].X_add_number) ); }

static int _sym382_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym383_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym383_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym384_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym384_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym385_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym385_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym386_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym386_mod_indices[] = { 4,  -1 };
struct adl_operand _sym378_operands[] = { {25, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{72, 2, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 0, 0, 0, 0, 0, 0, 0, _sym379_modifier, _sym379_mod_indices, 0, 0,0, -1,-1,},{55, 0, 0, 0, 0, 0, 0, 0, _sym380_modifier, _sym380_mod_indices, 0, 0,0, -1,-1,},{56, 0, 0, 0, 0, 0, 0, 0, _sym381_modifier, _sym381_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym382_modifier, _sym382_mod_indices, 0, 0,0, -1,-1,},{35, 0, 0, 0, 0, 0, 0, 0, _sym383_modifier, _sym383_mod_indices, 0, 0,0, -1,-1,},{33, 0, 0, 0, 0, 0, 0, 0, _sym384_modifier, _sym384_mod_indices, 0, 0,0, -1,-1,},{34, 0, 0, 0, 0, 0, 0, 0, _sym385_modifier, _sym385_mod_indices, 0, 0,0, -1,-1,},{36, 0, 0, 0, 0, 0, 0, 0, _sym386_modifier, _sym386_mod_indices, 0, 0,0, -1,-1,},{57, 5, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 6, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{30, 8, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{37, 1, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 9, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mmn0_ind
struct adl_operand _sym377_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 5, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym387[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84002000,},0, "", 0, 16, 16, 0, 2, _sym378_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym388[] = { &_sym28, &_sym40, 0, 0, 0, 0, 0, &_sym34, 0, &_sym52,  (struct enum_fields *) -1,};

// Instructions named 'add'.
static struct adl_opcode _sym389[] = {
  // add    (0)
  { "add", 0, 128, 128,  0xf, { 0 },_sym84, "^ *(\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 3, _sym71_operands,_sym83,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'add_'.
static struct adl_opcode _sym390[] = {
  // add_    (0)
  { "add_", 16, 128, 128,  0xf, { 0xc000000,},_sym86, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, _sym85_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy'.
static struct adl_opcode _sym391[] = {
  // copy    (0)
  { "copy", 0, 128, 128,  0xf, { 0 },_sym98, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.keep_orig|\\.reset_values)? ([^,    ,,,,,, ]+) ([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+)", 0, 11, 11, 0, 3, _sym87_operands,_sym97,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.ind'.
static struct adl_opcode _sym392[] = {
  // copy_ind    (0)
  { "copy_ind", 0, 128, 128,  0xf, { 0 },_sym108, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.keep_orig|\\.reset_values)? ([^,    ,,,,, ]+) ([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+)", 0, 10, 10, 0, 3, _sym101_operands,_sym107,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy_'.
static struct adl_opcode _sym393[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94000000,},_sym100, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 18, 36, 0, 0, _sym99_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'evt'.
static struct adl_opcode _sym394[] = {
  // evt    (0)
  { "evt", 16, 128, 128,  0xf, { 0x24000000,},_sym110, "^ *(\\.low|\\.high)? ([^,  ]+)", 0, 2, 2, 0, 1, _sym109_operands,0,0,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir'.
static struct adl_opcode _sym395[] = {
  // fir    (0)
  { "fir", 0, 128, 128,  0xf, { 0 },_sym126, "^ *(\\.real|\\.cmplx|\\.noinit|\\.init)? (\\.real|\\.cmplx|\\.noinit|\\.init)? ([^,    ,,,,, ]+) ([^,    ,,,,, ]+) ([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 10, 10, 0, 2, _sym111_operands,_sym125,1,2, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.ind'.
static struct adl_opcode _sym396[] = {
  // fir_ind    (0)
  { "fir_ind", 0, 128, 128,  0xf, { 0 },_sym140, "^ *(\\.real|\\.cmplx|\\.noinit|\\.init)? (\\.real|\\.cmplx|\\.noinit|\\.init)? ([^,    ,,,, ]+) ([^,    ,,,, ]+) ([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 9, 9, 0, 2, _sym129_operands,_sym139,1,2, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir_'.
static struct adl_opcode _sym397[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4000000,},_sym128, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 20, 40, 0, 0, _sym127_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get'.
static struct adl_opcode _sym398[] = {
  // get    (0)
  { "get", 0, 128, 128,  0xf, { 0 },_sym149, "^ *([^,, ]+),([^,, ]+)", 0, 2, 2, 0, 0, _sym141_operands,_sym148,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get.ind'.
static struct adl_opcode _sym399[] = {
  // get_ind    (0)
  { "get_ind", 0, 128, 128,  0xf, { 0 },_sym156, "^ *([^, ]+)", 0, 1, 1, 0, 0, _sym152_operands,_sym155,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get_'.
static struct adl_opcode _sym400[] = {
  // get_    (0)
  { "get_", 16, 128, 128,  0xf, { 0x8000000,},_sym151, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 6, 12, 0, 0, _sym150_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'loop'.
static struct adl_opcode _sym401[] = {
  // loop    (0)
  { "loop", 16, 128, 128,  0xf, { 0x14000000,},_sym158, "^ *([^ ,\t,]+)", 0, 1, 2, 0, 0, _sym157_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'next'.
static struct adl_opcode _sym402[] = {
  // next    (0)
  { "next", 16, 128, 128,  0xf, { 0x18000000,},_sym160, "^", 0, 0, 0, 0, 0, _sym159_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'pdma'.
static struct adl_opcode _sym403[] = {
  // pdma    (0)
  { "pdma", 0, 128, 128,  0xf, { 0 },_sym168, "^ *(\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? ([^,     ,,,,, ]+) ([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+)", 0, 11, 11, 0, 4, _sym161_operands,_sym167,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'pdma.ind'.
static struct adl_opcode _sym404[] = {
  // pdma_ind    (0)
  { "pdma_ind", 0, 128, 128,  0xf, { 0 },_sym175, "^ *(\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? ([^,     ,,,,, ]+) ([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+)", 0, 11, 11, 0, 4, _sym171_operands,_sym174,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'pdma_'.
static struct adl_opcode _sym405[] = {
  // pdma_    (0)
  { "pdma_", 16, 128, 128,  0xf, { 0xa0000000,},_sym170, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, _sym169_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2'.
static struct adl_opcode _sym406[] = {
  // rdx2    (0)
  { "rdx2", 0, 128, 128,  0xf, { 0 },_sym191, "^ *(\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256)? (\\.round2|\\.round3|\\.round4|\\.round5) ([^,      ,,,,, ]+) ([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 12, 12, 0, 4, _sym176_operands,_sym190,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv'.
static struct adl_opcode _sym407[] = {
  // rdx2_adptv    (0)
  { "rdx2_adptv", 0, 128, 128,  0xf, { 0 },_sym210, "^ *(\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,,, +]+) (\\.round2|\\.round3|\\.round4|\\.round5) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 15, 15, 0, 7, _sym194_operands,_sym209,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.ind'.
static struct adl_opcode _sym408[] = {
  // rdx2_ind    (0)
  { "rdx2_ind", 0, 128, 128,  0xf, { 0 },_sym222, "^ *(\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext)? (\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256)? (\\.round2|\\.round3|\\.round4|\\.round5) ([^,      ,,,, ]+) ([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 11, 11, 0, 3, _sym211_operands,_sym221,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.ind.adptv'.
static struct adl_opcode _sym409[] = {
  // rdx2_ind_adptv    (0)
  { "rdx2_ind_adptv", 0, 128, 128,  0xf, { 0 },_sym235, "^ *(\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nosplit|\\.opsplit|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,, +]+) (\\.round2|\\.round3|\\.round4|\\.round5) ([^,         ,,,, ]+) ([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 14, 14, 0, 6, _sym223_operands,_sym234,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2_'.
static struct adl_opcode _sym410[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c000000,},_sym193, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 26, 52, 0, 0, _sym192_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4'.
static struct adl_opcode _sym411[] = {
  // rdx4_mmn0    (0)
  { "rdx4_mmn0", 0, 128, 128,  0xf, { 0 },_sym300, "^ *(\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5) ([^,        ,,,,,,, ]+) ([^,        ,,,,,,, ]+),([^,        ,,,,,,, ]+),([^,        ,,,,,,, ]+),([^,        ,,,,,,, ]+),([^,        ,,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 16, 16, 0, 6, _sym285_operands,_sym299,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
  // rdx4_mm0    (1)
  { "rdx4_mm0", 0, 128, 128,  0xf, { 0 },_sym274, "^ *(\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5) ([^,       ,,,,,, ]+) ([^,       ,,,,,, ]+),([^,       ,,,,,, ]+),([^,       ,,,,,, ]+),([^,       ,,,,,, ]+),([^,       ,,,,,, ]+),([^,       ,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 14, 14, 0, 5, _sym263_operands,_sym273,1,5, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'rdx4.adptv'.
static struct adl_opcode _sym412[] = {
  // rdx4_adptv_mmn0    (0)
  { "rdx4_adptv_mmn0", 0, 128, 128,  0xf, { 0 },_sym251, "^ *(\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,,,,, +]+) (\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5) ([^,           ,,,,,,, ]+) ([^,           ,,,,,,, ]+),([^,           ,,,,,,, ]+),([^,           ,,,,,,, ]+),([^,           ,,,,,,, ]+),([^,           ,,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,           ,,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 19, 19, 0, 9, _sym236_operands,_sym250,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.ind'.
static struct adl_opcode _sym413[] = {
  // rdx4_mmn0_ind    (0)
  { "rdx4_mmn0_ind", 0, 128, 128,  0xf, { 0 },_sym313, "^ *(\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5) ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 15, 15, 0, 6, _sym303_operands,_sym312,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
  // rdx4_mm0_ind    (1)
  { "rdx4_mm0_ind", 0, 128, 128,  0xf, { 0 },_sym284, "^ *(\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128)? (\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5) ([^,       ,,,,, ]+) ([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),([^,       ,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 13, 13, 0, 5, _sym277_operands,_sym283,1,5, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'rdx4.ind.adptv'.
static struct adl_opcode _sym414[] = {
  // rdx4_adptv_mmn0_ind    (0)
  { "rdx4_adptv_mmn0_ind", 0, 128, 128,  0xf, { 0 },_sym262, "^ *(\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.nofft16|\\.fft16|\\.nowin|\\.win|\\.noqext|\\.qext|\\.const|\\.caddr|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,,,, +]+) (\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,           ,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 18, 18, 0, 9, _sym252_operands,_sym261,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4_mm0_'.
static struct adl_opcode _sym415[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 16, 128, 128,  0xf, { 0x88000000,},_sym276, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 21, 42, 0, 0, _sym275_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4_mmn0_'.
static struct adl_opcode _sym416[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88000000,},_sym302, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 30, 60, 0, 0, _sym301_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set'.
static struct adl_opcode _sym417[] = {
  // set    (0)
  { "set", 0, 128, 128,  0xf, { 0 },_sym323, "^ *(\\.immed|\\.reg)? ([^, , ]+),([^, , ]+)", 0, 3, 3, 0, 1, _sym314_operands,_sym322,1,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.ind'.
static struct adl_opcode _sym418[] = {
  // set_ind    (0)
  { "set_ind", 0, 128, 128,  0xf, { 0 },_sym330, "^ *([^, ]+)", 0, 1, 1, 0, 0, _sym326_operands,_sym329,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set_'.
static struct adl_opcode _sym419[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x4000000,},_sym325, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 8, 16, 0, 0, _sym324_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'stop'.
static struct adl_opcode _sym420[] = {
  // stop    (0)
  { "stop", 16, 128, 128,  0xf, { 0x10000000,},_sym332, "^", 0, 0, 0, 0, 0, _sym331_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'sync'.
static struct adl_opcode _sym421[] = {
  // sync    (0)
  { "sync", 16, 128, 128,  0xf, { 0x1c000000,},_sym334, "^", 0, 0, 0, 0, 0, _sym333_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'wait'.
static struct adl_opcode _sym422[] = {
  // wait    (0)
  { "wait", 16, 128, 128,  0xf, { 0x20000000,},_sym336, "^ *(\\.l0|\\.l1|\\.pos|\\.neg)? ([^,  ]+)", 0, 2, 2, 0, 1, _sym335_operands,0,0,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win'.
static struct adl_opcode _sym423[] = {
  // win_mmn0    (0)
  { "win_mmn0", 0, 128, 128,  0xf, { 0 },_sym374, "^ *(\\.real|\\.cmplx|\\.const|\\.caddr)? (\\.real|\\.cmplx|\\.const|\\.caddr)? ([^,   ,,,,,,, ]+) ([^,   ,,,,,,, ]+),([^,   ,,,,,,, ]+),([^,   ,,,,,,, ]+),([^,   ,,,,,,, ]+),([^,   ,,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,   ,,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 11, 11, 0, 2, _sym359_operands,_sym373,1,2, 0,0,0,{}, 0,0,0,0,0,0, },
  // win_mm0    (1)
  { "win_mm0", 0, 128, 128,  0xf, { 0 },_sym348, "^ *(\\.real|\\.cmplx)? ([^,  ,,,,,, ]+) ([^,  ,,,,,, ]+),([^,  ,,,,,, ]+),([^,  ,,,,,, ]+),([^,  ,,,,,, ]+),([^,  ,,,,,, ]+),([^,  ,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 9, 9, 0, 1, _sym337_operands,_sym347,1,1, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'win.ind'.
static struct adl_opcode _sym424[] = {
  // win_mmn0_ind    (0)
  { "win_mmn0_ind", 0, 128, 128,  0xf, { 0 },_sym388, "^ *(\\.real|\\.cmplx|\\.const|\\.caddr)? (\\.real|\\.cmplx|\\.const|\\.caddr)? ([^,   ,,,,,, ]+) ([^,   ,,,,,, ]+),([^,   ,,,,,, ]+),([^,   ,,,,,, ]+),([^,   ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,   ,,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 10, 10, 0, 2, _sym377_operands,_sym387,1,2, 0,0,0,{}, 0,0,0,0,0,0, },
  // win_mm0_ind    (1)
  { "win_mm0_ind", 0, 128, 128,  0xf, { 0 },_sym358, "^ *(\\.real|\\.cmplx)? ([^,  ,,,,, ]+) ([^,  ,,,,, ]+),([^,  ,,,,, ]+),([^,  ,,,,, ]+),([^,  ,,,,, ]+),([^,  ,,,,, ]+),(\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)?", 0, 8, 8, 0, 1, _sym351_operands,_sym357,1,1, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'win_mm0_'.
static struct adl_opcode _sym425[] = {
  // win_mm0_    (0)
  { "win_mm0_", 16, 128, 128,  0xf, { 0x84000000,},_sym350, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 16, 32, 0, 0, _sym349_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win_mmn0_'.
static struct adl_opcode _sym426[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84000000,},_sym376, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 21, 42, 0, 0, _sym375_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instruction table.
static struct adl_instr other_instructions [] = {
  { "add", 1, _sym389 },
  { "add_", 1, _sym390 },
  { "copy", 1, _sym391 },
  { "copy.ind", 1, _sym392 },
  { "copy_", 1, _sym393 },
  { "evt", 1, _sym394 },
  { "fir", 1, _sym395 },
  { "fir.ind", 1, _sym396 },
  { "fir_", 1, _sym397 },
  { "get", 1, _sym398 },
  { "get.ind", 1, _sym399 },
  { "get_", 1, _sym400 },
  { "loop", 1, _sym401 },
  { "next", 1, _sym402 },
  { "pdma", 1, _sym403 },
  { "pdma.ind", 1, _sym404 },
  { "pdma_", 1, _sym405 },
  { "rdx2", 1, _sym406 },
  { "rdx2.adptv", 1, _sym407 },
  { "rdx2.ind", 1, _sym408 },
  { "rdx2.ind.adptv", 1, _sym409 },
  { "rdx2_", 1, _sym410 },
  { "rdx4", 2, _sym411 },
  { "rdx4.adptv", 1, _sym412 },
  { "rdx4.ind", 2, _sym413 },
  { "rdx4.ind.adptv", 1, _sym414 },
  { "rdx4_mm0_", 1, _sym415 },
  { "rdx4_mmn0_", 1, _sym416 },
  { "set", 1, _sym417 },
  { "set.ind", 1, _sym418 },
  { "set_", 1, _sym419 },
  { "stop", 1, _sym420 },
  { "sync", 1, _sym421 },
  { "wait", 1, _sym422 },
  { "win", 2, _sym423 },
  { "win.ind", 2, _sym424 },
  { "win_mm0_", 1, _sym425 },
  { "win_mmn0_", 1, _sym426 },
};

static const int num_other_instructions = 38;

static const struct adl_name_pair ppc_regnames[] = {
  {"or0",0},
  {"or1",1},
  {"or2",2},
  {"or3",3},
  {"or4",4},
  {"or5",5},
  {"or6",6},
  {"or7",7},
  {"or8",8},
  {"or9",9},
  {"or10",10},
  {"or11",11},
  {"or12",12},
  {"or13",13},
  {"or14",14},
  {"or15",15},
  {"or16",16},
  {"or17",17},
  {"or18",18},
  {"or19",19},
  {"or20",20},
  {"or21",21},
  {"or22",22},
  {"or23",23},
  {"or24",24},
  {"or25",25},
  {"or26",26},
  {"or27",27},
  {"or28",28},
  {"or29",29},
  {"or30",30},
  {"or31",31},
  {"or32",32},
  {"or33",33},
  {"or34",34},
  {"or35",35},
  {"or36",36},
  {"or37",37},
  {"or38",38},
  {"or39",39},
  {"or40",40},
  {"or41",41},
  {"or42",42},
  {"or43",43},
  {"or44",44},
  {"or45",45},
  {"or46",46},
  {"or47",47},
  {"or48",48},
  {"or49",49},
  {"or50",50},
  {"or51",51},
  {"r0",0},
  {"r1",1},
  {"r2",2},
  {"r3",3},
  {"r4",4},
  {"r5",5},
  {"r6",6},
  {"r7",7},
  {"r8",8},
  {"r9",9},
  {"r10",10},
  {"r11",11},
  {"r12",12},
  {"r13",13},
  {"r14",14},
  {"r15",15},
  {"r16",16},
  {"r17",17},
  {"r18",18},
  {"r19",19},
  {"r20",20},
  {"r21",21},
  {"r22",22},
  {"r23",23},
  {"r24",24},
  {"r25",25},
  {"r26",26},
  {"r27",27},
  {"r28",28},
  {"r29",29},
  {"r30",30},
  {"r31",31},
  {"r32",32},
  {"r33",33},
  {"r34",34},
  {"r35",35},
  {"r36",36},
  {"r37",37},
  {"r38",38},
  {"r39",39},
  {"tr0",0},
  {"tr1",1},
  {"tr2",2},
  {"tr3",3},
  {"tr4",4},
  {"tr5",5},
  {"tr6",6},
  {"tr7",7},
  {"tr8",8},
  {"tr9",9},
  {"tr10",10},
  {"tr11",11},
  {"tr12",12},
  {"tr13",13},
  {"tr14",14},
  {"tr15",15},
  {"tr16",16},
  {"tr17",17},
  {"tr18",18},
  {"tr19",19},
  {"tr20",20},
  {"tr21",21},
  {"tr22",22},
  {"tr23",23},
  {"tr24",24},
  {"tr25",25},
  {"tr26",26},
  {"tr27",27},
  {"tr28",28},
  {"tr29",29},
  {"tr30",30},
  {"tr31",31},
  {"tr32",32},
  {"tr33",33},
  {"tr34",34},
  {"tr35",35},
  {"wr0",0},
  {"wr1",1},
  {"wr2",2},
  {"wr3",3},
  {"wr4",4},
  {"wr5",5},
  {"wr6",6},
  {"wr7",7},
  {"wr8",8},
  {"wr9",9},
  {"wr10",10},
  {"wr11",11},
  {"wr12",12},
  {"wr13",13},
  {"wr14",14},
  {"wr15",15},
  {"wr16",16},
  {"wr17",17},
  {"wr18",18},
  {"wr19",19},
  {"wr20",20},
  {"wr21",21},
  {"wr22",22},
  {"wr23",23},
  {"wr24",24},
  {"wr25",25},
  {"wr26",26},
  {"wr27",27},
  {"wr28",28},
  {"wr29",29},
  {"wr30",30},
  {"wr31",31},
  {"wr32",32},
  {"wr33",33},
  {"wr34",34},
  {"wr35",35},
  {"wr36",36},
  {"wr37",37},
  {"wr38",38},
  {"wr39",39},
  {"wr40",40},
  {"wr41",41},
  {"wr42",42},
  {"wr43",43},
  {"wr44",44},
  {"wr45",45},
  {"wr46",46},
  {"wr47",47},
};

static const int num_ppc_regnames = 176;

static const char *ppc_itnames[] = {
  "default",
};


static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(1,0,2,32,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_PPC_ADDR32",0,0x0,0xffffffff,0), // relocation R_PPC_ADDR32 (R_PPC_ADDR32)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos = 2;

// Relocations ordered by name, for fast name -> type searches.
static struct adl_name_pair ppc_relocs_by_index [] = {
   { "R_PPC_ADDR32", 0 }, // R_PPC_ADDR32
};

static const int num_ppc_relocs_by_index = 1;


// Relocation offsets.
static struct adl_int_pair ppc_reloc_offsets [] = {
   { 1,4 }, // R_PPC_ADDR32
};

static const int num_ppc_reloc_offsets = 1;

static const char *instr_names[] = {
  "add",
  "add_",
  "copy",
  "copy.ind",
  "copy_",
  "evt",
  "fir",
  "fir.ind",
  "fir_",
  "get",
  "get.ind",
  "get_",
  "loop",
  "next",
  "pdma",
  "pdma.ind",
  "pdma_",
  "rdx2",
  "rdx2.adptv",
  "rdx2.ind",
  "rdx2.ind.adptv",
  "rdx2_",
  "rdx4",
  "rdx4.adptv",
  "rdx4.ind",
  "rdx4.ind.adptv",
  "rdx4_mm0_",
  "rdx4_mmn0_",
  "set",
  "set.ind",
  "set_",
  "stop",
  "sync",
  "wait",
  "win",
  "win.ind",
  "win_mm0_",
  "win_mmn0_",
};

static int num_instr_names = 38;

static const char *instr_pfx_fields[] = {
   0 };

static int num_instr_pfx_fields = 0;

//
// Helper code.
//

 unsigned get_bank ( unsigned x ) {
      if ( x & 0x8000 ) return ( x >> 12 ) & 0x3 ; else return 0 ;
}

 unsigned get_col ( unsigned isreg , unsigned x ) {
      if ( ! isreg ) return 0 ; else if ( x & 0xc000 ) return ( x >> 3 ) & 0x1FF ; else return ( x >> 3 ) & 0x3F ;
}

 unsigned long long get_imm_dat ( unsigned isreg , unsigned long long x ) {
      return isreg ? 0 : x ;
}

 unsigned get_mode ( unsigned x ) {
      return x >> 14 ;
}

 unsigned get_slice ( unsigned x ) {
      if ( x & 0xc000 ) return ( x & 7 ) ; else return 0 ;
}


static struct adl_asm_instr asm_instrs[] = {
   {"",0 } 
};
static int num_asm_instrs = 0;
static int internal_current_table = 0;
static bool show_warnings = false;
static struct hash_control *instr_hash[1];

static struct hash_control *reg_hash;

static struct hash_control *asm_instr_hash;

static struct hash_control *instr_pfx_fields_hash;

static const char *terminating_chars     = "\t .";

static const char *min_terminating_chars = "\t ";

static bool setup_endianness()
{
  adl_setup_endianness(true); return true;
}

static bool setup_endianness_var = setup_endianness();

void md_begin()
{
  adl_setup_general(min_terminating_chars,terminating_chars,0,0,0,0,0,init_queue_size, show_warnings, false,16);
  adl_setup_comments(init_comment_strs, init_num_comment_strs, init_line_comment_strs, init_num_line_comment_strs);
  adl_setup_instrfields(ppc_operands, num_ppc_operands,ppc_operands_by_index, num_ppc_operands_by_index);
  adl_setup_grouping(packet_begin_chars, packet_end_chars);
  adl_setup_prefix(pfx_queue, 0,0,0,reset_prefix_counters);
  adl_setup_relocations(ppc_elf_howto_table,num_ppc_elf_howtos,ppc_relocs_by_index,num_ppc_relocs_by_index,ppc_reloc_offsets,num_ppc_reloc_offsets);
  instr_hash[0] = adl_setup_instructions(other_instructions,num_other_instructions,ppc_operands);
  reg_hash = adl_setup_name_hash(ppc_regnames,num_ppc_regnames,"register");
  asm_instr_hash = 0;
  instr_pfx_fields_hash = 0;
}

std::string adl_asm_version = "8.17";

extern "C" void md_assemble(char *str)
{
  adl_assemble(str,instr_hash[internal_current_table],asm_instr_hash,reg_hash,instr_pfx_fields_hash,30,internal_current_table,ppc_itnames[internal_current_table]);
}

extern "C" void md_apply_fix (fixS *fixP ,valueT *valP ,segT seg)
{
  adl_apply_fix(fixP,valP,seg);
}

int ppc_parse_option(int,char*);

extern "C" int md_parse_option (int c,char *arg)
{
  if (c == 'd') {
    show_warnings = TRUE;
    return 1;
  } else if (c == 'm') {
    if (!strcmp(arg,"default")) {
      internal_current_table = 0;
      return 1;
    }
  }
  return ppc_parse_option(c,arg);
}

void ppc_show_usage(FILE*);

extern "C" void md_show_usage (FILE *stream ATTRIBUTE_UNUSED)
{
  fprintf (stream,
  "\nInstruction-selection options:\n\n"
  "-mdefault		Select the default instruction table.\n"
  "-d			Show debugging warnings about undefined symbols.\n"
  );
  ppc_show_usage(stream);
}

extern "C" void adl_get_instr_names(const char ***names, int *num_names)
{
  *names = instr_names;
  *num_names = num_instr_names;
};

extern "C" void adl_get_instr_ops(const struct adl_name_pair **names, int* num_names)
{
  *names = ppc_regnames;
  *num_names = num_ppc_regnames;
}

extern "C" bfd_boolean  dt_debug(void);

extern "C" bfd_boolean  dt_debug(void)
{
  #ifdef _DEVTECH_DEBUG_
  return TRUE;
  #else
  return FALSE;
  #endif
}

