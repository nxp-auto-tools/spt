/*
	
	Assembler code implementation file for ppc generated by ADL.
	
	*/

#ifndef _MSC_VER
extern "C" {
  #  include "as.h"
}
#endif

#include <stdio.h>
#include <sstream>
#include <string>

extern "C" {
  #  include "as.h"
  #  include "bfd/elf-bfd.h"
  #  include "bfd/bfd.h"
  #  include "bfd/libbfd.h"
}

#define __NO_RNUMBER__

#include "adl-asm-impl.h"
#include "adl-asm-info.h"

#include "helpers/Macros.h"
#include "helpers/le_sintbv.h"
#define bits le_intbv
#define sbits le_sintbv

#define ns_bits le_intbv
#define ns_sbits le_sintbv

#include "helpers/LogUsage.h"
#include "helpers/TypeConv.h"
extern "C" {
  #include "tc-ppc.h"
}

using namespace adl;



/* Figure out the BFD architecture to use.  These functions 
   are called well before md_begin, when the output file is opened.  */ 

enum bfd_architecture ppc_arch () 
{
  return ADL_TARGET_ARCH;
}

const char adl_parallel_separator_chars[] = "";
const char adl_symbol_chars[] = "";
const char comment_chars[] = "#";
const char line_comment_chars[] = "#";
const char line_separator_chars[] = "";
const char packet_begin_chars[] = "";
const char packet_end_chars[] = "";
static const char *init_comment_strs[] = { 0 };
static int init_num_comment_strs = 0;
static const char *init_line_comment_strs[] = { 0 };
static int init_num_line_comment_strs = 0;
static int init_queue_size = 1;
unsigned long ppc_mach ()
{
  return default_adl_mach();
}

extern char*
ppc_target_format ()
{
  return default_adl_target_format();
}



// Prefix variables.
struct adl_prefix_field *pfx_fields0[] = { 0 };
struct adl_prefix_fields pfx_queue[] = {{pfx_fields0},};
// Prefix counters.

static void reset_prefix_counters()
{
}

 unsigned get_bank ( unsigned x );
 unsigned get_col ( unsigned notzero , unsigned x );
 unsigned long long get_imm_dat ( unsigned isreg , unsigned long long x );
 unsigned get_loop_immed ( unsigned mode , unsigned val );
 unsigned get_loop_wr ( unsigned mode , unsigned val );
 unsigned get_maxsN ( unsigned x );
 unsigned get_mode ( unsigned x );
 unsigned get_slice ( unsigned x );
 unsigned is_maxsN ( unsigned x );
//
// Instruction field inserter functions.
//

static  void set_adptv_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 18);
}

static  void set_adptv_ofst_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7) << 25);
}

static  void set_adptv_shft_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 17);
}

static  void set_adptv_wrnum_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3f) << 10);
}

static  void set_bin_sz_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 18);
}

static  void set_blk_dest_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7f) << 16);
}

static  void set_blk_src_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xff) << 24);
}

static  void set_cc_im_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xffff) << 16);
}

static  void set_cc_re_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff) << 16);
}

static  void set_cp_type_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 16);
}

static  void set_cyc_extn_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 17);
}

static  void set_dat_sz_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x1));
}

static  void set_data_packing_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f) << 18);
}

static  void set_dest_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 12);
}

static  void set_dest_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x1ff) << 3);
}

static  void set_dest_add_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xff));
}

static  void set_dest_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 14);
}

static  void set_dest_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7));
}

static  void set_dest_add_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7ff) << 3);
}

static  void set_ev_lvl_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_ev_tr_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_evt_ev_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_extra_offset_val_im_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff));
}

static  void set_fft_rnd_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 20);
}

static  void set_fft_rnd_rdx2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 20);
}

static  void set_hist_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 20);
}

static  void set_ima_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 13);
}

static  void set_ima2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_imdt_offset_val_im_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff) << 16);
}

static  void set_imm_dat_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffffffff));
  val >>=   0x20;
  x[2] |= ((val&0xffff));
}

static  void set_in_dattyp_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_in_dattyp2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_in_dattyp_vmt_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 24);
}

static  void set_in_pack_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 14);
}

static  void set_in_tag_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 20);
}

static  void set_init_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 20);
}

static  void set_ip_pack_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 14);
}

static  void set_jmp_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xffffffff));
}

static  void set_jmp_sel_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 21);
}

static  void set_jmp_type_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_jmp_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3f) << 19);
}

static  void set_load_chrp_cntr_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_loc_n_abs_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_loop_wrnum_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3f) << 19);
}

static  void set_lp_cnt_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xffff));
}

static  void set_mask_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff) << 16);
}

static  void set_maxsn_en_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 16);
}

static  void set_maxsn_sel_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3) << 16);
}

static  void set_mca_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x1ff) << 16);
}

static  void set_mca_mod_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xf) << 28);
}

static  void set_modulo_val_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f));
}

static  void set_mult_coef_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_mult_coef_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_mult_coef_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_mult_coef_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_mult_mod_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3) << 8);
}

static  void set_no_of_taps_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 16);
}

static  void set_op_pack_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 16);
}

static  void set_opram_continuous_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xff) << 24);
  val >>=   0x8;
  x[2] |= ((val&0xf));
}

static  void set_opram_mem_start_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_opram_mem_start_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_opram_mem_start_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_opram_mem_start_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_opram_skip_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xfff) << 4);
}

static  void set_opsq1_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_opsq2s1_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 21);
}

static  void set_opsq2s2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 18);
}

static  void set_opsq2s3_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 17);
}

static  void set_pack_en_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 14);
}

static  void set_pdma_tag_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_pre_proc_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 22);
}

static  void set_quad_ext_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 16);
}

static  void set_re_im_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_re_im_coeff_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 23);
}

static  void set_real_fft_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_repeat_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 14);
}

static  void set_repeat2_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 14);
}

static  void set_rst_acc_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 21);
}

static  void set_rst_acc_vmt_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_rst_n_keep_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 15);
}

static  void set_se_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 24);
}

static  void set_sel_src1_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3) << 28);
}

static  void set_sel_src1_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x1ff) << 19);
}

static  void set_sel_src1_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3) << 30);
}

static  void set_sel_src1_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7) << 16);
}

static  void set_sel_src3_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 12);
}

static  void set_sel_src3_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 3);
}

static  void set_sel_src3_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 14);
}

static  void set_sel_src3_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7));
}

static  void set_sel_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3f) << 19);
}

static  void set_shft_ofst_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7) << 25);
}

static  void set_shft_src_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x1) << 7);
}

static  void set_shft_val_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x7) << 4);
}

static  void set_shft_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3f) << 10);
}

static  void set_shift_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 24);
}

static  void set_src_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_src2_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_src2_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_src2_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_src2_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_src2_add_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_src_add_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 28);
}

static  void set_src_add_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x1ff) << 19);
}

static  void set_src_add_inc_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0xff) << 8);
}

static  void set_src_add_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x3) << 30);
}

static  void set_src_add_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7) << 16);
}

static  void set_src_add_wr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0x7ff) << 19);
}

static  void set_src_loop_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_sync_async_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 16);
}

static  void set_sysram_continous_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xfff));
}

static  void set_sysram_mem_start_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[1] |= ((val&0xffffffff));
}

static  void set_sysram_skip_addr_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xfff) << 12);
}

static  void set_tag_n_bitfld_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 18);
}

static  void set_tap_coef_bank_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 28);
}

static  void set_tap_coef_col_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x1ff) << 19);
}

static  void set_tap_coef_mode_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x3) << 30);
}

static  void set_tap_coef_slice_width_128(unsigned *x, bfd_uint64_t val) {
  x[2] |= ((val&0x7) << 16);
}

static  void set_thld_add_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffff));
}

static  void set_thld_cmp_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 21);
}

static  void set_threshold_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0x3f) << 10);
}

static  void set_trans_type_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 17);
}

static  void set_tw_ovs_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xf));
}

static  void set_vec_sz_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1fff));
}

static  void set_vector_len_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xffff));
}

static  void set_wait_ev_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f) << 16);
}

static  void set_wdog_cnt_width_128(unsigned *x, bfd_uint64_t val) {
  x[3] |= ((val&0xffffff));
}

static  void set_wdog_ev_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_wdog_op_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 20);
}

static  void set_win_type_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 23);
}

static  void set_win_type_rdx_width_128(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 23);
}


//
// Instruction field clearer functions.
//

static  void clear_adptv_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x40000);
  
}

static  void clear_adptv_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xe000000);
  
}

static  void clear_adptv_shft_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x20000);
  
}

static  void clear_adptv_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfc00);
  
}

static  void clear_bin_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc0000);
  
}

static  void clear_blk_dest_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x7f0000);
  
}

static  void clear_blk_src_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff000000);
  
}

static  void clear_cc_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffff0000);
  
}

static  void clear_cc_re_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff0000);
  
}

static  void clear_cp_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0000);
  
}

static  void clear_cyc_extn_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x20000);
  
}

static  void clear_dat_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1);
  
}

static  void clear_data_packing_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7c0000);
  
}

static  void clear_dest_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x3000);
  
}

static  void clear_dest_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff8);
  
}

static  void clear_dest_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff);
  
}

static  void clear_dest_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xc000);
  
}

static  void clear_dest_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x7);
  
}

static  void clear_dest_add_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x3ff8);
  
}

static  void clear_ev_lvl_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_ev_tr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_evt_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_extra_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff);
  
}

static  void clear_fft_rnd_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x700000);
  
}

static  void clear_fft_rnd_rdx2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x700000);
  
}

static  void clear_hist_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300000);
  
}

static  void clear_ima_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000);
  
}

static  void clear_ima2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_imdt_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff0000);
  
}

static  void clear_imm_dat_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffff);
    x[3] = x[3] & (~0xffffffff);
  
}

static  void clear_in_dattyp_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_in_dattyp2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_in_dattyp_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1000000);
  
}

static  void clear_in_pack_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc000);
  
}

static  void clear_in_tag_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x100000);
  
}

static  void clear_init_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x100000);
  
}

static  void clear_ip_pack_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc000);
  
}

static  void clear_jmp_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xffffffff);
  
}

static  void clear_jmp_sel_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1e00000);
  
}

static  void clear_jmp_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_jmp_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x1f80000);
  
}

static  void clear_load_chrp_cntr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_loc_n_abs_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_loop_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x1f80000);
  
}

static  void clear_lp_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff);
  
}

static  void clear_mask_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff0000);
  
}

static  void clear_maxsn_en_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x10000);
  
}

static  void clear_maxsn_sel_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x30000);
  
}

static  void clear_mca_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x1ff0000);
  
}

static  void clear_mca_mod_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xf0000000);
  
}

static  void clear_modulo_val_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1f);
  
}

static  void clear_mult_coef_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_mult_coef_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_mult_coef_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_mult_coef_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_mult_mod_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x300);
  
}

static  void clear_no_of_taps_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0000);
  
}

static  void clear_op_pack_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x10000);
  
}

static  void clear_opram_continuous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xf);
    x[3] = x[3] & (~0xff000000);
  
}

static  void clear_opram_mem_start_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_opram_mem_start_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_opram_mem_start_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_opram_mem_start_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_opram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xfff0);
  
}

static  void clear_opsq1_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_opsq2s1_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x600000);
  
}

static  void clear_opsq2s2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c0000);
  
}

static  void clear_opsq2s3_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x20000);
  
}

static  void clear_pack_en_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc000);
  
}

static  void clear_pdma_tag_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_pre_proc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc00000);
  
}

static  void clear_quad_ext_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x10000);
  
}

static  void clear_re_im_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_re_im_coeff_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1800000);
  
}

static  void clear_real_fft_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_repeat_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc000);
  
}

static  void clear_repeat2_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc000);
  
}

static  void clear_rst_acc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x200000);
  
}

static  void clear_rst_acc_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_rst_n_keep_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x8000);
  
}

static  void clear_se_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1000000);
  
}

static  void clear_sel_src1_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x30000000);
  
}

static  void clear_sel_src1_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xff80000);
  
}

static  void clear_sel_src1_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xc0000000);
  
}

static  void clear_sel_src1_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x70000);
  
}

static  void clear_sel_src3_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x3000);
  
}

static  void clear_sel_src3_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff8);
  
}

static  void clear_sel_src3_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc000);
  
}

static  void clear_sel_src3_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x7);
  
}

static  void clear_sel_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x1f80000);
  
}

static  void clear_shft_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xe000000);
  
}

static  void clear_shft_src_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x80);
  
}

static  void clear_shft_val_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0x70);
  
}

static  void clear_shft_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfc00);
  
}

static  void clear_shift_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1000000);
  
}

static  void clear_src_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_src2_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_src2_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_src2_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_src2_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_src2_add_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_src_add_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x30000000);
  
}

static  void clear_src_add_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xff80000);
  
}

static  void clear_src_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff00);
  
}

static  void clear_src_add_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xc0000000);
  
}

static  void clear_src_add_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x70000);
  
}

static  void clear_src_add_wr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0x3ff80000);
  
}

static  void clear_src_loop_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_sync_async_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x10000);
  
}

static  void clear_sysram_continous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfff);
  
}

static  void clear_sysram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[1] = x[1] & (~0xffffffff);
  
}

static  void clear_sysram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfff000);
  
}

static  void clear_tag_n_bitfld_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x40000);
  
}

static  void clear_tap_coef_bank_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x30000000);
  
}

static  void clear_tap_coef_col_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xff80000);
  
}

static  void clear_tap_coef_mode_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0xc0000000);
  
}

static  void clear_tap_coef_slice_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[2] = x[2] & (~0x70000);
  
}

static  void clear_thld_add_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffff);
  
}

static  void clear_thld_cmp_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x200000);
  
}

static  void clear_threshold_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xfc00);
  
}

static  void clear_trans_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x20000);
  
}

static  void clear_tw_ovs_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xf);
  
}

static  void clear_vec_sz_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1fff);
  
}

static  void clear_vector_len_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff);
  
}

static  void clear_wait_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1f0000);
  
}

static  void clear_wdog_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[3] = x[3] & (~0xffffff);
  
}

static  void clear_wdog_ev_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_wdog_op_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300000);
  
}

static  void clear_win_type_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1800000);
  
}

static  void clear_win_type_rdx_width_128(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1800000);
  
}


static bfd_uint64_t dest_add_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (32768ULL <= n && n <= 49151ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_T_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (16384ULL <= n && n <= 20479ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_T is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_T_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  result1 = TRUE;
  
  if ((16384ULL & n)  ==  16384ULL) {
      result2 = TRUE;
  } else if ((32768ULL & n)  ==  32768ULL) {
      result2 = TRUE;
  } 
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_T_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_WR_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_WR is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t dest_add_wr_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 47UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand dest_add_wr is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t jmp_wr_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 47UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand jmp_wr is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t mult_coef_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 20479UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand mult_coef_add is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t opram_mem_start_addr_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  result1 = TRUE;
  
  if ((32768ULL & n)  ==  32768ULL) {
      result2 = TRUE;
  } else if ((16384ULL & n)  ==  16384ULL) {
      result2 = TRUE;
  } 
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand opram_mem_start_addr is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t opram_mem_start_addr_ind_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand opram_mem_start_addr_ind is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src1_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src1_add is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src2_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src2_add is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (32768ULL <= n && n <= 49151ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_T_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (16384ULL <= n && n <= 20479ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_T is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_T_O_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  result1 = TRUE;
  
  if ((16384ULL & n)  ==  16384ULL) {
      result2 = TRUE;
  } else if ((32768ULL & n)  ==  32768ULL) {
      result2 = TRUE;
  } 
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_T_O is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t src_add_WR_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 376UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand src_add_WR is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t tap_coef_add_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 20479UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand tap_coef_add is out of bounds"));
      return -1;
  }
  return n;
};
// For field adptv
enum_field _sym1[] = { { ".adptv", 1 }, { ".noadptv", 0 }, };
enum_fields _sym2 = { _sym1 , 2 };

// For field adptv_ofst
enum_field _sym3[] = { { ".bits_0_5", 0 }, { ".bits_12_17", 2 }, { ".bits_18_23", 3 }, { ".bits_24_29", 4 }, { ".bits_30_35", 5 }, { ".bits_36_41", 6 }, { ".bits_42_47", 7 }, { ".bits_6_11", 1 }, };
enum_fields _sym4 = { _sym3 , 8 };

// For field adptv_shft
enum_field _sym5[] = { { ".15down", 0 }, { ".23down", 1 }, };
enum_fields _sym6 = { _sym5 , 2 };

// For field bin_sz
enum_field _sym7[] = { { ".16_24bins", 0 }, { ".32bins", 1 }, { ".64bins", 2 }, };
enum_fields _sym8 = { _sym7 , 3 };

// For field cp_type
enum_field _sym9[] = { { ".copy_bck", 14 }, { ".copy_clear", 11 }, { ".copy_fwd", 13 }, { ".copy_imag_pack", 5 }, { ".copy_real_pack", 4 }, { ".copy_shift", 12 }, { ".copy_unpack", 6 }, { ".partial_copy_i2r", 10 }, { ".partial_copy_imag", 8 }, { ".partial_copy_r2i", 9 }, { ".partial_copy_real", 7 }, { ".simple_copy", 0 }, { ".threshold_ge", 1 }, { ".threshold_lt", 2 }, { ".transpose_bck", 14 }, { ".transpose_copy", 3 }, { ".transpose_fwd", 13 }, };
enum_fields _sym10 = { _sym9 , 17 };

// For field cyc_extn
enum_field _sym11[] = { { ".cyc_ext", 1 }, { ".no_cyc_ext", 0 }, };
enum_fields _sym12 = { _sym11 , 2 };

// For field dat_sz
enum_field _sym13[] = { { ".16bits", 0 }, { ".24bits", 1 }, };
enum_fields _sym14 = { _sym13 , 2 };

// For field data_packing
enum_field _sym15[] = { { ".16clubbing", 6 }, { ".16cmplx", 0 }, { ".16real", 3 }, { ".16swap", 5 }, { ".24cmplx", 1 }, { ".24real", 2 }, { ".48bin", 4 }, { ".abs", 13 }, { ".cp16", 10 }, { ".cp16fmtb", 21 }, { ".cp4", 7 }, { ".cp4d", 11 }, { ".cp4dfmta", 17 }, { ".cp4dfmtb", 19 }, { ".cp4fmta", 16 }, { ".cp4fmtb", 18 }, { ".cp6", 8 }, { ".cp8", 9 }, { ".cp8fmtb", 20 }, { ".idx", 14 }, { ".idxsum", 15 }, };
enum_fields _sym16 = { _sym15 , 21 };

// For field dest_add_mode
enum_field _sym17[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym18 = { _sym17 , 3 };

// For field ev_lvl
enum_field _sym19[] = { { ".high", 1 }, { ".low", 0 }, };
enum_fields _sym20 = { _sym19 , 2 };

// For field ev_tr
enum_field _sym21[] = { { ".l0", 0 }, { ".l1", 1 }, { ".neg", 3 }, { ".pos", 2 }, };
enum_fields _sym22 = { _sym21 , 4 };

// For field evt_ev
enum_field _sym23[] = { { ".bit0", 0 }, { ".bit1", 1 }, { ".bit2", 2 }, { ".bit3", 3 }, { ".bit4", 4 }, { ".bit5", 5 }, { ".bit6", 6 }, { ".bit7", 7 }, { ".lsb", 0 }, { ".msb", 7 }, };
enum_fields _sym24 = { _sym23 , 10 };

// For field fft_rnd
enum_field _sym25[] = { { ".round0", 0 }, { ".round1", 1 }, { ".round2", 2 }, { ".round3", 3 }, { ".round4", 4 }, { ".round5", 5 }, };
enum_fields _sym26 = { _sym25 , 6 };

// For field fft_rnd_rdx2
enum_field _sym27[] = { { ".round1", 1 }, { ".round2", 2 }, { ".round3", 3 }, { ".round4", 4 }, { ".round5", 5 }, };
enum_fields _sym28 = { _sym27 , 5 };

// For field hist_mode
enum_field _sym29[] = { { ".acc", 2 }, { ".read", 1 }, { ".read_store", 0 }, { ".store", 3 }, };
enum_fields _sym30 = { _sym29 , 4 };

// For field ima
enum_field _sym31[] = { { ".imm", 0 }, { ".ind", 1 }, };
enum_fields _sym32 = { _sym31 , 2 };

// For field ima2
enum_field _sym33[] = { { ".imm", 0 }, { ".ind", 1 }, };
enum_fields _sym34 = { _sym33 , 2 };

// For field in_dattyp
enum_field _sym35[] = { { ".cmplx", 1 }, { ".real", 0 }, };
enum_fields _sym36 = { _sym35 , 2 };

// For field in_dattyp2
enum_field _sym37[] = { { ".cmplx", 1 }, { ".log2", 2 }, { ".real", 0 }, };
enum_fields _sym38 = { _sym37 , 3 };

// For field in_dattyp_vmt
enum_field _sym39[] = { { ".cmplx", 1 }, { ".real", 0 }, };
enum_fields _sym40 = { _sym39 , 2 };

// For field in_pack
enum_field _sym41[] = { { ".in_24im", 1 }, { ".in_24real", 0 }, { ".in_48packed", 2 }, };
enum_fields _sym42 = { _sym41 , 3 };

// For field in_tag
enum_field _sym43[] = { { ".no_tag_in", 0 }, { ".tag_in", 1 }, };
enum_fields _sym44 = { _sym43 , 2 };

// For field init
enum_field _sym45[] = { { ".const_init", 1 }, { ".zero_init", 0 }, };
enum_fields _sym46 = { _sym45 , 2 };

// For field ip_pack
enum_field _sym47[] = { { ".in_24im", 1 }, { ".in_24real", 0 }, { ".in_48", 2 }, };
enum_fields _sym48 = { _sym47 , 3 };

// For field jmp_sel
enum_field _sym49[] = { { ".bit0", 0 }, { ".bit1", 1 }, { ".bit2", 2 }, { ".bit3", 3 }, { ".bit4", 4 }, { ".bit5", 5 }, { ".bit6", 6 }, { ".bit7", 7 }, { ".bit8", 8 }, { ".bit9", 9 }, };
enum_fields _sym50 = { _sym49 , 10 };

// For field jmp_type
enum_field _sym51[] = { { "", 0 }, { ".always", 0 }, { ".cond", 1 }, };
enum_fields _sym52 = { _sym51 , 3 };

// For field load_chrp_cntr
enum_field _sym53[] = { { "", 0 }, { ".no_chrp", 0 }, { "chrp", 1 }, };
enum_fields _sym54 = { _sym53 , 3 };

// For field loc_n_abs
enum_field _sym55[] = { { ".global_max", 0 }, { ".local_max", 1 }, };
enum_fields _sym56 = { _sym55 , 2 };

// For field maxsn_en
enum_field _sym57[] = { { ".masxn_dis", 0 }, { ".maxsn_en", 1 }, };
enum_fields _sym58 = { _sym57 , 2 };

// For field maxsn_sel
enum_field _sym59[] = { { ".maxsn_16", 1 }, { ".maxsn_4", 3 }, { ".maxsn_8", 2 }, { ".no_maxsn", 0 }, };
enum_fields _sym60 = { _sym59 , 4 };

// For field mca_mod
enum_field _sym61[] = { { "", 0 }, { ".mod0", 0 }, { ".mod128", 7 }, { ".mod16", 4 }, { ".mod2", 1 }, { ".mod256", 8 }, { ".mod32", 5 }, { ".mod4", 2 }, { ".mod512", 9 }, { ".mod64", 6 }, { ".mod8", 3 }, };
enum_fields _sym62 = { _sym61 , 11 };

// For field modulo_val
enum_field _sym63[] = { { "", 0 }, { ".mod0", 0 }, { ".mod1", 1 }, { ".mod10", 10 }, { ".mod11", 11 }, { ".mod12", 12 }, { ".mod13", 13 }, { ".mod14", 14 }, { ".mod15", 15 }, { ".mod16", 16 }, { ".mod17", 17 }, { ".mod18", 18 }, { ".mod19", 19 }, { ".mod2", 2 }, { ".mod20", 20 }, { ".mod21", 21 }, { ".mod22", 22 }, { ".mod23", 23 }, { ".mod24", 24 }, { ".mod3", 3 }, { ".mod4", 4 }, { ".mod5", 5 }, { ".mod6", 6 }, { ".mod7", 7 }, { ".mod8", 8 }, { ".mod9", 9 }, };
enum_fields _sym64 = { _sym63 , 26 };

// For field mult_coef_mode
enum_field _sym65[] = { { "or", 2 }, { "tr", 1 }, };
enum_fields _sym66 = { _sym65 , 2 };

// For field mult_mod
enum_field _sym67[] = { { ".caddr", 2 }, { ".const", 1 }, { ".immed", 0 }, };
enum_fields _sym68 = { _sym67 , 3 };

// For field op_pack
enum_field _sym69[] = { { ".op_off", 0 }, { ".op_on", 1 }, };
enum_fields _sym70 = { _sym69 , 2 };

// For field opram_mem_start_mode
enum_field _sym71[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym72 = { _sym71 , 3 };

// For field opsq1
enum_field _sym73[] = { { ".no_sq1", 0 }, { ".sq1", 1 }, };
enum_fields _sym74 = { _sym73 , 2 };

// For field opsq2s1
enum_field _sym75[] = { { ".abs_sq2s1", 1 }, { ".conj_sq2s1", 3 }, { ".mag_sq2s1", 2 }, { ".no_sq2s1", 0 }, };
enum_fields _sym76 = { _sym75 , 4 };

// For field opsq2s2
enum_field _sym77[] = { { ".no_sq2s2", 0 }, { ".shft_sq2s2", 1 }, { ".vec_sq2s2", 4 }, { ".wr_off_sq2s2", 2 }, { "imm_off_sqs2", 3 }, };
enum_fields _sym78 = { _sym77 , 5 };

// For field opsq2s3
enum_field _sym79[] = { { ".no_sq2s3", 0 }, { ".sum_sq2s3", 1 }, };
enum_fields _sym80 = { _sym79 , 2 };

// For field pack_en
enum_field _sym81[] = { { ".no_pack_im", 1 }, { ".no_pack_real", 0 }, { ".pack", 2 }, };
enum_fields _sym82 = { _sym81 , 3 };

// For field pdma_tag
enum_field _sym83[] = { { ".notag", 0 }, { ".tag", 1 }, };
enum_fields _sym84 = { _sym83 , 2 };

// For field pre_proc
enum_field _sym85[] = { { ".abs_abs_proc", 1 }, { ".abs_mag_proc", 2 }, { ".no_pre", 0 }, };
enum_fields _sym86 = { _sym85 , 3 };

// For field quad_ext
enum_field _sym87[] = { { ".noqext", 0 }, { ".qext", 1 }, };
enum_fields _sym88 = { _sym87 , 2 };

// For field re_im
enum_field _sym89[] = { { ".im", 0 }, { ".re", 1 }, };
enum_fields _sym90 = { _sym89 , 2 };

// For field re_im_coeff
enum_field _sym91[] = { { ".coef_cmplx", 0 }, { ".coef_im", 2 }, { ".coef_re", 3 }, };
enum_fields _sym92 = { _sym91 , 3 };

// For field real_fft
enum_field _sym93[] = { { ".nosplit", 0 }, { ".opsplit", 1 }, };
enum_fields _sym94 = { _sym93 , 2 };

// For field repeat
enum_field _sym95[] = { { "", 0 }, { ".fft16", 2 }, { ".fft32", 3 }, { ".fft8", 1 }, { ".no_repeat", 0 }, };
enum_fields _sym96 = { _sym95 , 5 };

// For field repeat2
enum_field _sym97[] = { { "", 0 }, { ".fft32", 3 }, { ".fft8", 1 }, { ".no_repeat", 0 }, };
enum_fields _sym98 = { _sym97 , 4 };

// For field rst_acc
enum_field _sym99[] = { { ".no_rst", 0 }, { ".rst_wr", 1 }, };
enum_fields _sym100 = { _sym99 , 2 };

// For field rst_acc_vmt
enum_field _sym101[] = { { ".no_rst", 0 }, { ".rst_sum", 1 }, };
enum_fields _sym102 = { _sym101 , 2 };

// For field rst_n_keep
enum_field _sym103[] = { { ".keep_orig", 0 }, { ".reset_values", 1 }, };
enum_fields _sym104 = { _sym103 , 2 };

// For field se
enum_field _sym105[] = { { ".signext", 1 }, { ".zeropad", 0 }, };
enum_fields _sym106 = { _sym105 , 2 };

// For field sel_src1_add_mode
enum_field _sym107[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym108 = { _sym107 , 3 };

// For field sel_src3_add_mode
enum_field _sym109[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym110 = { _sym109 , 3 };

// For field shft_ofst
enum_field _sym111[] = { { ".bits_0_5", 0 }, { ".bits_12_17", 2 }, { ".bits_18_23", 3 }, { ".bits_24_29", 4 }, { ".bits_30_35", 5 }, { ".bits_36_41", 6 }, { ".bits_42_47", 7 }, { ".bits_6_11", 1 }, };
enum_fields _sym112 = { _sym111 , 8 };

// For field shft_src
enum_field _sym113[] = { { ".shft_val", 0 }, { ".shft_wr", 1 }, };
enum_fields _sym114 = { _sym113 , 2 };

// For field shft_val
enum_field _sym115[] = { { ".nosft", 0 }, { ".shift1", 1 }, { ".shift2", 2 }, { ".shift3", 3 }, { ".shift4", 4 }, { ".shift8", 5 }, };
enum_fields _sym116 = { _sym115 , 6 };

// For field shift
enum_field _sym117[] = { { "", 1 }, { ".noshift", 0 }, { ".shift", 1 }, };
enum_fields _sym118 = { _sym117 , 3 };

// For field src
enum_field _sym119[] = { { "", 1 }, { ".immed", 0 }, { ".reg", 1 }, };
enum_fields _sym120 = { _sym119 , 3 };

// For field src1_add_mode
enum_field _sym121[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym122 = { _sym121 , 3 };

// For field src2_add_mode
enum_field _sym123[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym124 = { _sym123 , 3 };

// For field src_add_mode
enum_field _sym125[] = { { "or", 2 }, { "tr", 1 }, { "wr", 0 }, };
enum_fields _sym126 = { _sym125 , 3 };

// For field src_loop
enum_field _sym127[] = { { "", 0 }, { ".immed", 0 }, { ".reg", 1 }, };
enum_fields _sym128 = { _sym127 , 3 };

// For field sync_async
enum_field _sym129[] = { { ".async", 0 }, { ".sync", 1 }, };
enum_fields _sym130 = { _sym129 , 2 };

// For field tag_n_bitfld
enum_field _sym131[] = { { ".packed_bitfld", 0 }, { ".tagged_vect", 1 }, };
enum_fields _sym132 = { _sym131 , 2 };

// For field thld_cmp
enum_field _sym133[] = { { ".no_thld_cmp", 0 }, { ".thld_cmp", 1 }, };
enum_fields _sym134 = { _sym133 , 2 };

// For field trans_type
enum_field _sym135[] = { { ".opram2sysram", 1 }, { ".sysram2opram", 0 }, };
enum_fields _sym136 = { _sym135 , 2 };

// For field tw_ovs
enum_field _sym137[] = { { ".noovs", 0 }, { ".ovs128", 7 }, { ".ovs16", 4 }, { ".ovs2", 1 }, { ".ovs256", 8 }, { ".ovs32", 5 }, { ".ovs4", 2 }, { ".ovs512", 9 }, { ".ovs64", 6 }, { ".ovs8", 3 }, };
enum_fields _sym138 = { _sym137 , 10 };

// For field wdog_ev
enum_field _sym139[] = { { ".ev0", 0 }, { ".ev1", 1 }, { ".ev2", 2 }, { ".ev3", 3 }, { ".hsync", 4 }, { ".vsync", 5 }, };
enum_fields _sym140 = { _sym139 , 6 };

// For field wdog_op
enum_field _sym141[] = { { ".event", 3 }, { ".reset", 2 }, { ".start", 0 }, { ".stop", 1 }, };
enum_fields _sym142 = { _sym141 , 4 };

// For field win_type
enum_field _sym143[] = { { ".cmplx_win", 1 }, { ".real_win_im_tram", 2 }, { ".real_win_real_tram", 3 }, };
enum_fields _sym144 = { _sym143 , 3 };

// For field win_type_rdx
enum_field _sym145[] = { { ".cmplx_win", 1 }, { ".no_win", 0 }, { ".real_win_im_tram", 2 }, { ".real_win_real_tram", 3 }, };
enum_fields _sym146 = { _sym145 , 4 };

// Instruction operands.
static struct adl_field ppc_operands [] = {
  {"adptv_width_128",0,0,1,set_adptv_width_128,clear_adptv_width_128,-1,-1,-1,0,&_sym2,0},	// 0
  {"adptv_ofst_width_128",1,1,3,set_adptv_ofst_width_128,clear_adptv_ofst_width_128,-1,-1,-1,0,&_sym4,0},	// 1
  {"adptv_shft_width_128",2,2,1,set_adptv_shft_width_128,clear_adptv_shft_width_128,-1,-1,-1,0,&_sym6,0},	// 2
  {"adptv_wrnum_width_128",3,3,6,set_adptv_wrnum_width_128,clear_adptv_wrnum_width_128,-1,-1,-1,0,0,0},	// 3
  {"bin_sz_width_128",4,4,2,set_bin_sz_width_128,clear_bin_sz_width_128,-1,-1,-1,0,&_sym8,0},	// 4
  {"blk_dest_inc_width_128",5,5,7,set_blk_dest_inc_width_128,clear_blk_dest_inc_width_128,-1,-1,-1,0,0,0},	// 5
  {"blk_src_inc_width_128",6,6,8,set_blk_src_inc_width_128,clear_blk_src_inc_width_128,-1,-1,-1,0,0,0},	// 6
  {"cc_im_width_128",7,7,16,set_cc_im_width_128,clear_cc_im_width_128,-1,-1,-1,0,0,0},	// 7
  {"cc_re_width_128",8,8,16,set_cc_re_width_128,clear_cc_re_width_128,-1,-1,-1,0,0,0},	// 8
  {"cp_type_width_128",9,9,4,set_cp_type_width_128,clear_cp_type_width_128,0,-1,-1,0,&_sym10,0},	// 9
  {"cyc_extn_width_128",10,10,1,set_cyc_extn_width_128,clear_cyc_extn_width_128,-1,-1,-1,0,&_sym12,0},	// 10
  {"dat_sz_width_128",11,11,1,set_dat_sz_width_128,clear_dat_sz_width_128,-1,-1,-1,0,&_sym14,0},	// 11
  {"data_packing_width_128",12,12,5,set_data_packing_width_128,clear_data_packing_width_128,0,-1,-1,0,&_sym16,0},	// 12
  {"dest_add_bank_width_128",18,13,2,set_dest_add_bank_width_128,clear_dest_add_bank_width_128,-1,-1,-1,0,0,0},	// 13
  {"dest_add_col_width_128",19,14,9,set_dest_add_col_width_128,clear_dest_add_col_width_128,-1,-1,-1,0,0,0},	// 14
  {"dest_add_inc_width_128",20,15,8,set_dest_add_inc_width_128,clear_dest_add_inc_width_128,-1,-1,-1,0,0,0},	// 15
  {"dest_add_mode_width_128",21,16,2,set_dest_add_mode_width_128,clear_dest_add_mode_width_128,-1,-1,-1,0,&_sym18,0},	// 16
  {"dest_add_slice_width_128",22,17,3,set_dest_add_slice_width_128,clear_dest_add_slice_width_128,-1,-1,-1,0,0,0},	// 17
  {"dest_add_wr_width_128",23,18,11,set_dest_add_wr_width_128,clear_dest_add_wr_width_128,-1,-1,-1,0,0,0},	// 18
  {"ev_lvl_width_128",24,19,1,set_ev_lvl_width_128,clear_ev_lvl_width_128,0,-1,-1,0,&_sym20,0},	// 19
  {"ev_tr_width_128",25,20,2,set_ev_tr_width_128,clear_ev_tr_width_128,0,-1,-1,0,&_sym22,0},	// 20
  {"evt_ev_width_128",26,21,3,set_evt_ev_width_128,clear_evt_ev_width_128,-1,-1,-1,0,&_sym24,0},	// 21
  {"extra_offset_val_im_width_128",27,22,16,set_extra_offset_val_im_width_128,clear_extra_offset_val_im_width_128,-1,-1,-1,0,0,0},	// 22
  {"fft_rnd_width_128",30,23,3,set_fft_rnd_width_128,clear_fft_rnd_width_128,-1,-1,-1,0,&_sym26,0},	// 23
  {"fft_rnd_rdx2_width_128",31,24,3,set_fft_rnd_rdx2_width_128,clear_fft_rnd_rdx2_width_128,-1,-1,-1,0,&_sym28,0},	// 24
  {"hist_mode_width_128",32,25,2,set_hist_mode_width_128,clear_hist_mode_width_128,-1,-1,-1,0,&_sym30,0},	// 25
  {"ima_width_128",33,26,1,set_ima_width_128,clear_ima_width_128,0,-1,-1,0,&_sym32,0},	// 26
  {"ima2_width_128",34,27,1,set_ima2_width_128,clear_ima2_width_128,0,-1,-1,0,&_sym34,0},	// 27
  {"imdt_offset_val_im_width_128",35,28,16,set_imdt_offset_val_im_width_128,clear_imdt_offset_val_im_width_128,-1,-1,-1,0,0,0},	// 28
  {"imm_dat_width_128",36,29,48,set_imm_dat_width_128,clear_imm_dat_width_128,-1,-1,-1,0,0,0},	// 29
  {"in_dattyp_width_128",37,30,1,set_in_dattyp_width_128,clear_in_dattyp_width_128,0,-1,-1,0,&_sym36,0},	// 30
  {"in_dattyp2_width_128",38,31,2,set_in_dattyp2_width_128,clear_in_dattyp2_width_128,0,-1,-1,0,&_sym38,0},	// 31
  {"in_dattyp_vmt_width_128",39,32,1,set_in_dattyp_vmt_width_128,clear_in_dattyp_vmt_width_128,0,-1,-1,0,&_sym40,0},	// 32
  {"in_pack_width_128",40,33,2,set_in_pack_width_128,clear_in_pack_width_128,-1,-1,-1,0,&_sym42,0},	// 33
  {"in_tag_width_128",41,34,1,set_in_tag_width_128,clear_in_tag_width_128,-1,-1,-1,0,&_sym44,0},	// 34
  {"init_width_128",42,35,1,set_init_width_128,clear_init_width_128,0,-1,-1,0,&_sym46,0},	// 35
  {"ip_pack_width_128",43,36,2,set_ip_pack_width_128,clear_ip_pack_width_128,-1,-1,-1,0,&_sym48,0},	// 36
  {"jmp_addr_width_128",44,37,32,set_jmp_addr_width_128,clear_jmp_addr_width_128,-1,26,8,0,0,0},	// 37
  {"jmp_sel_width_128",45,38,4,set_jmp_sel_width_128,clear_jmp_sel_width_128,-1,-1,-1,0,&_sym50,0},	// 38
  {"jmp_type_width_128",46,39,1,set_jmp_type_width_128,clear_jmp_type_width_128,-1,-1,-1,0,&_sym52,0},	// 39
  {"jmp_wr_width_128",47,40,6,set_jmp_wr_width_128,clear_jmp_wr_width_128,-1,-1,-1,0,0,0},	// 40
  {"load_chrp_cntr_width_128",48,41,1,set_load_chrp_cntr_width_128,clear_load_chrp_cntr_width_128,-1,-1,-1,0,&_sym54,0},	// 41
  {"loc_n_abs_width_128",49,42,1,set_loc_n_abs_width_128,clear_loc_n_abs_width_128,-1,-1,-1,0,&_sym56,0},	// 42
  {"loop_wrnum_width_128",50,43,6,set_loop_wrnum_width_128,clear_loop_wrnum_width_128,-1,-1,-1,0,0,0},	// 43
  {"lp_cnt_width_128",51,44,16,set_lp_cnt_width_128,clear_lp_cnt_width_128,-1,-1,-1,0,0,0},	// 44
  {"mask_width_128",52,45,16,set_mask_width_128,clear_mask_width_128,-1,-1,-1,0,0,0},	// 45
  {"maxsn_en_width_128",53,46,1,set_maxsn_en_width_128,clear_maxsn_en_width_128,-1,-1,-1,0,&_sym58,0},	// 46
  {"maxsn_sel_width_128",54,47,2,set_maxsn_sel_width_128,clear_maxsn_sel_width_128,-1,-1,-1,0,&_sym60,0},	// 47
  {"mca_inc_width_128",55,48,9,set_mca_inc_width_128,clear_mca_inc_width_128,-1,-1,-1,0,0,0},	// 48
  {"mca_mod_width_128",56,49,4,set_mca_mod_width_128,clear_mca_mod_width_128,0,-1,-1,0,&_sym62,0},	// 49
  {"modulo_val_width_128",57,50,5,set_modulo_val_width_128,clear_modulo_val_width_128,0,-1,-1,0,&_sym64,0},	// 50
  {"mult_coef_bank_width_128",59,51,2,set_mult_coef_bank_width_128,clear_mult_coef_bank_width_128,-1,-1,-1,0,0,0},	// 51
  {"mult_coef_col_width_128",60,52,9,set_mult_coef_col_width_128,clear_mult_coef_col_width_128,-1,-1,-1,0,0,0},	// 52
  {"mult_coef_mode_width_128",61,53,2,set_mult_coef_mode_width_128,clear_mult_coef_mode_width_128,-1,-1,-1,0,&_sym66,0},	// 53
  {"mult_coef_slice_width_128",62,54,3,set_mult_coef_slice_width_128,clear_mult_coef_slice_width_128,-1,-1,-1,0,0,0},	// 54
  {"mult_mod_width_128",63,55,2,set_mult_mod_width_128,clear_mult_mod_width_128,-1,-1,-1,0,&_sym68,0},	// 55
  {"no_of_taps_width_128",64,56,4,set_no_of_taps_width_128,clear_no_of_taps_width_128,-1,-1,-1,0,0,0},	// 56
  {"op_pack_width_128",65,57,1,set_op_pack_width_128,clear_op_pack_width_128,-1,-1,-1,0,&_sym70,0},	// 57
  {"opram_continuous_addr_width_128",67,58,12,set_opram_continuous_addr_width_128,clear_opram_continuous_addr_width_128,-1,-1,-1,0,0,0},	// 58
  {"opram_mem_start_bank_width_128",70,59,2,set_opram_mem_start_bank_width_128,clear_opram_mem_start_bank_width_128,-1,-1,-1,0,0,0},	// 59
  {"opram_mem_start_col_width_128",71,60,9,set_opram_mem_start_col_width_128,clear_opram_mem_start_col_width_128,-1,-1,-1,0,0,0},	// 60
  {"opram_mem_start_mode_width_128",72,61,2,set_opram_mem_start_mode_width_128,clear_opram_mem_start_mode_width_128,-1,-1,-1,0,&_sym72,0},	// 61
  {"opram_mem_start_slice_width_128",73,62,3,set_opram_mem_start_slice_width_128,clear_opram_mem_start_slice_width_128,-1,-1,-1,0,0,0},	// 62
  {"opram_skip_addr_width_128",74,63,12,set_opram_skip_addr_width_128,clear_opram_skip_addr_width_128,-1,-1,-1,0,0,0},	// 63
  {"opsq1_width_128",75,64,1,set_opsq1_width_128,clear_opsq1_width_128,-1,-1,-1,0,&_sym74,0},	// 64
  {"opsq2s1_width_128",76,65,2,set_opsq2s1_width_128,clear_opsq2s1_width_128,-1,-1,-1,0,&_sym76,0},	// 65
  {"opsq2s2_width_128",77,66,3,set_opsq2s2_width_128,clear_opsq2s2_width_128,-1,-1,-1,0,&_sym78,0},	// 66
  {"opsq2s3_width_128",78,67,1,set_opsq2s3_width_128,clear_opsq2s3_width_128,-1,-1,-1,0,&_sym80,0},	// 67
  {"pack_en_width_128",79,68,2,set_pack_en_width_128,clear_pack_en_width_128,-1,-1,-1,0,&_sym82,0},	// 68
  {"pdma_tag_width_128",80,69,1,set_pdma_tag_width_128,clear_pdma_tag_width_128,-1,-1,-1,0,&_sym84,0},	// 69
  {"pre_proc_width_128",81,70,2,set_pre_proc_width_128,clear_pre_proc_width_128,-1,-1,-1,0,&_sym86,0},	// 70
  {"quad_ext_width_128",82,71,1,set_quad_ext_width_128,clear_quad_ext_width_128,0,-1,-1,0,&_sym88,0},	// 71
  {"re_im_width_128",83,72,1,set_re_im_width_128,clear_re_im_width_128,-1,-1,-1,0,&_sym90,0},	// 72
  {"re_im_coeff_width_128",84,73,2,set_re_im_coeff_width_128,clear_re_im_coeff_width_128,-1,-1,-1,0,&_sym92,0},	// 73
  {"real_fft_width_128",85,74,1,set_real_fft_width_128,clear_real_fft_width_128,0,-1,-1,0,&_sym94,0},	// 74
  {"repeat_width_128",86,75,2,set_repeat_width_128,clear_repeat_width_128,-1,-1,-1,0,&_sym96,0},	// 75
  {"repeat2_width_128",87,76,2,set_repeat2_width_128,clear_repeat2_width_128,-1,-1,-1,0,&_sym98,0},	// 76
  {"rst_acc_width_128",88,77,1,set_rst_acc_width_128,clear_rst_acc_width_128,-1,-1,-1,0,&_sym100,0},	// 77
  {"rst_acc_vmt_width_128",89,78,1,set_rst_acc_vmt_width_128,clear_rst_acc_vmt_width_128,-1,-1,-1,0,&_sym102,0},	// 78
  {"rst_n_keep_width_128",90,79,1,set_rst_n_keep_width_128,clear_rst_n_keep_width_128,0,-1,-1,0,&_sym104,0},	// 79
  {"se_width_128",91,80,1,set_se_width_128,clear_se_width_128,0,-1,-1,0,&_sym106,0},	// 80
  {"sel_src1_add_bank_width_128",93,81,2,set_sel_src1_add_bank_width_128,clear_sel_src1_add_bank_width_128,-1,-1,-1,0,0,0},	// 81
  {"sel_src1_add_col_width_128",94,82,9,set_sel_src1_add_col_width_128,clear_sel_src1_add_col_width_128,-1,-1,-1,0,0,0},	// 82
  {"sel_src1_add_mode_width_128",95,83,2,set_sel_src1_add_mode_width_128,clear_sel_src1_add_mode_width_128,-1,-1,-1,0,&_sym108,0},	// 83
  {"sel_src1_add_slice_width_128",96,84,3,set_sel_src1_add_slice_width_128,clear_sel_src1_add_slice_width_128,-1,-1,-1,0,0,0},	// 84
  {"sel_src3_add_bank_width_128",98,85,2,set_sel_src3_add_bank_width_128,clear_sel_src3_add_bank_width_128,-1,-1,-1,0,0,0},	// 85
  {"sel_src3_add_col_width_128",99,86,9,set_sel_src3_add_col_width_128,clear_sel_src3_add_col_width_128,-1,-1,-1,0,0,0},	// 86
  {"sel_src3_add_mode_width_128",100,87,2,set_sel_src3_add_mode_width_128,clear_sel_src3_add_mode_width_128,-1,-1,-1,0,&_sym110,0},	// 87
  {"sel_src3_add_slice_width_128",101,88,3,set_sel_src3_add_slice_width_128,clear_sel_src3_add_slice_width_128,-1,-1,-1,0,0,0},	// 88
  {"sel_wr_width_128",102,89,6,set_sel_wr_width_128,clear_sel_wr_width_128,-1,-1,-1,0,0,0},	// 89
  {"shft_ofst_width_128",103,90,3,set_shft_ofst_width_128,clear_shft_ofst_width_128,-1,-1,-1,0,&_sym112,0},	// 90
  {"shft_src_width_128",104,91,1,set_shft_src_width_128,clear_shft_src_width_128,-1,-1,-1,0,&_sym114,0},	// 91
  {"shft_val_width_128",105,92,3,set_shft_val_width_128,clear_shft_val_width_128,-1,-1,-1,0,&_sym116,0},	// 92
  {"shft_wr_width_128",106,93,6,set_shft_wr_width_128,clear_shft_wr_width_128,-1,-1,-1,0,0,0},	// 93
  {"shift_width_128",107,94,1,set_shift_width_128,clear_shift_width_128,2,-1,-1,0,&_sym118,0},	// 94
  {"src_width_128",108,95,1,set_src_width_128,clear_src_width_128,-1,-1,-1,0,&_sym120,0},	// 95
  {"src2_add_bank_width_128",115,96,2,set_src2_add_bank_width_128,clear_src2_add_bank_width_128,-1,-1,-1,0,0,0},	// 96
  {"src2_add_col_width_128",116,97,9,set_src2_add_col_width_128,clear_src2_add_col_width_128,-1,-1,-1,0,0,0},	// 97
  {"src2_add_mode_width_128",117,98,2,set_src2_add_mode_width_128,clear_src2_add_mode_width_128,-1,-1,-1,0,&_sym124,0},	// 98
  {"src2_add_slice_width_128",119,99,3,set_src2_add_slice_width_128,clear_src2_add_slice_width_128,-1,-1,-1,0,0,0},	// 99
  {"src2_add_wr_width_128",120,100,9,set_src2_add_wr_width_128,clear_src2_add_wr_width_128,-1,-1,-1,0,0,0},	// 100
  {"src_add_bank_width_128",126,101,2,set_src_add_bank_width_128,clear_src_add_bank_width_128,-1,-1,-1,0,0,0},	// 101
  {"src_add_col_width_128",127,102,9,set_src_add_col_width_128,clear_src_add_col_width_128,-1,-1,-1,0,0,0},	// 102
  {"src_add_inc_width_128",128,103,8,set_src_add_inc_width_128,clear_src_add_inc_width_128,-1,-1,-1,0,0,0},	// 103
  {"src_add_mode_width_128",129,104,2,set_src_add_mode_width_128,clear_src_add_mode_width_128,-1,-1,-1,0,&_sym126,0},	// 104
  {"src_add_slice_width_128",130,105,3,set_src_add_slice_width_128,clear_src_add_slice_width_128,-1,-1,-1,0,0,0},	// 105
  {"src_add_wr_width_128",131,106,11,set_src_add_wr_width_128,clear_src_add_wr_width_128,-1,-1,-1,0,0,0},	// 106
  {"src_loop_width_128",132,107,1,set_src_loop_width_128,clear_src_loop_width_128,-1,-1,-1,0,&_sym128,0},	// 107
  {"sync_async_width_128",133,108,1,set_sync_async_width_128,clear_sync_async_width_128,1,-1,-1,0,&_sym130,0},	// 108
  {"sysram_continous_addr_width_128",134,109,12,set_sysram_continous_addr_width_128,clear_sysram_continous_addr_width_128,-1,-1,-1,0,0,0},	// 109
  {"sysram_mem_start_addr_width_128",135,110,32,set_sysram_mem_start_addr_width_128,clear_sysram_mem_start_addr_width_128,-1,1,-1,0,0,0},	// 110
  {"sysram_skip_addr_width_128",136,111,12,set_sysram_skip_addr_width_128,clear_sysram_skip_addr_width_128,-1,-1,-1,0,0,0},	// 111
  {"tag_n_bitfld_width_128",137,112,1,set_tag_n_bitfld_width_128,clear_tag_n_bitfld_width_128,-1,-1,-1,0,&_sym132,0},	// 112
  {"tap_coef_bank_width_128",139,113,2,set_tap_coef_bank_width_128,clear_tap_coef_bank_width_128,-1,-1,-1,0,0,0},	// 113
  {"tap_coef_col_width_128",140,114,9,set_tap_coef_col_width_128,clear_tap_coef_col_width_128,-1,-1,-1,0,0,0},	// 114
  {"tap_coef_mode_width_128",141,115,2,set_tap_coef_mode_width_128,clear_tap_coef_mode_width_128,1,-1,-1,0,0,0},	// 115
  {"tap_coef_slice_width_128",142,116,3,set_tap_coef_slice_width_128,clear_tap_coef_slice_width_128,-1,-1,-1,0,0,0},	// 116
  {"thld_add_width_128",143,117,16,set_thld_add_width_128,clear_thld_add_width_128,-1,-1,-1,0,0,0},	// 117
  {"thld_cmp_width_128",144,118,1,set_thld_cmp_width_128,clear_thld_cmp_width_128,-1,-1,-1,0,&_sym134,0},	// 118
  {"threshold_width_128",145,119,6,set_threshold_width_128,clear_threshold_width_128,-1,-1,-1,0,0,0},	// 119
  {"trans_type_width_128",146,120,1,set_trans_type_width_128,clear_trans_type_width_128,0,-1,-1,0,&_sym136,0},	// 120
  {"tw_ovs_width_128",147,121,4,set_tw_ovs_width_128,clear_tw_ovs_width_128,0,-1,-1,0,&_sym138,0},	// 121
  {"vec_sz_width_128",148,122,13,set_vec_sz_width_128,clear_vec_sz_width_128,-1,-1,-1,0,0,0},	// 122
  {"vector_len_width_128",149,123,16,set_vector_len_width_128,clear_vector_len_width_128,-1,-1,-1,0,0,0},	// 123
  {"wait_ev_width_128",150,124,5,set_wait_ev_width_128,clear_wait_ev_width_128,-1,-1,-1,0,0,0},	// 124
  {"wdog_cnt_width_128",151,125,24,set_wdog_cnt_width_128,clear_wdog_cnt_width_128,-1,-1,-1,0,0,0},	// 125
  {"wdog_ev_width_128",152,126,3,set_wdog_ev_width_128,clear_wdog_ev_width_128,-1,-1,-1,0,&_sym140,0},	// 126
  {"wdog_op_width_128",153,127,2,set_wdog_op_width_128,clear_wdog_op_width_128,-1,-1,-1,0,&_sym142,0},	// 127
  {"win_type_width_128",154,128,2,set_win_type_width_128,clear_win_type_width_128,-1,-1,-1,0,&_sym144,0},	// 128
  {"win_type_rdx_width_128",155,129,2,set_win_type_rdx_width_128,clear_win_type_rdx_width_128,-1,-1,-1,0,&_sym146,0},	// 129
};

static const int num_ppc_operands = 130;

static struct adl_name_pair ppc_operands_by_index [] = {
   { "", 0 }
};

static const int num_ppc_operands_by_index = 0;

enum InstrBlocks {
};


// Instruction add

// Shorthand:  add -> add_;

static bfd_uint64_t _sym149_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[3].X_add_number) ); }

static int _sym149_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym150_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[3].X_add_number) ); }

static int _sym150_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym151_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[3].X_add_number) ); }

static int _sym151_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym152_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[3].X_add_number) ); }

static int _sym152_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym153_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym153_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym154_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym154_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym155_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym155_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym156_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym156_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym157_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym157_mod_indices[] = { 0, 4,  -1 };

static bfd_uint64_t _sym158_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym158_mod_indices[] = { 0, 4,  -1 };
struct adl_operand _sym148_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{94, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{50, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym149_modifier, _sym149_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym150_modifier, _sym150_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym151_modifier, _sym151_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym152_modifier, _sym152_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym153_modifier, _sym153_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym154_modifier, _sym154_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym155_modifier, _sym155_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym156_modifier, _sym156_mod_indices, 0, 0,0, -1,-1,},{100, 0, 0, 0, 0, 0, 0, 0, _sym157_modifier, _sym157_mod_indices, 0, 0,0, -1,-1,},{29, 0, 0, 0, 0, 0, 0, 0, _sym158_modifier, _sym158_mod_indices, 0, 0,0, -1,-1,},};

// Instruction add
struct adl_operand _sym147_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym159[] = {
  // add_    (0)
  { "add_", 16, 128, 128,  0xf, { 0xc000000,},0, "", 0, 13, 13, 0, 3, _sym148_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym160[] = { &_sym120, &_sym118, &_sym64, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction add_

// Instruction add_
struct adl_operand _sym161_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{94, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{50, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 3, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 4, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 5, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 6, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 7, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 8, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 9, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 10, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{98, 11, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{100, 12, ADL_REGISTER, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{99, 13, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 14, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym162[] = { &_sym120, &_sym118, &_sym64, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym124, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction cmp

// Shorthand:  cmp -> cmp_;

static bfd_uint64_t _sym165_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[1].X_add_number) ); }

static int _sym165_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym166_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[1].X_add_number) ); }

static int _sym166_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym167_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[1].X_add_number) ); }

static int _sym167_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym168_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[1].X_add_number) ); }

static int _sym168_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym169_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[3].X_add_number) ); }

static int _sym169_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym170_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[3].X_add_number) ); }

static int _sym170_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym171_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[3].X_add_number) ); }

static int _sym171_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym172_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[3].X_add_number) ); }

static int _sym172_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym173_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( (operands[0].X_add_number) , (operands[2].X_add_number) ); }

static int _sym173_mod_indices[] = { 0, 2,  -1 };

static bfd_uint64_t _sym174_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[2].X_add_number) ); }

static int _sym174_mod_indices[] = { 0, 2,  -1 };
struct adl_operand _sym164_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym165_modifier, _sym165_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym166_modifier, _sym166_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym167_modifier, _sym167_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym168_modifier, _sym168_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym169_modifier, _sym169_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym170_modifier, _sym170_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym171_modifier, _sym171_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym172_modifier, _sym172_mod_indices, 0, 0,0, -1,-1,},{100, 0, 0, 0, 0, 0, 0, 0, _sym173_modifier, _sym173_mod_indices, 0, 0,0, -1,-1,},{29, 0, 0, 0, 0, 0, 0, 0, _sym174_modifier, _sym174_mod_indices, 0, 0,0, -1,-1,},};

// Instruction cmp
struct adl_operand _sym163_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 1, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym175[] = {
  // cmp_    (0)
  { "cmp_", 16, 128, 128,  0xf, { 0x30000000,},0, "", 0, 11, 11, 0, 1, _sym164_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym176[] = { &_sym120, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction cmp_

// Instruction cmp_
struct adl_operand _sym177_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{41, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 2, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 3, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 4, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 5, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 6, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 7, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 8, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 9, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{98, 10, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{100, 11, ADL_REGISTER, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{99, 12, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 13, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym178[] = { &_sym120, &_sym54, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym124, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction cmp_chrp

// Shorthand:  cmp_chrp -> cmp_;

static bfd_uint64_t _sym181_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[0].X_add_number) ); }

static int _sym181_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym182_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[0].X_add_number) ); }

static int _sym182_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym183_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[0].X_add_number) ); }

static int _sym183_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym184_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[0].X_add_number) ); }

static int _sym184_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym185_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[1].X_add_number) ); }

static int _sym185_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym186_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[1].X_add_number) ); }

static int _sym186_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym187_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[1].X_add_number) ); }

static int _sym187_mod_indices[] = { 1,  -1 };

static bfd_uint64_t _sym188_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[1].X_add_number) ); }

static int _sym188_mod_indices[] = { 1,  -1 };
struct adl_operand _sym180_operands[] = { {104, 0, 0, 0, 0, 0, 0, 0, _sym181_modifier, _sym181_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym182_modifier, _sym182_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym183_modifier, _sym183_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym184_modifier, _sym184_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym185_modifier, _sym185_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym186_modifier, _sym186_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym187_modifier, _sym187_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym188_modifier, _sym188_mod_indices, 0, 0,0, -1,-1,},};

// Instruction cmp_chrp
struct adl_operand _sym179_operands[] = { {145, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 1, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym189[] = {
  // cmp_    (0)
  { "cmp_", 16, 128, 128,  0xf, { 0x30800000,},0, "", 0, 8, 8, 0, 0, _sym180_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym190[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction copy

// Shorthand:  copy -> copy_;

static bfd_uint64_t _sym193_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym193_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym194_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym194_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym195_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym195_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym196_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym196_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym197_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym197_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym198_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym198_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym199_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym199_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym200_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym200_mod_indices[] = { 5,  -1 };
struct adl_operand _sym192_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{79, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym193_modifier, _sym193_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym194_modifier, _sym194_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym195_modifier, _sym195_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym196_modifier, _sym196_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym197_modifier, _sym197_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym198_modifier, _sym198_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym199_modifier, _sym199_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym200_modifier, _sym200_mod_indices, 0, 0,0, -1,-1,},{6, 6, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{5, 7, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 10, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction copy
struct adl_operand _sym191_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym201[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94000000,},0, "", 0, 17, 17, 0, 3, _sym192_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym202[] = { &_sym38, &_sym10, &_sym104, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_

// Instruction copy_
struct adl_operand _sym203_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{77, 2, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 3, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{79, 4, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 5, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 7, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 8, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 9, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 10, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 11, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 12, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 13, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 14, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{6, 15, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{5, 16, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 17, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 18, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 19, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{117, 20, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym204[] = { &_sym38, &_sym86, &_sym100, &_sym10, &_sym104, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_ind

// Shorthand:  copy_ind -> copy_;

static bfd_uint64_t _sym207_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym207_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym208_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym208_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym209_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym209_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym210_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym210_mod_indices[] = { 4,  -1 };
struct adl_operand _sym206_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{79, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym207_modifier, _sym207_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym208_modifier, _sym208_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym209_modifier, _sym209_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym210_modifier, _sym210_mod_indices, 0, 0,0, -1,-1,},{6, 5, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{5, 6, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction copy_ind
struct adl_operand _sym205_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym211[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94002000,},0, "", 0, 13, 13, 0, 3, _sym206_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym212[] = { &_sym38, &_sym10, &_sym104, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_thld

// Shorthand:  copy_thld -> copy_;

static bfd_uint64_t _sym215_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym215_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym216_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym216_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym217_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym217_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym218_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym218_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym219_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym219_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym220_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym220_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym221_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym221_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym222_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym222_mod_indices[] = { 7,  -1 };
struct adl_operand _sym214_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 2, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{77, 3, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{79, 4, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym215_modifier, _sym215_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym216_modifier, _sym216_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym217_modifier, _sym217_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym218_modifier, _sym218_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym219_modifier, _sym219_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym220_modifier, _sym220_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym221_modifier, _sym221_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym222_modifier, _sym222_mod_indices, 0, 0,0, -1,-1,},{6, 8, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{5, 9, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{117, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction copy_thld
struct adl_operand _sym213_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym223[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94000000,},0, "", 0, 20, 20, 0, 5, _sym214_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym224[] = { &_sym38, &_sym10, &_sym86, &_sym100, &_sym104, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction copy_thld_ind

// Shorthand:  copy_thld_ind -> copy_;

static bfd_uint64_t _sym227_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym227_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym228_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym228_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym229_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym229_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym230_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym230_mod_indices[] = { 6,  -1 };
struct adl_operand _sym226_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 2, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{77, 3, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{9, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{79, 4, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym227_modifier, _sym227_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym228_modifier, _sym228_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym229_modifier, _sym229_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym230_modifier, _sym230_mod_indices, 0, 0,0, -1,-1,},{6, 7, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{5, 8, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{45, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{117, 11, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction copy_thld_ind
struct adl_operand _sym225_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 64, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 73, 0ull, 0x7full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym231[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94002000,},0, "", 0, 16, 16, 0, 5, _sym226_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym232[] = { &_sym38, &_sym10, &_sym86, &_sym100, &_sym104, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction evt

// Instruction evt
struct adl_operand _sym233_operands[] = { {19, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{21, 1, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym234[] = { &_sym20, &_sym24,  (struct enum_fields *) -1,};

// Instruction fir

// Shorthand:  fir -> fir_;

static bfd_uint64_t _sym237_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym237_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym238_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym238_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym239_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym239_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym240_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym240_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym241_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym241_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym242_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym242_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym243_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym243_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym244_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym244_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym245_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym245_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym246_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym246_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym247_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym247_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym248_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym248_mod_indices[] = { 8,  -1 };
struct adl_operand _sym236_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym237_modifier, _sym237_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym238_modifier, _sym238_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym239_modifier, _sym239_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym240_modifier, _sym240_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym241_modifier, _sym241_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym242_modifier, _sym242_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym243_modifier, _sym243_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym244_modifier, _sym244_mod_indices, 0, 0,0, -1,-1,},{115, 0, 0, 0, 0, 0, 0, 0, _sym245_modifier, _sym245_mod_indices, 0, 0,0, -1,-1,},{113, 0, 0, 0, 0, 0, 0, 0, _sym246_modifier, _sym246_mod_indices, 0, 0,0, -1,-1,},{114, 0, 0, 0, 0, 0, 0, 0, _sym247_modifier, _sym247_mod_indices, 0, 0,0, -1,-1,},{116, 0, 0, 0, 0, 0, 0, 0, _sym248_modifier, _sym248_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction fir
struct adl_operand _sym235_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{150, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,tap_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym249[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4000000,},0, "", 0, 20, 20, 0, 4, _sym236_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym250[] = { &_sym36, &_sym144, &_sym46, &_sym116, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction fir_

// Instruction fir_
struct adl_operand _sym251_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 3, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 4, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 6, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 7, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 8, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 9, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 10, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 11, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 12, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 13, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{115, 14, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{113, 15, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{114, 16, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{116, 17, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 18, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 19, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 20, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 21, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 22, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 23, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym252[] = { &_sym36, &_sym144, &_sym46, 0, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, 0, 0, 0, 0, &_sym112, 0, &_sym114, &_sym116,  (struct enum_fields *) -1,};

// Instruction fir_ind

// Shorthand:  fir_ind -> fir_;

static bfd_uint64_t _sym255_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym255_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym256_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym256_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym257_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym257_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym258_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym258_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym259_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (tap_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym259_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym260_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (tap_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym260_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym261_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (tap_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym261_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym262_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (tap_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym262_mod_indices[] = { 7,  -1 };
struct adl_operand _sym254_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym255_modifier, _sym255_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym256_modifier, _sym256_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym257_modifier, _sym257_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym258_modifier, _sym258_mod_indices, 0, 0,0, -1,-1,},{115, 0, 0, 0, 0, 0, 0, 0, _sym259_modifier, _sym259_mod_indices, 0, 0,0, -1,-1,},{113, 0, 0, 0, 0, 0, 0, 0, _sym260_modifier, _sym260_mod_indices, 0, 0,0, -1,-1,},{114, 0, 0, 0, 0, 0, 0, 0, _sym261_modifier, _sym261_mod_indices, 0, 0,0, -1,-1,},{116, 0, 0, 0, 0, 0, 0, 0, _sym262_modifier, _sym262_mod_indices, 0, 0,0, -1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction fir_ind
struct adl_operand _sym253_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{150, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,tap_coef_add_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym263[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4002000,},0, "", 0, 16, 16, 0, 4, _sym254_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym264[] = { &_sym36, &_sym144, &_sym46, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction fir_shift_wr

// Shorthand:  fir_shift_wr -> fir_;

static bfd_uint64_t _sym267_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym267_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym268_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym268_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym269_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym269_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym270_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym270_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym271_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym271_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym272_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym272_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym273_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym273_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym274_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym274_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym275_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (tap_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym275_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym276_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (tap_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym276_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym277_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (tap_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym277_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym278_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (tap_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym278_mod_indices[] = { 9,  -1 };
struct adl_operand _sym266_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 5, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym267_modifier, _sym267_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym268_modifier, _sym268_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym269_modifier, _sym269_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym270_modifier, _sym270_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym271_modifier, _sym271_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym272_modifier, _sym272_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym273_modifier, _sym273_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym274_modifier, _sym274_mod_indices, 0, 0,0, -1,-1,},{115, 0, 0, 0, 0, 0, 0, 0, _sym275_modifier, _sym275_mod_indices, 0, 0,0, -1,-1,},{113, 0, 0, 0, 0, 0, 0, 0, _sym276_modifier, _sym276_mod_indices, 0, 0,0, -1,-1,},{114, 0, 0, 0, 0, 0, 0, 0, _sym277_modifier, _sym277_mod_indices, 0, 0,0, -1,-1,},{116, 0, 0, 0, 0, 0, 0, 0, _sym278_modifier, _sym278_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction fir_shift_wr
struct adl_operand _sym265_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{150, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,tap_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym279[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4000000,0x0,0x0,0x80,},0, "", 0, 21, 21, 0, 4, _sym266_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym280[] = { &_sym36, &_sym144, &_sym46, &_sym112, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction fir_shift_wr_ind

// Shorthand:  fir_shift_wr_ind -> fir_;

static bfd_uint64_t _sym283_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym283_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym284_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym284_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym285_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym285_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym286_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym286_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym287_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym287_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym288_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym288_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym289_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym289_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym290_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (tap_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym290_mod_indices[] = { 8,  -1 };
struct adl_operand _sym282_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 5, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym283_modifier, _sym283_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym284_modifier, _sym284_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym285_modifier, _sym285_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym286_modifier, _sym286_mod_indices, 0, 0,0, -1,-1,},{115, 0, 0, 0, 0, 0, 0, 0, _sym287_modifier, _sym287_mod_indices, 0, 0,0, -1,-1,},{113, 0, 0, 0, 0, 0, 0, 0, _sym288_modifier, _sym288_mod_indices, 0, 0,0, -1,-1,},{114, 0, 0, 0, 0, 0, 0, 0, _sym289_modifier, _sym289_mod_indices, 0, 0,0, -1,-1,},{116, 0, 0, 0, 0, 0, 0, 0, _sym290_modifier, _sym290_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction fir_shift_wr_ind
struct adl_operand _sym281_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{150, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,tap_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym291[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4002000,0x0,0x0,0x80,},0, "", 0, 17, 17, 0, 4, _sym282_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym292[] = { &_sym36, &_sym144, &_sym46, &_sym112, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction get

// Shorthand:  get -> get_;

static bfd_uint64_t _sym295_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym295_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym296_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym296_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym297_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym297_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym298_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_T_O_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym298_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym299_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_WR_checker((operands[1].X_add_number),FALSE)) ); }

static int _sym299_mod_indices[] = { 1,  -1 };
struct adl_operand _sym294_operands[] = { {104, 0, 0, 0, 0, 0, 0, 0, _sym295_modifier, _sym295_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym296_modifier, _sym296_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym297_modifier, _sym297_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym298_modifier, _sym298_mod_indices, 0, 0,0, -1,-1,},{18, 0, 0, 0, 0, 0, 0, 0, _sym299_modifier, _sym299_mod_indices, 0,dest_add_wr_checker,0, -1,-1,},};

// Instruction get
struct adl_operand _sym293_operands[] = { {148, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_T_O_checker, 0,-1,-1,},{134, 1, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_WR_checker, 0,-1,-1,},};
static struct adl_opcode _sym300[] = {
  // get_    (0)
  { "get_", 16, 128, 128,  0xf, { 0x8000000,},0, "", 0, 5, 5, 0, 0, _sym294_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym301[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction get_

// Instruction get_
struct adl_operand _sym302_operands[] = { {26, 0, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 1, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 2, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 3, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 4, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{18, 5, ADL_REGISTER, 0, 50, 0ull, 0x7ffull, 0ull, 0, 0, 0,dest_add_wr_checker, 0,-1,-1,},};
struct enum_fields *_sym303[] = { &_sym32, &_sym126, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction get_ind

// Shorthand:  get_ind -> get_;

static bfd_uint64_t _sym306_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_WR_checker((operands[0].X_add_number),FALSE)) ); }

static int _sym306_mod_indices[] = { 0,  -1 };
struct adl_operand _sym305_operands[] = { {102, 0, 0, 0, 0, 0, 0, 0, _sym306_modifier, _sym306_mod_indices, 0, 0,0, -1,-1,},};

// Instruction get_ind
struct adl_operand _sym304_operands[] = { {149, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_WR_checker, 0,-1,-1,},};
static struct adl_opcode _sym307[] = {
  // get_    (0)
  { "get_", 16, 128, 128,  0xf, { 0x8002000,},0, "", 0, 1, 1, 0, 0, _sym305_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym308[] = { 0,  (struct enum_fields *) -1,};

// Instruction hist

// Shorthand:  hist -> hist_;

static bfd_uint64_t _sym311_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym311_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym312_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym312_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym313_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym313_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym314_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym314_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym315_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym315_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym316_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym316_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym317_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym317_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym318_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym318_mod_indices[] = { 8,  -1 };
struct adl_operand _sym310_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{25, 2, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{4, 3, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{68, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym311_modifier, _sym311_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym312_modifier, _sym312_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym313_modifier, _sym313_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym314_modifier, _sym314_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym315_modifier, _sym315_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym316_modifier, _sym316_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym317_modifier, _sym317_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym318_modifier, _sym318_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{119, 11, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 5, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction hist
struct adl_operand _sym309_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym319[] = {
  // hist_    (0)
  { "hist_", 16, 128, 128,  0xf, { 0x90000000,},0, "", 0, 18, 18, 0, 6, _sym310_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym320[] = { &_sym38, &_sym86, &_sym30, &_sym8, &_sym82, &_sym14, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction hist_

// Instruction hist_
struct adl_operand _sym321_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{25, 2, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{4, 3, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{68, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 5, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 7, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 8, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 9, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 10, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 11, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 12, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 13, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 14, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 15, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 16, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{119, 17, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 18, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym322[] = { &_sym38, &_sym86, &_sym30, &_sym8, &_sym82, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, 0, &_sym14,  (struct enum_fields *) -1,};

// Instruction hist_ind

// Shorthand:  hist_ind -> hist_;

static bfd_uint64_t _sym325_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym325_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym326_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym326_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym327_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym327_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym328_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym328_mod_indices[] = { 7,  -1 };
struct adl_operand _sym324_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{25, 2, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{4, 3, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{68, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym325_modifier, _sym325_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym326_modifier, _sym326_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym327_modifier, _sym327_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym328_modifier, _sym328_mod_indices, 0, 0,0, -1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{119, 10, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{11, 5, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction hist_ind
struct adl_operand _sym323_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 12, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 127, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym329[] = {
  // hist_    (0)
  { "hist_", 16, 128, 128,  0xf, { 0x90002000,},0, "", 0, 14, 14, 0, 6, _sym324_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym330[] = { &_sym38, &_sym86, &_sym30, &_sym8, &_sym82, &_sym14, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2

// Shorthand:  irdx2 -> irdx2_;

static bfd_uint64_t _sym333_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym333_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym334_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym334_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym335_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym335_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym336_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym336_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym337_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym337_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym338_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym338_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym339_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym339_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym340_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym340_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym341_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym341_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym342_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym342_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym343_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym343_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym344_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym344_mod_indices[] = { 9,  -1 };
struct adl_operand _sym332_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym333_modifier, _sym333_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym334_modifier, _sym334_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym335_modifier, _sym335_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym336_modifier, _sym336_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym337_modifier, _sym337_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym338_modifier, _sym338_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym339_modifier, _sym339_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym340_modifier, _sym340_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym341_modifier, _sym341_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym342_modifier, _sym342_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym343_modifier, _sym343_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym344_modifier, _sym344_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2
struct adl_operand _sym331_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym345[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0000000,},0, "", 0, 21, 21, 0, 6, _sym332_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym346[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_

// Instruction irdx2_
struct adl_operand _sym347_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 1, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 3, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 5, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 6, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 8, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 9, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 10, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 11, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 12, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 13, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 14, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 15, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 16, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 17, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 18, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 19, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 20, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 21, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 22, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 23, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 24, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 25, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 26, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym348[] = { &_sym36, &_sym28, &_sym2, &_sym6, &_sym88, &_sym98, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, &_sym4, 0, &_sym114, &_sym116, &_sym138,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv

// Shorthand:  irdx2_adptv -> irdx2_;

static bfd_uint64_t _sym351_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym351_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym352_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym352_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym353_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym353_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym354_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym354_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym355_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym355_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym356_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym356_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym357_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym357_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym358_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym358_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym359_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym359_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym360_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym360_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym361_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym361_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym362_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym362_mod_indices[] = { 12,  -1 };
struct adl_operand _sym350_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym351_modifier, _sym351_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym352_modifier, _sym352_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym353_modifier, _sym353_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym354_modifier, _sym354_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym355_modifier, _sym355_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym356_modifier, _sym356_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym357_modifier, _sym357_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym358_modifier, _sym358_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym359_modifier, _sym359_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym360_modifier, _sym360_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym361_modifier, _sym361_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym362_modifier, _sym362_mod_indices, 0, 0,0, -1,-1,},{103, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_adptv
struct adl_operand _sym349_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym363[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0040000,},0, "", 0, 24, 24, 0, 8, _sym350_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym364[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym116, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv_ind

// Shorthand:  irdx2_adptv_ind -> irdx2_;

static bfd_uint64_t _sym367_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym367_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym368_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym368_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym369_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym369_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym370_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym370_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym371_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym371_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym372_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym372_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym373_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym373_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym374_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym374_mod_indices[] = { 11,  -1 };
struct adl_operand _sym366_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym367_modifier, _sym367_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym368_modifier, _sym368_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym369_modifier, _sym369_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym370_modifier, _sym370_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym371_modifier, _sym371_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym372_modifier, _sym372_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym373_modifier, _sym373_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym374_modifier, _sym374_mod_indices, 0, 0,0, -1,-1,},{103, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_adptv_ind
struct adl_operand _sym365_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym375[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0042000,},0, "", 0, 20, 20, 0, 8, _sym366_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym376[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym116, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv_shift_wr

// Shorthand:  irdx2_adptv_shift_wr -> irdx2_;

static bfd_uint64_t _sym379_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym379_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym380_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym380_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym381_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym381_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym382_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym382_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym383_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym383_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym384_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym384_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym385_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym385_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym386_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym386_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym387_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym387_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym388_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym388_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym389_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym389_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym390_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym390_mod_indices[] = { 10,  -1 };
struct adl_operand _sym378_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym379_modifier, _sym379_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym380_modifier, _sym380_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym381_modifier, _sym381_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym382_modifier, _sym382_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym383_modifier, _sym383_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym384_modifier, _sym384_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym385_modifier, _sym385_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym386_modifier, _sym386_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym387_modifier, _sym387_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym388_modifier, _sym388_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym389_modifier, _sym389_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym390_modifier, _sym390_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_adptv_shift_wr
struct adl_operand _sym377_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym391[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0040000,0x0,0x0,0x80,},0, "", 0, 22, 22, 0, 6, _sym378_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym392[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_adptv_shift_wr_ind

// Shorthand:  irdx2_adptv_shift_wr_ind -> irdx2_;

static bfd_uint64_t _sym395_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym395_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym396_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym396_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym397_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym397_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym398_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym398_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym399_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym399_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym400_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym400_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym401_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym401_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym402_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym402_mod_indices[] = { 9,  -1 };
struct adl_operand _sym394_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym395_modifier, _sym395_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym396_modifier, _sym396_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym397_modifier, _sym397_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym398_modifier, _sym398_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym399_modifier, _sym399_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym400_modifier, _sym400_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym401_modifier, _sym401_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym402_modifier, _sym402_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_adptv_shift_wr_ind
struct adl_operand _sym393_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym403[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0042000,0x0,0x0,0x80,},0, "", 0, 18, 18, 0, 6, _sym394_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym404[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_ind

// Shorthand:  irdx2_ind -> irdx2_;

static bfd_uint64_t _sym407_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym407_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym408_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym408_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym409_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym409_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym410_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym410_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym411_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym411_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym412_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym412_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym413_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym413_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym414_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym414_mod_indices[] = { 8,  -1 };
struct adl_operand _sym406_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym407_modifier, _sym407_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym408_modifier, _sym408_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym409_modifier, _sym409_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym410_modifier, _sym410_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym411_modifier, _sym411_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym412_modifier, _sym412_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym413_modifier, _sym413_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym414_modifier, _sym414_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_ind
struct adl_operand _sym405_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym415[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0002000,},0, "", 0, 17, 17, 0, 6, _sym406_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym416[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym116, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_shift_wr

// Shorthand:  irdx2_shift_wr -> irdx2_;

static bfd_uint64_t _sym419_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym419_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym420_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym420_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym421_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym421_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym422_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym422_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym423_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym423_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym424_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym424_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym425_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym425_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym426_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym426_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym427_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym427_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym428_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym428_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym429_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym429_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym430_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym430_mod_indices[] = { 9,  -1 };
struct adl_operand _sym418_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym419_modifier, _sym419_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym420_modifier, _sym420_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym421_modifier, _sym421_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym422_modifier, _sym422_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym423_modifier, _sym423_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym424_modifier, _sym424_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym425_modifier, _sym425_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym426_modifier, _sym426_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym427_modifier, _sym427_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym428_modifier, _sym428_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym429_modifier, _sym429_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym430_modifier, _sym430_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 4, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 5, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_shift_wr
struct adl_operand _sym417_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym431[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0000000,0x0,0x0,0x80,},0, "", 0, 21, 21, 0, 5, _sym418_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym432[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx2_shift_wr_ind

// Shorthand:  irdx2_shift_wr_ind -> irdx2_;

static bfd_uint64_t _sym435_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym435_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym436_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym436_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym437_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym437_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym438_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym438_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym439_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym439_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym440_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym440_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym441_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym441_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym442_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym442_mod_indices[] = { 8,  -1 };
struct adl_operand _sym434_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym435_modifier, _sym435_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym436_modifier, _sym436_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym437_modifier, _sym437_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym438_modifier, _sym438_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym439_modifier, _sym439_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym440_modifier, _sym440_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym441_modifier, _sym441_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym442_modifier, _sym442_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 4, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 5, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx2_shift_wr_ind
struct adl_operand _sym433_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym443[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0002000,0x0,0x0,0x80,},0, "", 0, 17, 17, 0, 5, _sym434_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym444[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mm0

// Shorthand:  irdx4_mm0 -> irdx4_mm0_;

static bfd_uint64_t _sym447_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym447_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym448_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym448_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym449_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym449_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym450_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym450_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym451_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym451_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym452_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym452_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym453_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym453_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym454_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym454_mod_indices[] = { 9,  -1 };
struct adl_operand _sym446_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym447_modifier, _sym447_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym448_modifier, _sym448_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym449_modifier, _sym449_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym450_modifier, _sym450_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym451_modifier, _sym451_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym452_modifier, _sym452_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym453_modifier, _sym453_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym454_modifier, _sym454_mod_indices, 0, 0,0, -1,-1,},{7, 12, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mm0
struct adl_operand _sym445_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym455[] = {
  // irdx4_mm0_    (0)
  { "irdx4_mm0_", 16, 128, 128,  0xf, { 0xac000000,},0, "", 0, 20, 20, 0, 7, _sym446_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym456[] = { &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym116, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mm0_

// Instruction irdx4_mm0_
struct adl_operand _sym457_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 2, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 5, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 7, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 8, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 9, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 10, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 11, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 12, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 13, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 14, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 15, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 16, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 17, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 18, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 19, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 20, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym458[] = { &_sym36, &_sym146, &_sym26, &_sym88, &_sym96, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, 0, 0, &_sym116, &_sym138,  (struct enum_fields *) -1,};

// Instruction irdx4_mm0_ind

// Shorthand:  irdx4_mm0_ind -> irdx4_mm0_;

static bfd_uint64_t _sym461_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym461_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym462_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym462_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym463_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym463_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym464_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym464_mod_indices[] = { 8,  -1 };
struct adl_operand _sym460_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym461_modifier, _sym461_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym462_modifier, _sym462_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym463_modifier, _sym463_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym464_modifier, _sym464_mod_indices, 0, 0,0, -1,-1,},{7, 11, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mm0_ind
struct adl_operand _sym459_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym465[] = {
  // irdx4_mm0_    (0)
  { "irdx4_mm0_", 16, 128, 128,  0xf, { 0xac002000,},0, "", 0, 16, 16, 0, 7, _sym460_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym466[] = { &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0

// Shorthand:  irdx4_mmn0 -> irdx4_mmn0_;

static bfd_uint64_t _sym469_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym469_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym470_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym470_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym471_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym471_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym472_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym472_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym473_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym473_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym474_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym474_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym475_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym475_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym476_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym476_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym477_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym477_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym478_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym478_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym479_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym479_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym480_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym480_mod_indices[] = { 10,  -1 };
struct adl_operand _sym468_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym469_modifier, _sym469_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym470_modifier, _sym470_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym471_modifier, _sym471_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym472_modifier, _sym472_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym473_modifier, _sym473_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym474_modifier, _sym474_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym475_modifier, _sym475_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym476_modifier, _sym476_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym477_modifier, _sym477_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym478_modifier, _sym478_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym479_modifier, _sym479_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym480_modifier, _sym480_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0
struct adl_operand _sym467_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym481[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac000000,},0, "", 0, 24, 24, 0, 7, _sym468_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym482[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_

// Instruction irdx4_mmn0_
struct adl_operand _sym483_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 2, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 5, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 7, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 9, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 10, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 11, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 12, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 13, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 14, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 15, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 16, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 17, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 18, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 19, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 20, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 21, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 22, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 23, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 24, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 25, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 26, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 27, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 28, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 29, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 30, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym484[] = { &_sym36, &_sym146, &_sym26, &_sym2, &_sym6, &_sym88, &_sym96, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, &_sym62, &_sym4, 0, 0, &_sym68, &_sym114, &_sym116, &_sym138,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_adptv

// Shorthand:  irdx4_mmn0_adptv -> irdx4_mmn0_;

static bfd_uint64_t _sym487_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym487_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym488_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym488_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym489_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym489_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym490_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym490_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym491_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[12].X_add_number) ); }

static int _sym491_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym492_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[12].X_add_number) ); }

static int _sym492_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym493_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[12].X_add_number) ); }

static int _sym493_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym494_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[12].X_add_number) ); }

static int _sym494_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym495_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym495_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym496_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym496_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym497_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym497_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym498_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym498_mod_indices[] = { 13,  -1 };
struct adl_operand _sym486_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym487_modifier, _sym487_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym488_modifier, _sym488_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym489_modifier, _sym489_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym490_modifier, _sym490_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym491_modifier, _sym491_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym492_modifier, _sym492_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym493_modifier, _sym493_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym494_modifier, _sym494_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym495_modifier, _sym495_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym496_modifier, _sym496_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym497_modifier, _sym497_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym498_modifier, _sym498_mod_indices, 0, 0,0, -1,-1,},{103, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 16, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 17, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_adptv
struct adl_operand _sym485_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 17, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym499[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac040000,},0, "", 0, 27, 27, 0, 9, _sym486_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym500[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_adptv_ind

// Shorthand:  irdx4_mmn0_adptv_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym503_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym503_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym504_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym504_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym505_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym505_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym506_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym506_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym507_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym507_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym508_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym508_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym509_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym509_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym510_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym510_mod_indices[] = { 12,  -1 };
struct adl_operand _sym502_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym503_modifier, _sym503_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym504_modifier, _sym504_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym505_modifier, _sym505_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym506_modifier, _sym506_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym507_modifier, _sym507_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym508_modifier, _sym508_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym509_modifier, _sym509_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym510_modifier, _sym510_mod_indices, 0, 0,0, -1,-1,},{103, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_adptv_ind
struct adl_operand _sym501_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym511[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac042000,},0, "", 0, 23, 23, 0, 9, _sym502_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym512[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_ind

// Shorthand:  irdx4_mmn0_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym515_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym515_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym516_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym516_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym517_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym517_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym518_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym518_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym519_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym519_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym520_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym520_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym521_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym521_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym522_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym522_mod_indices[] = { 9,  -1 };
struct adl_operand _sym514_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym515_modifier, _sym515_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym516_modifier, _sym516_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym517_modifier, _sym517_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym518_modifier, _sym518_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym519_modifier, _sym519_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym520_modifier, _sym520_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym521_modifier, _sym521_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym522_modifier, _sym522_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_ind
struct adl_operand _sym513_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym523[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac002000,},0, "", 0, 20, 20, 0, 7, _sym514_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym524[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft

// Shorthand:  irdx4_mmn0_shft -> irdx4_mmn0_;

static bfd_uint64_t _sym527_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym527_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym528_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym528_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym529_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym529_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym530_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym530_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym531_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym531_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym532_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym532_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym533_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym533_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym534_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym534_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym535_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym535_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym536_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym536_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym537_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym537_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym538_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym538_mod_indices[] = { 10,  -1 };
struct adl_operand _sym526_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym527_modifier, _sym527_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym528_modifier, _sym528_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym529_modifier, _sym529_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym530_modifier, _sym530_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym531_modifier, _sym531_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym532_modifier, _sym532_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym533_modifier, _sym533_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym534_modifier, _sym534_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym535_modifier, _sym535_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym536_modifier, _sym536_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym537_modifier, _sym537_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym538_modifier, _sym538_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_shft
struct adl_operand _sym525_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym539[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac000000,},0, "", 0, 24, 24, 0, 7, _sym526_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym540[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym116, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft_ind

// Shorthand:  irdx4_mmn0_shft_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym543_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym543_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym544_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym544_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym545_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym545_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym546_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym546_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym547_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym547_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym548_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym548_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym549_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym549_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym550_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym550_mod_indices[] = { 9,  -1 };
struct adl_operand _sym542_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym543_modifier, _sym543_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym544_modifier, _sym544_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym545_modifier, _sym545_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym546_modifier, _sym546_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym547_modifier, _sym547_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym548_modifier, _sym548_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym549_modifier, _sym549_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym550_modifier, _sym550_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_shft_ind
struct adl_operand _sym541_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym551[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac002000,},0, "", 0, 20, 20, 0, 7, _sym542_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym552[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym116, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft_wr

// Shorthand:  irdx4_mmn0_shft_wr -> irdx4_mmn0_;

static bfd_uint64_t _sym555_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym555_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym556_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym556_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym557_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym557_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym558_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym558_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym559_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym559_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym560_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym560_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym561_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym561_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym562_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym562_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym563_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym563_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym564_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym564_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym565_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym565_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym566_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym566_mod_indices[] = { 11,  -1 };
struct adl_operand _sym554_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym555_modifier, _sym555_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym556_modifier, _sym556_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym557_modifier, _sym557_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym558_modifier, _sym558_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym559_modifier, _sym559_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym560_modifier, _sym560_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym561_modifier, _sym561_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym562_modifier, _sym562_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym563_modifier, _sym563_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym564_modifier, _sym564_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym565_modifier, _sym565_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym566_modifier, _sym566_mod_indices, 0, 0,0, -1,-1,},{103, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_shft_wr
struct adl_operand _sym553_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym567[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac000000,0x0,0x0,0x80,},0, "", 0, 25, 25, 0, 7, _sym554_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym568[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym4, 0, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction irdx4_mmn0_shft_wr_ind

// Shorthand:  irdx4_mmn0_shft_wr_ind -> irdx4_mmn0_;

static bfd_uint64_t _sym571_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym571_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym572_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym572_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym573_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym573_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym574_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym574_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym575_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym575_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym576_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym576_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym577_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym577_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym578_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym578_mod_indices[] = { 10,  -1 };
struct adl_operand _sym570_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym571_modifier, _sym571_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym572_modifier, _sym572_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym573_modifier, _sym573_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym574_modifier, _sym574_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym575_modifier, _sym575_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym576_modifier, _sym576_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym577_modifier, _sym577_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym578_modifier, _sym578_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction irdx4_mmn0_shft_wr_ind
struct adl_operand _sym569_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym579[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac002000,0x0,0x0,0x80,},0, "", 0, 21, 21, 0, 7, _sym570_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym580[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym4, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction jump_

// Instruction jump_
struct adl_operand _sym581_operands[] = { {39, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{38, 1, 0, 0, 7, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{40, 2, ADL_REGISTER, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0,jmp_wr_checker, 0,-1,-1,},{37, 3, ADL_RELATIVE, 0, 64, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym582[] = { &_sym52, &_sym50, 0, 0,  (struct enum_fields *) -1,};

// Instruction jump_alw

// Shorthand:  jump_alw -> jump_;
struct adl_operand _sym584_operands[] = { {37, 0, ADL_RELATIVE, 0, 64, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction jump_alw
struct adl_operand _sym583_operands[] = { {0, 0, ADL_RELATIVE, 0, 64, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym585[] = {
  // jump_    (0)
  { "jump_", 16, 128, 128,  0xf, { 0x34000000,},0, "", 0, 1, 1, 0, 0, _sym584_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym586[] = { 0,  (struct enum_fields *) -1,};

// Instruction jump_cond

// Shorthand:  jump_cond -> jump_;
struct adl_operand _sym588_operands[] = { {38, 0, 0, 0, 7, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{40, 1, ADL_REGISTER, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0,jmp_wr_checker, 0,-1,-1,},{37, 2, ADL_RELATIVE, 0, 64, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction jump_cond
struct adl_operand _sym587_operands[] = { {0, 0, 0, 0, 7, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0,jmp_wr_checker, 0,-1,-1,},{0, 2, ADL_RELATIVE, 0, 64, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym589[] = {
  // jump_    (0)
  { "jump_", 16, 128, 128,  0xf, { 0x36000000,},0, "", 0, 3, 3, 0, 0, _sym588_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym590[] = { &_sym50, 0, 0,  (struct enum_fields *) -1,};

// Instruction loop

// Instruction loop
struct adl_operand _sym591_operands[] = { {107, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{44, 1, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{43, 2, 0, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym592[] = { &_sym128, 0, 0,  (struct enum_fields *) -1,};

// Instruction loop_

// Shorthand:  loop_ -> loop;

static bfd_uint64_t _sym595_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_loop_immed ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym595_mod_indices[] = { 0, 1,  -1 };

static bfd_uint64_t _sym596_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_loop_wr ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym596_mod_indices[] = { 0, 1,  -1 };
struct adl_operand _sym594_operands[] = { {107, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{44, 0, 0, 0, 0, 0, 0, 0, _sym595_modifier, _sym595_mod_indices, 0, 0,0, -1,-1,},{43, 0, 0, 0, 0, 0, 0, 0, _sym596_modifier, _sym596_mod_indices, 0, 0,0, -1,-1,},};

// Instruction loop_
struct adl_operand _sym593_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym597[] = {
  // loop    (0)
  { "loop", 16, 128, 128,  0xf, { 0x14000000,},0, "", 0, 3, 3, 0, 1, _sym594_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym598[] = { &_sym128, 0,  (struct enum_fields *) -1,};

// Instruction maxs

// Shorthand:  maxs -> maxs_;

static bfd_uint64_t _sym601_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[7].X_add_number) ); }

static int _sym601_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym602_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym602_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym603_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym603_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym604_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym604_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym605_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym605_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym606_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym606_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym607_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym607_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym608_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym608_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym609_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym609_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym610_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[7].X_add_number) ); }

static int _sym610_mod_indices[] = { 7,  -1 };
struct adl_operand _sym600_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{118, 2, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{34, 3, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{112, 4, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 0, 0, 0, 0, 0, 0, 0, _sym601_modifier, _sym601_mod_indices, 0, 0,0, -1,-1,},{33, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym602_modifier, _sym602_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym603_modifier, _sym603_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym604_modifier, _sym604_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym605_modifier, _sym605_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym606_modifier, _sym606_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym607_modifier, _sym607_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym608_modifier, _sym608_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym609_modifier, _sym609_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 0, 0, 0, 0, 0, 0, 0, _sym610_modifier, _sym610_mod_indices, 0, 0,0, -1,-1,},{117, 13, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction maxs
struct adl_operand _sym599_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym611[] = {
  // maxs_    (0)
  { "maxs_", 16, 128, 128,  0xf, { 0x9c080000,},0, "", 0, 21, 21, 0, 8, _sym600_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym612[] = { &_sym38, &_sym86, &_sym134, &_sym44, &_sym132, &_sym12, &_sym42, &_sym60, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction maxs_

// Instruction maxs_
struct adl_operand _sym613_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{118, 2, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{34, 3, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{42, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{112, 5, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 7, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 9, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 11, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 12, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 13, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 14, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 15, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 16, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 17, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 18, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 19, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 20, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 21, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{117, 22, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym614[] = { &_sym38, &_sym86, &_sym134, &_sym44, &_sym56, &_sym132, &_sym12, &_sym58, &_sym42, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, &_sym60, 0,  (struct enum_fields *) -1,};

// Instruction maxs_gbl

// Shorthand:  maxs_gbl -> maxs_;

static bfd_uint64_t _sym617_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[3].X_add_number) ); }

static int _sym617_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym618_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym618_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym619_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym619_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym620_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym620_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym621_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym621_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym622_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym622_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym623_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym623_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym624_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym624_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym625_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym625_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym626_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[3].X_add_number) ); }

static int _sym626_mod_indices[] = { 3,  -1 };
struct adl_operand _sym616_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 0, 0, 0, 0, 0, 0, 0, _sym617_modifier, _sym617_mod_indices, 0, 0,0, -1,-1,},{33, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym618_modifier, _sym618_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym619_modifier, _sym619_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym620_modifier, _sym620_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym621_modifier, _sym621_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym622_modifier, _sym622_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym623_modifier, _sym623_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym624_modifier, _sym624_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym625_modifier, _sym625_mod_indices, 0, 0,0, -1,-1,},{103, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 0, 0, 0, 0, 0, 0, 0, _sym626_modifier, _sym626_mod_indices, 0, 0,0, -1,-1,},{117, 9, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction maxs_gbl
struct adl_operand _sym615_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym627[] = {
  // maxs_    (0)
  { "maxs_", 16, 128, 128,  0xf, { 0x9c000000,},0, "", 0, 17, 17, 0, 4, _sym616_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym628[] = { &_sym38, &_sym86, &_sym42, &_sym60, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction maxs_gbl_ind

// Shorthand:  maxs_gbl_ind -> maxs_;

static bfd_uint64_t _sym631_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[3].X_add_number) ); }

static int _sym631_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym632_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym632_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym633_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym633_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym634_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym634_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym635_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym635_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym636_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[3].X_add_number) ); }

static int _sym636_mod_indices[] = { 3,  -1 };
struct adl_operand _sym630_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 0, 0, 0, 0, 0, 0, 0, _sym631_modifier, _sym631_mod_indices, 0, 0,0, -1,-1,},{33, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym632_modifier, _sym632_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym633_modifier, _sym633_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym634_modifier, _sym634_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym635_modifier, _sym635_mod_indices, 0, 0,0, -1,-1,},{103, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 0, 0, 0, 0, 0, 0, 0, _sym636_modifier, _sym636_mod_indices, 0, 0,0, -1,-1,},{117, 8, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction maxs_gbl_ind
struct adl_operand _sym629_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym637[] = {
  // maxs_    (0)
  { "maxs_", 16, 128, 128,  0xf, { 0x9c002000,},0, "", 0, 13, 13, 0, 4, _sym630_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym638[] = { &_sym38, &_sym86, &_sym42, &_sym60, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction maxs_ind

// Shorthand:  maxs_ind -> maxs_;

static bfd_uint64_t _sym641_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return is_maxsN ( (operands[7].X_add_number) ); }

static int _sym641_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym642_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym642_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym643_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym643_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym644_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym644_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym645_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym645_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym646_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_maxsN ( (operands[7].X_add_number) ); }

static int _sym646_mod_indices[] = { 7,  -1 };
struct adl_operand _sym640_operands[] = { {31, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{70, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{118, 2, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{34, 3, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{112, 4, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{10, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{46, 0, 0, 0, 0, 0, 0, 0, _sym641_modifier, _sym641_mod_indices, 0, 0,0, -1,-1,},{33, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym642_modifier, _sym642_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym643_modifier, _sym643_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym644_modifier, _sym644_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym645_modifier, _sym645_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{47, 0, 0, 0, 0, 0, 0, 0, _sym646_modifier, _sym646_mod_indices, 0, 0,0, -1,-1,},{117, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction maxs_ind
struct adl_operand _sym639_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 10, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 110, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym647[] = {
  // maxs_    (0)
  { "maxs_", 16, 128, 128,  0xf, { 0x9c082000,},0, "", 0, 17, 17, 0, 8, _sym640_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym648[] = { &_sym38, &_sym86, &_sym134, &_sym44, &_sym132, &_sym12, &_sym42, &_sym60, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction next

// Instruction next
struct adl_operand _sym649_operands[] = {  0 };
struct enum_fields *_sym650[] = {  (struct enum_fields *) -1,};

// Instruction pdma

// Shorthand:  pdma -> pdma_;

static bfd_uint64_t _sym653_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (opram_mem_start_addr_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym653_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym654_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (opram_mem_start_addr_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym654_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym655_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (opram_mem_start_addr_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym655_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym656_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (opram_mem_start_addr_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym656_mod_indices[] = { 7,  -1 };
struct adl_operand _sym652_operands[] = { {69, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{80, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 2, 0, 0, 9, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{120, 3, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{108, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{123, 5, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{110, 6, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{61, 0, 0, 0, 0, 0, 0, 0, _sym653_modifier, _sym653_mod_indices, 0, 0,0, -1,-1,},{59, 0, 0, 0, 0, 0, 0, 0, _sym654_modifier, _sym654_mod_indices, 0, 0,0, -1,-1,},{60, 0, 0, 0, 0, 0, 0, 0, _sym655_modifier, _sym655_mod_indices, 0, 0,0, -1,-1,},{62, 0, 0, 0, 0, 0, 0, 0, _sym656_modifier, _sym656_mod_indices, 0, 0,0, -1,-1,},{63, 8, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 9, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{111, 10, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{109, 11, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction pdma
struct adl_operand _sym651_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 9, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{138, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,opram_mem_start_addr_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym657[] = {
  // pdma_    (0)
  { "pdma_", 16, 128, 128,  0xf, { 0xa0000000,},0, "", 0, 15, 15, 0, 5, _sym652_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym658[] = { &_sym106, &_sym84, &_sym16, &_sym136, &_sym130, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction pdma_

// Instruction pdma_
struct adl_operand _sym659_operands[] = { {69, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{80, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{27, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 3, 0, 0, 9, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{120, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{108, 5, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{123, 6, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{110, 7, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{61, 8, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{59, 9, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{60, 10, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{62, 11, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{63, 12, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 13, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{111, 14, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{109, 15, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym660[] = { &_sym84, &_sym106, &_sym34, &_sym16, &_sym136, &_sym130, 0, 0, &_sym72, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction pdma_ind

// Shorthand:  pdma_ind -> pdma_;

static bfd_uint64_t _sym663_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (opram_mem_start_addr_ind_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym663_mod_indices[] = { 7,  -1 };
struct adl_operand _sym662_operands[] = { {69, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{80, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{12, 2, 0, 0, 9, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{120, 3, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{108, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{123, 5, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{110, 6, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{60, 0, 0, 0, 0, 0, 0, 0, _sym663_modifier, _sym663_mod_indices, 0, 0,0, -1,-1,},{63, 8, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{58, 9, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{111, 10, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{109, 11, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction pdma_ind
struct adl_operand _sym661_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 9, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 16, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 32, 0ull, 0xffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{139, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,opram_mem_start_addr_ind_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 92, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 104, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 116, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym664[] = {
  // pdma_    (0)
  { "pdma_", 16, 128, 128,  0xf, { 0xa0800000,},0, "", 0, 12, 12, 0, 5, _sym662_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym665[] = { &_sym106, &_sym84, &_sym16, &_sym136, &_sym130, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2

// Shorthand:  rdx2 -> rdx2_;

static bfd_uint64_t _sym668_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym668_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym669_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym669_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym670_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym670_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym671_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym671_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym672_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym672_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym673_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym673_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym674_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym674_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym675_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym675_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym676_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym676_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym677_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym677_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym678_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym678_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym679_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym679_mod_indices[] = { 10,  -1 };
struct adl_operand _sym667_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym668_modifier, _sym668_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym669_modifier, _sym669_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym670_modifier, _sym670_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym671_modifier, _sym671_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym672_modifier, _sym672_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym673_modifier, _sym673_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym674_modifier, _sym674_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym675_modifier, _sym675_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym676_modifier, _sym676_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym677_modifier, _sym677_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym678_modifier, _sym678_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym679_modifier, _sym679_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2
struct adl_operand _sym666_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym680[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c000000,},0, "", 0, 22, 22, 0, 7, _sym667_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym681[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym94, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_

// Instruction rdx2_
struct adl_operand _sym682_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 1, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 2, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 5, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 7, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 9, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 10, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 11, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 12, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 13, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 14, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 15, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 16, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 17, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 18, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 19, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 20, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 21, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 22, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 23, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 24, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 25, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 26, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 27, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym683[] = { &_sym36, &_sym28, &_sym94, &_sym2, &_sym6, &_sym88, &_sym98, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, &_sym4, 0, &_sym114, &_sym116, &_sym138,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv

// Shorthand:  rdx2_adptv -> rdx2_;

static bfd_uint64_t _sym686_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym686_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym687_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym687_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym688_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym688_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym689_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym689_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym690_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[12].X_add_number) ); }

static int _sym690_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym691_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[12].X_add_number) ); }

static int _sym691_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym692_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[12].X_add_number) ); }

static int _sym692_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym693_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[12].X_add_number) ); }

static int _sym693_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym694_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym694_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym695_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym695_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym696_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym696_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym697_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym697_mod_indices[] = { 13,  -1 };
struct adl_operand _sym685_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym686_modifier, _sym686_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym687_modifier, _sym687_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym688_modifier, _sym688_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym689_modifier, _sym689_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym690_modifier, _sym690_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym691_modifier, _sym691_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym692_modifier, _sym692_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym693_modifier, _sym693_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym694_modifier, _sym694_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym695_modifier, _sym695_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym696_modifier, _sym696_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym697_modifier, _sym697_mod_indices, 0, 0,0, -1,-1,},{103, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_adptv
struct adl_operand _sym684_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym698[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c040000,},0, "", 0, 25, 25, 0, 9, _sym685_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym699[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym94, &_sym116, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv_ind

// Shorthand:  rdx2_adptv_ind -> rdx2_;

static bfd_uint64_t _sym702_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym702_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym703_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym703_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym704_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym704_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym705_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym705_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym706_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym706_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym707_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym707_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym708_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym708_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym709_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym709_mod_indices[] = { 12,  -1 };
struct adl_operand _sym701_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym702_modifier, _sym702_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym703_modifier, _sym703_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym704_modifier, _sym704_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym705_modifier, _sym705_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym706_modifier, _sym706_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym707_modifier, _sym707_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym708_modifier, _sym708_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym709_modifier, _sym709_mod_indices, 0, 0,0, -1,-1,},{103, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_adptv_ind
struct adl_operand _sym700_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym710[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c042000,},0, "", 0, 21, 21, 0, 9, _sym701_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym711[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym94, &_sym116, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv_shift_wr

// Shorthand:  rdx2_adptv_shift_wr -> rdx2_;

static bfd_uint64_t _sym714_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym714_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym715_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym715_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym716_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym716_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym717_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym717_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym718_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym718_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym719_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym719_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym720_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym720_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym721_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym721_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym722_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym722_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym723_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym723_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym724_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym724_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym725_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym725_mod_indices[] = { 11,  -1 };
struct adl_operand _sym713_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym714_modifier, _sym714_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym715_modifier, _sym715_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym716_modifier, _sym716_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym717_modifier, _sym717_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym718_modifier, _sym718_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym719_modifier, _sym719_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym720_modifier, _sym720_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym721_modifier, _sym721_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym722_modifier, _sym722_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym723_modifier, _sym723_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym724_modifier, _sym724_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym725_modifier, _sym725_mod_indices, 0, 0,0, -1,-1,},{103, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_adptv_shift_wr
struct adl_operand _sym712_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym726[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c040000,0x0,0x0,0x80,},0, "", 0, 23, 23, 0, 7, _sym713_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym727[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym94, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_adptv_shift_wr_ind

// Shorthand:  rdx2_adptv_shift_wr_ind -> rdx2_;

static bfd_uint64_t _sym730_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym730_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym731_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym731_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym732_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym732_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym733_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym733_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym734_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym734_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym735_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym735_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym736_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym736_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym737_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym737_mod_indices[] = { 10,  -1 };
struct adl_operand _sym729_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym730_modifier, _sym730_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym731_modifier, _sym731_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym732_modifier, _sym732_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym733_modifier, _sym733_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym734_modifier, _sym734_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym735_modifier, _sym735_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym736_modifier, _sym736_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym737_modifier, _sym737_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_adptv_shift_wr_ind
struct adl_operand _sym728_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym738[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c042000,0x0,0x0,0x80,},0, "", 0, 19, 19, 0, 7, _sym729_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym739[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym94, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_ind

// Shorthand:  rdx2_ind -> rdx2_;

static bfd_uint64_t _sym742_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym742_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym743_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym743_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym744_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym744_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym745_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym745_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym746_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym746_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym747_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym747_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym748_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym748_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym749_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym749_mod_indices[] = { 9,  -1 };
struct adl_operand _sym741_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym742_modifier, _sym742_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym743_modifier, _sym743_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym744_modifier, _sym744_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym745_modifier, _sym745_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym746_modifier, _sym746_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym747_modifier, _sym747_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym748_modifier, _sym748_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym749_modifier, _sym749_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_ind
struct adl_operand _sym740_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym750[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c002000,},0, "", 0, 18, 18, 0, 7, _sym741_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym751[] = { &_sym36, &_sym88, &_sym138, &_sym28, &_sym96, &_sym94, &_sym116, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_shift_wr

// Shorthand:  rdx2_shift_wr -> rdx2_;

static bfd_uint64_t _sym754_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym754_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym755_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym755_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym756_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym756_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym757_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym757_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym758_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym758_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym759_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym759_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym760_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym760_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym761_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym761_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym762_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym762_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym763_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym763_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym764_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym764_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym765_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym765_mod_indices[] = { 10,  -1 };
struct adl_operand _sym753_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym754_modifier, _sym754_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym755_modifier, _sym755_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym756_modifier, _sym756_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym757_modifier, _sym757_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym758_modifier, _sym758_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym759_modifier, _sym759_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym760_modifier, _sym760_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym761_modifier, _sym761_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym762_modifier, _sym762_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym763_modifier, _sym763_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym764_modifier, _sym764_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym765_modifier, _sym765_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_shift_wr
struct adl_operand _sym752_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym766[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c000000,0x0,0x0,0x80,},0, "", 0, 22, 22, 0, 6, _sym753_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym767[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym94, &_sym4, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx2_shift_wr_ind

// Shorthand:  rdx2_shift_wr_ind -> rdx2_;

static bfd_uint64_t _sym770_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym770_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym771_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym771_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym772_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym772_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym773_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym773_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym774_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym774_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym775_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym775_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym776_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym776_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym777_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym777_mod_indices[] = { 9,  -1 };
struct adl_operand _sym769_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{74, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{76, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym770_modifier, _sym770_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym771_modifier, _sym771_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym772_modifier, _sym772_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym773_modifier, _sym773_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym774_modifier, _sym774_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym775_modifier, _sym775_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym776_modifier, _sym776_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym777_modifier, _sym777_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx2_shift_wr_ind
struct adl_operand _sym768_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym778[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c002000,0x0,0x0,0x80,},0, "", 0, 18, 18, 0, 6, _sym769_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym779[] = { &_sym36, &_sym88, &_sym138, &_sym96, &_sym94, &_sym4, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0

// Shorthand:  rdx4_mm0 -> rdx4_mm0_;

static bfd_uint64_t _sym782_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym782_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym783_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym783_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym784_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym784_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym785_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym785_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym786_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym786_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym787_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym787_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym788_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym788_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym789_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym789_mod_indices[] = { 9,  -1 };
struct adl_operand _sym781_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym782_modifier, _sym782_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym783_modifier, _sym783_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym784_modifier, _sym784_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym785_modifier, _sym785_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym786_modifier, _sym786_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym787_modifier, _sym787_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym788_modifier, _sym788_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym789_modifier, _sym789_mod_indices, 0, 0,0, -1,-1,},{7, 12, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mm0
struct adl_operand _sym780_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym790[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 16, 128, 128,  0xf, { 0x88000000,},0, "", 0, 20, 20, 0, 7, _sym781_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym791[] = { &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym116, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0_

// Instruction rdx4_mm0_
struct adl_operand _sym792_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 2, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 4, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 5, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 6, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 7, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 8, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 9, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 10, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 11, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 12, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 13, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 14, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 15, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 16, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 17, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 18, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 19, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 20, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym793[] = { &_sym36, &_sym146, &_sym26, &_sym88, &_sym96, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, 0, 0, &_sym116, &_sym138,  (struct enum_fields *) -1,};

// Instruction rdx4_mm0_ind

// Shorthand:  rdx4_mm0_ind -> rdx4_mm0_;

static bfd_uint64_t _sym796_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym796_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym797_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym797_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym798_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym798_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym799_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym799_mod_indices[] = { 8,  -1 };
struct adl_operand _sym795_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym796_modifier, _sym796_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym797_modifier, _sym797_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym798_modifier, _sym798_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym799_modifier, _sym799_mod_indices, 0, 0,0, -1,-1,},{7, 11, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mm0_ind
struct adl_operand _sym794_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym800[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 16, 128, 128,  0xf, { 0x88002000,},0, "", 0, 16, 16, 0, 7, _sym795_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym801[] = { &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0

// Shorthand:  rdx4_mmn0 -> rdx4_mmn0_;

static bfd_uint64_t _sym804_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym804_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym805_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym805_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym806_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym806_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym807_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym807_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym808_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym808_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym809_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym809_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym810_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym810_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym811_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym811_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym812_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym812_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym813_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym813_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym814_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym814_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym815_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym815_mod_indices[] = { 10,  -1 };
struct adl_operand _sym803_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym804_modifier, _sym804_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym805_modifier, _sym805_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym806_modifier, _sym806_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym807_modifier, _sym807_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym808_modifier, _sym808_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym809_modifier, _sym809_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym810_modifier, _sym810_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym811_modifier, _sym811_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym812_modifier, _sym812_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym813_modifier, _sym813_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym814_modifier, _sym814_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym815_modifier, _sym815_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0
struct adl_operand _sym802_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym816[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88000000,},0, "", 0, 24, 24, 0, 7, _sym803_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym817[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_

// Instruction rdx4_mmn0_
struct adl_operand _sym818_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 2, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 13, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 4, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 5, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 6, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 7, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 9, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 10, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 11, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 12, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 13, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 14, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 15, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 16, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 17, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 18, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 19, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 20, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 21, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 22, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 23, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 24, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 25, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 26, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 27, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 28, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 29, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 30, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym819[] = { &_sym36, &_sym146, &_sym26, &_sym2, &_sym6, &_sym88, &_sym96, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, &_sym62, &_sym4, 0, 0, &_sym68, &_sym114, &_sym116, &_sym138,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv

// Shorthand:  rdx4_mmn0_adptv -> rdx4_mmn0_;

static bfd_uint64_t _sym822_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym822_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym823_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym823_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym824_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym824_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym825_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym825_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym826_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[12].X_add_number) ); }

static int _sym826_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym827_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[12].X_add_number) ); }

static int _sym827_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym828_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[12].X_add_number) ); }

static int _sym828_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym829_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[12].X_add_number) ); }

static int _sym829_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym830_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym830_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym831_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym831_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym832_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym832_mod_indices[] = { 13,  -1 };

static bfd_uint64_t _sym833_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[13].X_add_number),FALSE)) ); }

static int _sym833_mod_indices[] = { 13,  -1 };
struct adl_operand _sym821_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym822_modifier, _sym822_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym823_modifier, _sym823_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym824_modifier, _sym824_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym825_modifier, _sym825_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym826_modifier, _sym826_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym827_modifier, _sym827_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym828_modifier, _sym828_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym829_modifier, _sym829_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym830_modifier, _sym830_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym831_modifier, _sym831_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym832_modifier, _sym832_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym833_modifier, _sym833_mod_indices, 0, 0,0, -1,-1,},{103, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 16, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 17, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_adptv
struct adl_operand _sym820_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 14, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 17, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym834[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88040000,},0, "", 0, 27, 27, 0, 9, _sym821_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym835[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_ind

// Shorthand:  rdx4_mmn0_adptv_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym838_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym838_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym839_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym839_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym840_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym840_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym841_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym841_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym842_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym842_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym843_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym843_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym844_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym844_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym845_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym845_mod_indices[] = { 12,  -1 };
struct adl_operand _sym837_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym838_modifier, _sym838_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym839_modifier, _sym839_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym840_modifier, _sym840_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym841_modifier, _sym841_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym842_modifier, _sym842_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym843_modifier, _sym843_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym844_modifier, _sym844_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym845_modifier, _sym845_mod_indices, 0, 0,0, -1,-1,},{103, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_adptv_ind
struct adl_operand _sym836_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym846[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88042000,},0, "", 0, 23, 23, 0, 9, _sym837_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym847[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, &_sym6, &_sym4, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft

// Shorthand:  rdx4_mmn0_adptv_shft -> rdx4_mmn0_;

static bfd_uint64_t _sym850_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym850_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym851_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym851_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym852_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym852_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym853_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym853_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym854_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym854_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym855_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym855_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym856_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym856_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym857_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym857_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym858_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym858_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym859_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym859_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym860_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym860_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym861_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym861_mod_indices[] = { 11,  -1 };
struct adl_operand _sym849_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym850_modifier, _sym850_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym851_modifier, _sym851_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym852_modifier, _sym852_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym853_modifier, _sym853_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym854_modifier, _sym854_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym855_modifier, _sym855_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym856_modifier, _sym856_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym857_modifier, _sym857_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym858_modifier, _sym858_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym859_modifier, _sym859_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym860_modifier, _sym860_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym861_modifier, _sym861_mod_indices, 0, 0,0, -1,-1,},{103, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_adptv_shft
struct adl_operand _sym848_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym862[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88040000,},0, "", 0, 25, 25, 0, 8, _sym849_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym863[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym116, &_sym6, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft_ind

// Shorthand:  rdx4_mmn0_adptv_shft_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym866_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym866_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym867_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym867_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym868_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym868_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym869_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym869_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym870_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym870_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym871_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym871_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym872_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym872_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym873_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym873_mod_indices[] = { 10,  -1 };
struct adl_operand _sym865_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym866_modifier, _sym866_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym867_modifier, _sym867_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym868_modifier, _sym868_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym869_modifier, _sym869_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym870_modifier, _sym870_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym871_modifier, _sym871_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym872_modifier, _sym872_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym873_modifier, _sym873_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_adptv_shft_ind
struct adl_operand _sym864_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym874[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88042000,},0, "", 0, 21, 21, 0, 6, _sym865_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym875[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym116, &_sym6, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft_wr

// Shorthand:  rdx4_mmn0_adptv_shft_wr -> rdx4_mmn0_;

static bfd_uint64_t _sym878_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym878_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym879_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym879_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym880_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym880_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym881_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym881_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym882_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[11].X_add_number) ); }

static int _sym882_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym883_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[11].X_add_number) ); }

static int _sym883_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym884_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[11].X_add_number) ); }

static int _sym884_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym885_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[11].X_add_number) ); }

static int _sym885_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym886_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym886_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym887_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym887_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym888_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym888_mod_indices[] = { 12,  -1 };

static bfd_uint64_t _sym889_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[12].X_add_number),FALSE)) ); }

static int _sym889_mod_indices[] = { 12,  -1 };
struct adl_operand _sym877_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym878_modifier, _sym878_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym879_modifier, _sym879_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym880_modifier, _sym880_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym881_modifier, _sym881_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym882_modifier, _sym882_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym883_modifier, _sym883_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym884_modifier, _sym884_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym885_modifier, _sym885_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym886_modifier, _sym886_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym887_modifier, _sym887_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym888_modifier, _sym888_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym889_modifier, _sym889_mod_indices, 0, 0,0, -1,-1,},{103, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_adptv_shft_wr
struct adl_operand _sym876_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 16, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym890[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88040000,0x0,0x0,0x80,},0, "", 0, 26, 26, 0, 8, _sym877_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym891[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym6, &_sym112, 0, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_adptv_shft_wr_ind

// Shorthand:  rdx4_mmn0_adptv_shft_wr_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym894_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym894_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym895_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym895_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym896_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym896_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym897_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym897_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym898_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym898_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym899_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym899_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym900_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym900_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym901_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym901_mod_indices[] = { 11,  -1 };
struct adl_operand _sym893_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{2, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym894_modifier, _sym894_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym895_modifier, _sym895_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym896_modifier, _sym896_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym897_modifier, _sym897_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym898_modifier, _sym898_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym899_modifier, _sym899_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym900_modifier, _sym900_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym901_modifier, _sym901_mod_indices, 0, 0,0, -1,-1,},{103, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_adptv_shft_wr_ind
struct adl_operand _sym892_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym902[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88042000,0x0,0x0,0x80,},0, "", 0, 22, 22, 0, 8, _sym893_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym903[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym6, &_sym112, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_ind

// Shorthand:  rdx4_mmn0_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym906_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym906_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym907_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym907_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym908_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym908_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym909_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym909_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym910_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym910_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym911_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym911_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym912_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym912_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym913_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym913_mod_indices[] = { 9,  -1 };
struct adl_operand _sym905_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{23, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym906_modifier, _sym906_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym907_modifier, _sym907_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym908_modifier, _sym908_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym909_modifier, _sym909_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym910_modifier, _sym910_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym911_modifier, _sym911_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym912_modifier, _sym912_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym913_modifier, _sym913_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_ind
struct adl_operand _sym904_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 9, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym914[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88002000,},0, "", 0, 20, 20, 0, 7, _sym905_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym915[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym26, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft

// Shorthand:  rdx4_mmn0_shft -> rdx4_mmn0_;

static bfd_uint64_t _sym918_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym918_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym919_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym919_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym920_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym920_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym921_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym921_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym922_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym922_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym923_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym923_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym924_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym924_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym925_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym925_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym926_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym926_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym927_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym927_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym928_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym928_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym929_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym929_mod_indices[] = { 10,  -1 };
struct adl_operand _sym917_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym918_modifier, _sym918_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym919_modifier, _sym919_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym920_modifier, _sym920_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym921_modifier, _sym921_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym922_modifier, _sym922_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym923_modifier, _sym923_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym924_modifier, _sym924_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym925_modifier, _sym925_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym926_modifier, _sym926_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym927_modifier, _sym927_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym928_modifier, _sym928_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym929_modifier, _sym929_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_shft
struct adl_operand _sym916_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym930[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88000000,},0, "", 0, 24, 24, 0, 7, _sym917_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym931[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym116, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft_ind

// Shorthand:  rdx4_mmn0_shft_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym934_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym934_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym935_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym935_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym936_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym936_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym937_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym937_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym938_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym938_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym939_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym939_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym940_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym940_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym941_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym941_mod_indices[] = { 9,  -1 };
struct adl_operand _sym933_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym934_modifier, _sym934_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym935_modifier, _sym935_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym936_modifier, _sym936_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym937_modifier, _sym937_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym938_modifier, _sym938_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym939_modifier, _sym939_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym940_modifier, _sym940_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym941_modifier, _sym941_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_shft_ind
struct adl_operand _sym932_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym942[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88002000,},0, "", 0, 20, 20, 0, 5, _sym933_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym943[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym116, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft_wr

// Shorthand:  rdx4_mmn0_shft_wr -> rdx4_mmn0_;

static bfd_uint64_t _sym946_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym946_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym947_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym947_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym948_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym948_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym949_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym949_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym950_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[10].X_add_number) ); }

static int _sym950_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym951_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[10].X_add_number) ); }

static int _sym951_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym952_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[10].X_add_number) ); }

static int _sym952_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym953_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[10].X_add_number) ); }

static int _sym953_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym954_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym954_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym955_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym955_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym956_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym956_mod_indices[] = { 11,  -1 };

static bfd_uint64_t _sym957_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[11].X_add_number),FALSE)) ); }

static int _sym957_mod_indices[] = { 11,  -1 };
struct adl_operand _sym945_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym946_modifier, _sym946_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym947_modifier, _sym947_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym948_modifier, _sym948_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym949_modifier, _sym949_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym950_modifier, _sym950_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym951_modifier, _sym951_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym952_modifier, _sym952_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym953_modifier, _sym953_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym954_modifier, _sym954_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym955_modifier, _sym955_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym956_modifier, _sym956_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym957_modifier, _sym957_mod_indices, 0, 0,0, -1,-1,},{103, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_shft_wr
struct adl_operand _sym944_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 11, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 12, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 15, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym958[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88000000,0x0,0x0,0x80,},0, "", 0, 25, 25, 0, 7, _sym945_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym959[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym112, 0, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction rdx4_mmn0_shft_wr_ind

// Shorthand:  rdx4_mmn0_shft_wr_ind -> rdx4_mmn0_;

static bfd_uint64_t _sym962_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym962_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym963_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym963_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym964_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym964_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym965_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym965_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym966_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym966_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym967_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym967_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym968_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym968_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym969_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym969_mod_indices[] = { 10,  -1 };
struct adl_operand _sym961_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{129, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{71, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{75, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym962_modifier, _sym962_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym963_modifier, _sym963_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym964_modifier, _sym964_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym965_modifier, _sym965_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym966_modifier, _sym966_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym967_modifier, _sym967_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym968_modifier, _sym968_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym969_modifier, _sym969_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{1, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{3, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{121, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction rdx4_mmn0_shft_wr_ind
struct adl_operand _sym960_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 124, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 13, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 14, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym970[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88002000,0x0,0x0,0x80,},0, "", 0, 21, 21, 0, 7, _sym961_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym971[] = { &_sym68, &_sym36, &_sym146, &_sym96, &_sym88, &_sym138, &_sym112, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction scp

// Shorthand:  scp -> scp_;

static bfd_uint64_t _sym974_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym974_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym975_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym975_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym976_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym976_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym977_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym977_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym978_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym978_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym979_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym979_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym980_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym980_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym981_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym981_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym982_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym982_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym983_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym983_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym984_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym984_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym985_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym985_mod_indices[] = { 7,  -1 };
struct adl_operand _sym973_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 3, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym974_modifier, _sym974_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym975_modifier, _sym975_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym976_modifier, _sym976_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym977_modifier, _sym977_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym978_modifier, _sym978_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym979_modifier, _sym979_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym980_modifier, _sym980_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym981_modifier, _sym981_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym982_modifier, _sym982_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym983_modifier, _sym983_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym984_modifier, _sym984_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym985_modifier, _sym985_mod_indices, 0, 0,0, -1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction scp
struct adl_operand _sym972_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym986[] = {
  // scp_    (0)
  { "scp_", 16, 128, 128,  0xf, { 0xa8000000,},0, "", 0, 19, 19, 0, 3, _sym973_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym987[] = { &_sym36, &_sym92, &_sym116, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp_

// Instruction scp_
struct adl_operand _sym988_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 2, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 3, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 5, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 6, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 7, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 8, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 9, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 10, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 11, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 12, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 13, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 14, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 15, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 16, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 17, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 18, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 19, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 20, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 21, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 22, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym989[] = { &_sym36, &_sym92, 0, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, &_sym112, 0, &_sym114, &_sym116,  (struct enum_fields *) -1,};

// Instruction scp_ind

// Shorthand:  scp_ind -> scp_;

static bfd_uint64_t _sym992_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym992_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym993_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym993_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym994_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym994_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym995_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym995_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym996_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym996_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym997_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym997_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym998_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym998_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym999_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym999_mod_indices[] = { 6,  -1 };
struct adl_operand _sym991_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 3, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym992_modifier, _sym992_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym993_modifier, _sym993_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym994_modifier, _sym994_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym995_modifier, _sym995_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym996_modifier, _sym996_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym997_modifier, _sym997_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym998_modifier, _sym998_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym999_modifier, _sym999_mod_indices, 0, 0,0, -1,-1,},{103, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction scp_ind
struct adl_operand _sym990_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1000[] = {
  // scp_    (0)
  { "scp_", 16, 128, 128,  0xf, { 0xa8002000,},0, "", 0, 15, 15, 0, 3, _sym991_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1001[] = { &_sym36, &_sym92, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp_shft_wr

// Shorthand:  scp_shft_wr -> scp_;

static bfd_uint64_t _sym1004_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym1004_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1005_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym1005_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1006_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym1006_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1007_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym1007_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1008_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[7].X_add_number) ); }

static int _sym1008_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1009_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[7].X_add_number) ); }

static int _sym1009_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1010_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[7].X_add_number) ); }

static int _sym1010_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1011_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[7].X_add_number) ); }

static int _sym1011_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1012_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1012_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1013_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1013_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1014_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1014_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1015_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1015_mod_indices[] = { 8,  -1 };
struct adl_operand _sym1003_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1004_modifier, _sym1004_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1005_modifier, _sym1005_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1006_modifier, _sym1006_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1007_modifier, _sym1007_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1008_modifier, _sym1008_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1009_modifier, _sym1009_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1010_modifier, _sym1010_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1011_modifier, _sym1011_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1012_modifier, _sym1012_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1013_modifier, _sym1013_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1014_modifier, _sym1014_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1015_modifier, _sym1015_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 2, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 3, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction scp_shft_wr
struct adl_operand _sym1002_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1016[] = {
  // scp_    (0)
  { "scp_", 16, 128, 128,  0xf, { 0xa8000000,0x0,0x0,0x80,},0, "", 0, 20, 20, 0, 4, _sym1003_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1017[] = { &_sym36, &_sym92, &_sym112, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction scp_shft_wr_ind

// Shorthand:  scp_shft_wr_ind -> scp_;

static bfd_uint64_t _sym1020_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym1020_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1021_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym1021_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1022_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym1022_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1023_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym1023_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1024_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1024_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1025_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1025_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1026_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1026_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1027_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1027_mod_indices[] = { 7,  -1 };
struct adl_operand _sym1019_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{73, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{56, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1020_modifier, _sym1020_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1021_modifier, _sym1021_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1022_modifier, _sym1022_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1023_modifier, _sym1023_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1024_modifier, _sym1024_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1025_modifier, _sym1025_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1026_modifier, _sym1026_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1027_modifier, _sym1027_mod_indices, 0, 0,0, -1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 2, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 3, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction scp_shft_wr_ind
struct adl_operand _sym1018_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 12, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1028[] = {
  // scp_    (0)
  { "scp_", 16, 128, 128,  0xf, { 0xa8002000,0x0,0x0,0x80,},0, "", 0, 16, 16, 0, 4, _sym1019_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1029[] = { &_sym36, &_sym92, &_sym112, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sel

// Shorthand:  sel -> sel_;

static bfd_uint64_t _sym1032_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[2].X_add_number) ); }

static int _sym1032_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1033_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[2].X_add_number) ); }

static int _sym1033_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1034_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[2].X_add_number) ); }

static int _sym1034_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1035_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[2].X_add_number) ); }

static int _sym1035_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1036_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[4].X_add_number) ); }

static int _sym1036_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1037_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[4].X_add_number) ); }

static int _sym1037_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1038_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[4].X_add_number) ); }

static int _sym1038_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1039_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[4].X_add_number) ); }

static int _sym1039_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1040_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym1040_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1041_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym1041_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1042_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym1042_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1043_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym1043_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1044_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[3].X_add_number) ); }

static int _sym1044_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1045_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[3].X_add_number) ); }

static int _sym1045_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1046_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[3].X_add_number) ); }

static int _sym1046_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1047_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[3].X_add_number) ); }

static int _sym1047_mod_indices[] = { 3,  -1 };
struct adl_operand _sym1031_operands[] = { {72, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{89, 1, 0, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1032_modifier, _sym1032_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1033_modifier, _sym1033_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1034_modifier, _sym1034_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1035_modifier, _sym1035_mod_indices, 0, 0,0, -1,-1,},{98, 0, 0, 0, 0, 0, 0, 0, _sym1036_modifier, _sym1036_mod_indices, 0, 0,0, -1,-1,},{96, 0, 0, 0, 0, 0, 0, 0, _sym1037_modifier, _sym1037_mod_indices, 0, 0,0, -1,-1,},{97, 0, 0, 0, 0, 0, 0, 0, _sym1038_modifier, _sym1038_mod_indices, 0, 0,0, -1,-1,},{99, 0, 0, 0, 0, 0, 0, 0, _sym1039_modifier, _sym1039_mod_indices, 0, 0,0, -1,-1,},{87, 0, 0, 0, 0, 0, 0, 0, _sym1040_modifier, _sym1040_mod_indices, 0, 0,0, -1,-1,},{85, 0, 0, 0, 0, 0, 0, 0, _sym1041_modifier, _sym1041_mod_indices, 0, 0,0, -1,-1,},{86, 0, 0, 0, 0, 0, 0, 0, _sym1042_modifier, _sym1042_mod_indices, 0, 0,0, -1,-1,},{88, 0, 0, 0, 0, 0, 0, 0, _sym1043_modifier, _sym1043_mod_indices, 0, 0,0, -1,-1,},{83, 0, 0, 0, 0, 0, 0, 0, _sym1044_modifier, _sym1044_mod_indices, 0, 0,0, -1,-1,},{81, 0, 0, 0, 0, 0, 0, 0, _sym1045_modifier, _sym1045_mod_indices, 0, 0,0, -1,-1,},{82, 0, 0, 0, 0, 0, 0, 0, _sym1046_modifier, _sym1046_mod_indices, 0, 0,0, -1,-1,},{84, 0, 0, 0, 0, 0, 0, 0, _sym1047_modifier, _sym1047_mod_indices, 0, 0,0, -1,-1,},};

// Instruction sel
struct adl_operand _sym1030_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 2, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{140, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{144, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{141, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1048[] = {
  // sel_    (0)
  { "sel_", 16, 128, 128,  0xf, { 0x38000000,},0, "", 0, 18, 18, 0, 1, _sym1031_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1049[] = { &_sym90, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sel_

// Instruction sel_
struct adl_operand _sym1050_operands[] = { {72, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{89, 1, 0, 0, 39, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 2, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 3, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 4, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 5, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{98, 6, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{96, 7, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{97, 8, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{99, 9, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{87, 10, 0, 0, 80, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{85, 11, 0, 0, 82, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{86, 12, 0, 0, 84, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{88, 13, 0, 0, 93, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{83, 14, 0, 0, 96, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{81, 15, 0, 0, 98, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{82, 16, 0, 0, 100, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{84, 17, 0, 0, 109, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1051[] = { &_sym90, 0, &_sym18, 0, 0, 0, &_sym124, 0, 0, 0, &_sym110, 0, 0, 0, &_sym108, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set

// Shorthand:  set -> set_;

static bfd_uint64_t _sym1054_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym1054_mod_indices[] = { 0, 1,  -1 };

static bfd_uint64_t _sym1055_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[2].X_add_number) ); }

static int _sym1055_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1056_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[2].X_add_number) ); }

static int _sym1056_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1057_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[2].X_add_number) ); }

static int _sym1057_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1058_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[2].X_add_number) ); }

static int _sym1058_mod_indices[] = { 2,  -1 };

static bfd_uint64_t _sym1059_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[1].X_add_number) ); }

static int _sym1059_mod_indices[] = { 0, 1,  -1 };
struct adl_operand _sym1053_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{106, 0, 0, 0, 0, 0, 0, 0, _sym1054_modifier, _sym1054_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1055_modifier, _sym1055_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1056_modifier, _sym1056_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1057_modifier, _sym1057_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1058_modifier, _sym1058_mod_indices, 0, 0,0, -1,-1,},{29, 0, 0, 0, 0, 0, 0, 0, _sym1059_modifier, _sym1059_mod_indices, 0, 0,0, -1,-1,},};

// Instruction set
struct adl_operand _sym1052_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 2, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1060[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x4000000,},0, "", 0, 7, 7, 0, 1, _sym1053_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1061[] = { &_sym120, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_

// Instruction set_
struct adl_operand _sym1062_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{41, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 2, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{106, 3, ADL_REGISTER, 0, 34, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 4, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 5, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 6, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 7, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1063[] = { &_sym120, &_sym54, &_sym32, 0, &_sym18, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_chrp

// Shorthand:  set_chrp -> set_;

static bfd_uint64_t _sym1066_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[0].X_add_number) ); }

static int _sym1066_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym1067_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[0].X_add_number) ); }

static int _sym1067_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym1068_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[0].X_add_number) ); }

static int _sym1068_mod_indices[] = { 0,  -1 };

static bfd_uint64_t _sym1069_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[0].X_add_number) ); }

static int _sym1069_mod_indices[] = { 0,  -1 };
struct adl_operand _sym1065_operands[] = { {16, 0, 0, 0, 0, 0, 0, 0, _sym1066_modifier, _sym1066_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1067_modifier, _sym1067_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1068_modifier, _sym1068_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1069_modifier, _sym1069_mod_indices, 0, 0,0, -1,-1,},};

// Instruction set_chrp
struct adl_operand _sym1064_operands[] = { {130, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1070[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x4800000,},0, "", 0, 4, 4, 0, 0, _sym1065_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1071[] = { 0,  (struct enum_fields *) -1,};

// Instruction set_ind

// Shorthand:  set_ind -> set_;

static bfd_uint64_t _sym1074_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[0].X_add_number) ); }

static int _sym1074_mod_indices[] = { 0,  -1 };
struct adl_operand _sym1073_operands[] = { {106, 0, 0, 0, 0, 0, 0, 0, _sym1074_modifier, _sym1074_mod_indices, 0, 0,0, -1,-1,},};

// Instruction set_ind
struct adl_operand _sym1072_operands[] = { {145, 0, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1075[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x6002000,},0, "", 0, 1, 1, 0, 0, _sym1073_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1076[] = { 0,  (struct enum_fields *) -1,};

// Instruction stop

// Instruction stop
struct adl_operand _sym1077_operands[] = {  0 };
struct enum_fields *_sym1078[] = {  (struct enum_fields *) -1,};

// Instruction sub

// Shorthand:  sub -> sub_;

static bfd_uint64_t _sym1081_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[3].X_add_number) ); }

static int _sym1081_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1082_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[3].X_add_number) ); }

static int _sym1082_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1083_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[3].X_add_number) ); }

static int _sym1083_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1084_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[3].X_add_number) ); }

static int _sym1084_mod_indices[] = { 3,  -1 };

static bfd_uint64_t _sym1085_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym1085_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1086_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym1086_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1087_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym1087_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1088_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym1088_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1089_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym1089_mod_indices[] = { 0, 4,  -1 };

static bfd_uint64_t _sym1090_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_imm_dat ( (operands[0].X_add_number) , (operands[4].X_add_number) ); }

static int _sym1090_mod_indices[] = { 0, 4,  -1 };
struct adl_operand _sym1080_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{94, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{50, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1081_modifier, _sym1081_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1082_modifier, _sym1082_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1083_modifier, _sym1083_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1084_modifier, _sym1084_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1085_modifier, _sym1085_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1086_modifier, _sym1086_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1087_modifier, _sym1087_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1088_modifier, _sym1088_mod_indices, 0, 0,0, -1,-1,},{100, 0, 0, 0, 0, 0, 0, 0, _sym1089_modifier, _sym1089_mod_indices, 0, 0,0, -1,-1,},{29, 0, 0, 0, 0, 0, 0, 0, _sym1090_modifier, _sym1090_mod_indices, 0, 0,0, -1,-1,},};

// Instruction sub
struct adl_operand _sym1079_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 3, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1091[] = {
  // sub_    (0)
  { "sub_", 16, 128, 128,  0xf, { 0x2c000000,},0, "", 0, 13, 13, 0, 3, _sym1080_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1092[] = { &_sym120, &_sym118, &_sym64, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sub_

// Instruction sub_
struct adl_operand _sym1093_operands[] = { {95, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{94, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{41, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{50, 3, 0, 0, 27, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 4, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 5, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 6, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 7, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 8, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 9, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 10, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 11, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{98, 12, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{100, 13, ADL_REGISTER, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{99, 14, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{29, 15, 0, 0, 80, 0ull, 0xffffffffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1094[] = { &_sym120, &_sym118, &_sym54, &_sym64, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym124, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction sub_chrp

// Shorthand:  sub_chrp -> sub_;
struct adl_operand _sym1096_operands[] = {  0 };

// Instruction sub_chrp
struct adl_operand _sym1095_operands[] = {  0 };
static struct adl_opcode _sym1097[] = {
  // sub_    (0)
  { "sub_", 16, 128, 128,  0xf, { 0x2c800000,},0, "", 0, 0, 0, 0, 0, _sym1096_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1098[] = {  (struct enum_fields *) -1,};

// Instruction sync

// Instruction sync
struct adl_operand _sym1099_operands[] = {  0 };
struct enum_fields *_sym1100[] = {  (struct enum_fields *) -1,};

// Instruction vmt

// Shorthand:  vmt -> vmt_;

static bfd_uint64_t _sym1103_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1103_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1104_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1104_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1105_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1105_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1106_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1106_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1107_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym1107_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1108_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym1108_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1109_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym1109_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1110_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym1110_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1111_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1111_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1112_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1112_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1113_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1113_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1114_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1114_mod_indices[] = { 10,  -1 };
struct adl_operand _sym1102_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1103_modifier, _sym1103_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1104_modifier, _sym1104_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1105_modifier, _sym1105_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1106_modifier, _sym1106_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1107_modifier, _sym1107_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1108_modifier, _sym1108_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1109_modifier, _sym1109_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1110_modifier, _sym1110_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1111_modifier, _sym1111_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1112_modifier, _sym1112_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1113_modifier, _sym1113_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1114_modifier, _sym1114_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt
struct adl_operand _sym1101_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1115[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98000000,},0, "", 0, 22, 22, 0, 7, _sym1102_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1116[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_

// Instruction vmt_
struct adl_operand _sym1117_operands[] = { {78, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 3, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{66, 4, 0, 0, 11, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 5, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 6, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 7, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 8, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 9, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 10, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 11, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 12, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 13, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 14, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 15, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 16, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 17, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 18, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 19, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 20, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 21, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 22, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 23, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{28, 24, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 25, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1118[] = { &_sym102, &_sym40, &_sym74, &_sym76, &_sym78, &_sym80, &_sym70, &_sym48, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_imm_off_sq2s2

// Shorthand:  vmt_imm_off_sq2s2 -> vmt_;

static bfd_uint64_t _sym1121_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1121_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1122_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1122_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1123_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1123_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1124_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1124_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1125_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym1125_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1126_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym1126_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1127_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym1127_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1128_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym1128_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1129_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1129_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1130_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1130_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1131_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1131_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1132_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1132_mod_indices[] = { 10,  -1 };
struct adl_operand _sym1120_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1121_modifier, _sym1121_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1122_modifier, _sym1122_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1123_modifier, _sym1123_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1124_modifier, _sym1124_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1125_modifier, _sym1125_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1126_modifier, _sym1126_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1127_modifier, _sym1127_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1128_modifier, _sym1128_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1129_modifier, _sym1129_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1130_modifier, _sym1130_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1131_modifier, _sym1131_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1132_modifier, _sym1132_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{28, 13, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 14, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_imm_off_sq2s2
struct adl_operand _sym1119_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{136, 14, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1133[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x980c0000,},0, "", 0, 24, 24, 0, 7, _sym1120_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1134[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_imm_off_sq2s2_ind

// Shorthand:  vmt_imm_off_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym1137_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1137_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1138_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1138_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1139_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1139_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1140_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1140_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1141_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1141_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1142_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1142_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1143_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1143_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1144_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1144_mod_indices[] = { 9,  -1 };
struct adl_operand _sym1136_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1137_modifier, _sym1137_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1138_modifier, _sym1138_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1139_modifier, _sym1139_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1140_modifier, _sym1140_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1141_modifier, _sym1141_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1142_modifier, _sym1142_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1143_modifier, _sym1143_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1144_modifier, _sym1144_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{28, 12, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 13, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_imm_off_sq2s2_ind
struct adl_operand _sym1135_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{136, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1145[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x980c2000,},0, "", 0, 20, 20, 0, 7, _sym1136_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1146[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_ind

// Shorthand:  vmt_ind -> vmt_;

static bfd_uint64_t _sym1149_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1149_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1150_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1150_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1151_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1151_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1152_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1152_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1153_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1153_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1154_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1154_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1155_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1155_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1156_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1156_mod_indices[] = { 9,  -1 };
struct adl_operand _sym1148_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1149_modifier, _sym1149_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1150_modifier, _sym1150_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1151_modifier, _sym1151_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1152_modifier, _sym1152_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1153_modifier, _sym1153_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1154_modifier, _sym1154_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1155_modifier, _sym1155_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1156_modifier, _sym1156_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_ind
struct adl_operand _sym1147_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1157[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98002000,},0, "", 0, 18, 18, 0, 7, _sym1148_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1158[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_shift_sq2s2

// Shorthand:  vmt_shift_sq2s2 -> vmt_;

static bfd_uint64_t _sym1161_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1161_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1162_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1162_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1163_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1163_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1164_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1164_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1165_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym1165_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1166_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym1166_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1167_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym1167_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1168_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym1168_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1169_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1169_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1170_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1170_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1171_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1171_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1172_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1172_mod_indices[] = { 10,  -1 };
struct adl_operand _sym1160_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1161_modifier, _sym1161_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1162_modifier, _sym1162_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1163_modifier, _sym1163_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1164_modifier, _sym1164_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1165_modifier, _sym1165_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1166_modifier, _sym1166_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1167_modifier, _sym1167_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1168_modifier, _sym1168_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1169_modifier, _sym1169_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1170_modifier, _sym1170_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1171_modifier, _sym1171_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1172_modifier, _sym1172_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 13, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_shift_sq2s2
struct adl_operand _sym1159_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1173[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98040000,},0, "", 0, 23, 23, 0, 7, _sym1160_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1174[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_shift_sq2s2_ind

// Shorthand:  vmt_shift_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym1177_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1177_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1178_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1178_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1179_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1179_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1180_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1180_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1181_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1181_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1182_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1182_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1183_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1183_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1184_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1184_mod_indices[] = { 9,  -1 };
struct adl_operand _sym1176_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1177_modifier, _sym1177_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1178_modifier, _sym1178_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1179_modifier, _sym1179_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1180_modifier, _sym1180_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1181_modifier, _sym1181_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1182_modifier, _sym1182_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1183_modifier, _sym1183_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1184_modifier, _sym1184_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_shift_sq2s2_ind
struct adl_operand _sym1175_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1185[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98042000,},0, "", 0, 19, 19, 0, 7, _sym1176_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1186[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_vec_sq2s2

// Shorthand:  vmt_vec_sq2s2 -> vmt_;

static bfd_uint64_t _sym1189_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1189_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1190_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1190_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1191_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1191_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1192_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1192_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1193_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym1193_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1194_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym1194_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1195_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym1195_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1196_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym1196_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1197_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1197_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1198_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1198_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1199_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1199_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1200_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1200_mod_indices[] = { 10,  -1 };
struct adl_operand _sym1188_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1189_modifier, _sym1189_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1190_modifier, _sym1190_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1191_modifier, _sym1191_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1192_modifier, _sym1192_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1193_modifier, _sym1193_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1194_modifier, _sym1194_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1195_modifier, _sym1195_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1196_modifier, _sym1196_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1197_modifier, _sym1197_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1198_modifier, _sym1198_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1199_modifier, _sym1199_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1200_modifier, _sym1200_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 13, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_vec_sq2s2
struct adl_operand _sym1187_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1201[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98100000,},0, "", 0, 23, 23, 0, 7, _sym1188_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1202[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_vec_sq2s2_ind

// Shorthand:  vmt_vec_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym1205_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1205_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1206_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1206_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1207_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1207_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1208_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1208_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1209_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1209_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1210_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1210_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1211_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1211_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1212_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1212_mod_indices[] = { 9,  -1 };
struct adl_operand _sym1204_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1205_modifier, _sym1205_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1206_modifier, _sym1206_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1207_modifier, _sym1207_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1208_modifier, _sym1208_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1209_modifier, _sym1209_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1210_modifier, _sym1210_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1211_modifier, _sym1211_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1212_modifier, _sym1212_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_vec_sq2s2_ind
struct adl_operand _sym1203_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1213[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98102000,},0, "", 0, 19, 19, 0, 7, _sym1204_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1214[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_wr_off_sq2s2

// Shorthand:  vmt_wr_off_sq2s2 -> vmt_;

static bfd_uint64_t _sym1217_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1217_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1218_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1218_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1219_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1219_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1220_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1220_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1221_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[9].X_add_number) ); }

static int _sym1221_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1222_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[9].X_add_number) ); }

static int _sym1222_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1223_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[9].X_add_number) ); }

static int _sym1223_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1224_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[9].X_add_number) ); }

static int _sym1224_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1225_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1225_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1226_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1226_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1227_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1227_mod_indices[] = { 10,  -1 };

static bfd_uint64_t _sym1228_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[10].X_add_number),FALSE)) ); }

static int _sym1228_mod_indices[] = { 10,  -1 };
struct adl_operand _sym1216_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1217_modifier, _sym1217_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1218_modifier, _sym1218_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1219_modifier, _sym1219_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1220_modifier, _sym1220_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1221_modifier, _sym1221_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1222_modifier, _sym1222_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1223_modifier, _sym1223_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1224_modifier, _sym1224_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1225_modifier, _sym1225_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1226_modifier, _sym1226_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1227_modifier, _sym1227_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1228_modifier, _sym1228_mod_indices, 0, 0,0, -1,-1,},{103, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 13, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_wr_off_sq2s2
struct adl_operand _sym1215_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{130, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 10, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 11, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 13, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1229[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98080000,},0, "", 0, 23, 23, 0, 7, _sym1216_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1230[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction vmt_wr_off_sq2s2_ind

// Shorthand:  vmt_wr_off_sq2s2_ind -> vmt_;

static bfd_uint64_t _sym1233_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[8].X_add_number) ); }

static int _sym1233_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1234_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[8].X_add_number) ); }

static int _sym1234_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1235_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[8].X_add_number) ); }

static int _sym1235_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1236_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[8].X_add_number) ); }

static int _sym1236_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1237_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1237_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1238_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1238_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1239_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1239_mod_indices[] = { 9,  -1 };

static bfd_uint64_t _sym1240_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[9].X_add_number),FALSE)) ); }

static int _sym1240_mod_indices[] = { 9,  -1 };
struct adl_operand _sym1232_operands[] = { {78, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{32, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{64, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{65, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{67, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{57, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1233_modifier, _sym1233_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1234_modifier, _sym1234_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1235_modifier, _sym1235_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1236_modifier, _sym1236_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1237_modifier, _sym1237_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1238_modifier, _sym1238_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1239_modifier, _sym1239_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1240_modifier, _sym1240_mod_indices, 0, 0,0, -1,-1,},{103, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{22, 12, 0, 0, 112, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction vmt_wr_off_sq2s2_ind
struct adl_operand _sym1231_operands[] = { {0, 0, 0, 0, 7, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 16, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 15, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 9, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 14, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 9, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 10, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{135, 12, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1241[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98082000,},0, "", 0, 19, 19, 0, 7, _sym1232_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1242[] = { &_sym40, &_sym102, &_sym48, &_sym70, &_sym74, &_sym76, &_sym80, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction wait

// Instruction wait
struct adl_operand _sym1243_operands[] = { {20, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{124, 1, 0, 0, 11, 0ull, 0x1full, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1244[] = { &_sym22, 0,  (struct enum_fields *) -1,};

// Instruction watchdog

// Instruction watchdog
struct adl_operand _sym1245_operands[] = { {20, 0, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{127, 1, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{126, 2, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{125, 3, 0, 0, 104, 0ull, 0xffffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1246[] = { &_sym22, &_sym142, &_sym140, 0,  (struct enum_fields *) -1,};

// Instruction win_mm0

// Shorthand:  win_mm0 -> win_mm0_;

static bfd_uint64_t _sym1249_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1249_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1250_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1250_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1251_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1251_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1252_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_O_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1252_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1253_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (dest_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1253_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1254_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (dest_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1254_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1255_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1255_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1256_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (dest_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1256_mod_indices[] = { 5,  -1 };
struct adl_operand _sym1248_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1249_modifier, _sym1249_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1250_modifier, _sym1250_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1251_modifier, _sym1251_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1252_modifier, _sym1252_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1253_modifier, _sym1253_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1254_modifier, _sym1254_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1255_modifier, _sym1255_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1256_modifier, _sym1256_mod_indices, 0, 0,0, -1,-1,},{7, 8, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mm0
struct adl_operand _sym1247_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{146, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_O_checker, 0,-1,-1,},{131, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_O_checker, 0,-1,-1,},{0, 6, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1257[] = {
  // win_mm0_    (0)
  { "win_mm0_", 16, 128, 128,  0xf, { 0x84000000,},0, "", 0, 16, 16, 0, 2, _sym1248_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1258[] = { &_sym36, &_sym144, &_sym116, 0, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction win_mm0_

// Instruction win_mm0_
struct adl_operand _sym1259_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 2, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 4, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 5, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 6, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 7, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 8, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 9, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 10, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 11, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{7, 12, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 13, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 14, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 15, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 16, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1260[] = { &_sym36, &_sym144, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, 0, 0, 0, 0, &_sym116,  (struct enum_fields *) -1,};

// Instruction win_mm0_ind

// Shorthand:  win_mm0_ind -> win_mm0_;

static bfd_uint64_t _sym1263_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_WR_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1263_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1264_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_WR_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1264_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1265_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_WR_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1265_mod_indices[] = { 4,  -1 };

static bfd_uint64_t _sym1266_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_WR_checker((operands[4].X_add_number),FALSE)) ); }

static int _sym1266_mod_indices[] = { 4,  -1 };
struct adl_operand _sym1262_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1263_modifier, _sym1263_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1264_modifier, _sym1264_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1265_modifier, _sym1265_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1266_modifier, _sym1266_mod_indices, 0, 0,0, -1,-1,},{7, 7, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 5, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 6, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{8, 8, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mm0_ind
struct adl_operand _sym1261_operands[] = { {0, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{149, 4, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_WR_checker, 0,-1,-1,},{0, 5, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 6, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 7, 0, 0, 64, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 96, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1267[] = {
  // win_mm0_    (0)
  { "win_mm0_", 16, 128, 128,  0xf, { 0x84002000,},0, "", 0, 12, 12, 0, 2, _sym1262_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1268[] = { &_sym36, &_sym144, &_sym116, 0, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0

// Shorthand:  win_mmn0 -> win_mmn0_;

static bfd_uint64_t _sym1271_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1271_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1272_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1272_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1273_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1273_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1274_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_O_checker((operands[5].X_add_number),FALSE)) ); }

static int _sym1274_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1275_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (dest_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1275_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1276_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (dest_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1276_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1277_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1277_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1278_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (dest_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1278_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1279_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1279_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1280_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1280_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1281_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1281_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1282_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1282_mod_indices[] = { 7,  -1 };
struct adl_operand _sym1270_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1271_modifier, _sym1271_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1272_modifier, _sym1272_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1273_modifier, _sym1273_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1274_modifier, _sym1274_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1275_modifier, _sym1275_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1276_modifier, _sym1276_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1277_modifier, _sym1277_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1278_modifier, _sym1278_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1279_modifier, _sym1279_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1280_modifier, _sym1280_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1281_modifier, _sym1281_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1282_modifier, _sym1282_mod_indices, 0, 0,0, -1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 10, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 11, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mmn0
struct adl_operand _sym1269_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{146, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_O_checker, 0,-1,-1,},{131, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_O_checker, 0,-1,-1,},{137, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1283[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84000000,},0, "", 0, 21, 21, 0, 3, _sym1270_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1284[] = { &_sym68, &_sym36, &_sym144, &_sym116, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0_

// Instruction win_mmn0_
struct adl_operand _sym1285_operands[] = { {30, 0, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 1, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{26, 2, 0, 0, 18, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 3, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 4, 0, 0, 32, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{101, 5, 0, 0, 34, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{102, 6, 0, 0, 36, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{105, 7, 0, 0, 45, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{16, 8, 0, 0, 48, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{13, 9, 0, 0, 50, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{14, 10, 0, 0, 52, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{17, 11, 0, 0, 61, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{53, 12, 0, 0, 64, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{51, 13, 0, 0, 66, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{52, 14, 0, 0, 68, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{54, 15, 0, 0, 77, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{103, 16, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 17, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 18, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 19, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 20, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 21, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 22, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{91, 23, 0, 0, 120, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 24, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
struct enum_fields *_sym1286[] = { &_sym36, &_sym144, &_sym32, 0, &_sym126, 0, 0, 0, &_sym18, 0, 0, 0, &_sym66, 0, 0, 0, 0, 0, &_sym62, &_sym112, 0, 0, &_sym68, &_sym114, &_sym116,  (struct enum_fields *) -1,};

// Instruction win_mmn0_ind

// Shorthand:  win_mmn0_ind -> win_mmn0_;

static bfd_uint64_t _sym1289_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[5].X_add_number) ); }

static int _sym1289_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1290_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[5].X_add_number) ); }

static int _sym1290_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1291_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[5].X_add_number) ); }

static int _sym1291_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1292_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[5].X_add_number) ); }

static int _sym1292_mod_indices[] = { 5,  -1 };

static bfd_uint64_t _sym1293_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1293_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1294_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1294_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1295_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1295_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1296_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1296_mod_indices[] = { 6,  -1 };
struct adl_operand _sym1288_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1289_modifier, _sym1289_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1290_modifier, _sym1290_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1291_modifier, _sym1291_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1292_modifier, _sym1292_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1293_modifier, _sym1293_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1294_modifier, _sym1294_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1295_modifier, _sym1295_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1296_modifier, _sym1296_mod_indices, 0, 0,0, -1,-1,},{103, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 9, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 10, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{92, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mmn0_ind
struct adl_operand _sym1287_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 121, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 5, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 7, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 8, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1297[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84002000,},0, "", 0, 17, 17, 0, 3, _sym1288_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1298[] = { &_sym68, &_sym36, &_sym144, &_sym116, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0_shft

// Shorthand:  win_mmn0_shft -> win_mmn0_;

static bfd_uint64_t _sym1301_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (src_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1301_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1302_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (src_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1302_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1303_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (src_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1303_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1304_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (src_add_O_checker((operands[6].X_add_number),FALSE)) ); }

static int _sym1304_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1305_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (dest_add_O_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1305_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1306_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (dest_add_O_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1306_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1307_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (dest_add_O_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1307_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1308_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (dest_add_O_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1308_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1309_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1309_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1310_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1310_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1311_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1311_mod_indices[] = { 8,  -1 };

static bfd_uint64_t _sym1312_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[8].X_add_number),FALSE)) ); }

static int _sym1312_mod_indices[] = { 8,  -1 };
struct adl_operand _sym1300_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1301_modifier, _sym1301_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1302_modifier, _sym1302_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1303_modifier, _sym1303_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1304_modifier, _sym1304_mod_indices, 0, 0,0, -1,-1,},{16, 0, 0, 0, 0, 0, 0, 0, _sym1305_modifier, _sym1305_mod_indices, 0, 0,0, -1,-1,},{13, 0, 0, 0, 0, 0, 0, 0, _sym1306_modifier, _sym1306_mod_indices, 0, 0,0, -1,-1,},{14, 0, 0, 0, 0, 0, 0, 0, _sym1307_modifier, _sym1307_mod_indices, 0, 0,0, -1,-1,},{17, 0, 0, 0, 0, 0, 0, 0, _sym1308_modifier, _sym1308_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1309_modifier, _sym1309_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1310_modifier, _sym1310_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1311_modifier, _sym1311_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1312_modifier, _sym1312_mod_indices, 0, 0,0, -1,-1,},{103, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 11, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 12, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mmn0_shft
struct adl_operand _sym1299_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{146, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,src_add_O_checker, 0,-1,-1,},{131, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,dest_add_O_checker, 0,-1,-1,},{137, 8, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 9, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 12, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1313[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84000000,0x0,0x0,0x80,},0, "", 0, 22, 22, 0, 4, _sym1300_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1314[] = { &_sym68, &_sym36, &_sym144, &_sym112, 0, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instruction win_mmn0_shft_ind

// Shorthand:  win_mmn0_shft_ind -> win_mmn0_;

static bfd_uint64_t _sym1317_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (operands[6].X_add_number) ); }

static int _sym1317_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1318_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (operands[6].X_add_number) ); }

static int _sym1318_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1319_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (operands[6].X_add_number) ); }

static int _sym1319_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1320_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (operands[6].X_add_number) ); }

static int _sym1320_mod_indices[] = { 6,  -1 };

static bfd_uint64_t _sym1321_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_mode ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1321_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1322_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_bank ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1322_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1323_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_col ( 1 , (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1323_mod_indices[] = { 7,  -1 };

static bfd_uint64_t _sym1324_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return get_slice ( (mult_coef_add_checker((operands[7].X_add_number),FALSE)) ); }

static int _sym1324_mod_indices[] = { 7,  -1 };
struct adl_operand _sym1316_operands[] = { {30, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{128, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{122, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{104, 0, 0, 0, 0, 0, 0, 0, _sym1317_modifier, _sym1317_mod_indices, 0, 0,0, -1,-1,},{101, 0, 0, 0, 0, 0, 0, 0, _sym1318_modifier, _sym1318_mod_indices, 0, 0,0, -1,-1,},{102, 0, 0, 0, 0, 0, 0, 0, _sym1319_modifier, _sym1319_mod_indices, 0, 0,0, -1,-1,},{105, 0, 0, 0, 0, 0, 0, 0, _sym1320_modifier, _sym1320_mod_indices, 0, 0,0, -1,-1,},{53, 0, 0, 0, 0, 0, 0, 0, _sym1321_modifier, _sym1321_mod_indices, 0, 0,0, -1,-1,},{51, 0, 0, 0, 0, 0, 0, 0, _sym1322_modifier, _sym1322_mod_indices, 0, 0,0, -1,-1,},{52, 0, 0, 0, 0, 0, 0, 0, _sym1323_modifier, _sym1323_mod_indices, 0, 0,0, -1,-1,},{54, 0, 0, 0, 0, 0, 0, 0, _sym1324_modifier, _sym1324_mod_indices, 0, 0,0, -1,-1,},{103, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{15, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{49, 10, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{90, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{48, 11, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{93, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{55, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};

// Instruction win_mmn0_shft_ind
struct adl_operand _sym1315_operands[] = { {0, 0, 0, 0, 118, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 1, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 2, 0, 0, 7, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 3, 0, 0, 100, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 4, 0, 0, 112, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 5, 0, 0, 19, 0ull, 0x1fffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{145, 6, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{137, 7, 0, 0, 127, 0ull, 0xffffull, 0ull, 0, 0, 0,mult_coef_add_checker, 0,-1,-1,},{0, 8, 0, 0, 80, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 9, 0, 0, 88, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 10, 0, 0, 96, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,},{0, 11, 0, 0, 103, 0ull, 0x1ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym1325[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84002000,0x0,0x0,0x80,},0, "", 0, 18, 18, 0, 4, _sym1316_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

struct enum_fields *_sym1326[] = { &_sym68, &_sym36, &_sym144, &_sym112, 0, 0, 0, 0, 0, 0, &_sym62, 0,  (struct enum_fields *) -1,};

// Instructions named 'add'.
static struct adl_opcode _sym1327[] = {
  // add    (0)
  { "add", 0, 128, 128,  0xf, { 0 },_sym160, "^ *(\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 3, _sym147_operands,_sym159,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'add_'.
static struct adl_opcode _sym1328[] = {
  // add_    (0)
  { "add_", 16, 128, 128,  0xf, { 0xc000000,},_sym162, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 15, 30, 0, 0, _sym161_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'cmp'.
static struct adl_opcode _sym1329[] = {
  // cmp    (0)
  { "cmp", 0, 128, 128,  0xf, { 0 },_sym176, "^ *(\\.immed|\\.reg)? ([^, ,, ]+),([^, ,, ]+),([^, ,, ]+)", 0, 4, 4, 0, 1, _sym163_operands,_sym175,1,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'cmp.chrp'.
static struct adl_opcode _sym1330[] = {
  // cmp_chrp    (0)
  { "cmp_chrp", 0, 128, 128,  0xf, { 0 },_sym190, "^ *([^,, ]+),([^,, ]+)", 0, 2, 2, 0, 0, _sym179_operands,_sym189,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'cmp_'.
static struct adl_opcode _sym1331[] = {
  // cmp_    (0)
  { "cmp_", 16, 128, 128,  0xf, { 0x30000000,},_sym178, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 14, 28, 0, 0, _sym177_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy'.
static struct adl_opcode _sym1332[] = {
  // copy    (0)
  { "copy", 0, 128, 128,  0xf, { 0 },_sym202, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values)? ([^,    ,,,,,, ]+) ([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+),([^,    ,,,,,, ]+)", 0, 11, 11, 0, 3, _sym191_operands,_sym201,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.ind'.
static struct adl_opcode _sym1333[] = {
  // copy_ind    (0)
  { "copy_ind", 0, 128, 128,  0xf, { 0 },_sym212, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.keep_orig|\\.reset_values)? ([^,    ,,,,, ]+) ([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+)", 0, 10, 10, 0, 3, _sym205_operands,_sym211,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.thld'.
static struct adl_opcode _sym1334[] = {
  // copy_thld    (0)
  { "copy_thld", 0, 128, 128,  0xf, { 0 },_sym224, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? ([^,      ,,,,,,, ]+) ([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+),([^,      ,,,,,,, ]+)", 0, 14, 14, 0, 5, _sym213_operands,_sym223,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy.thld.ind'.
static struct adl_opcode _sym1335[] = {
  // copy_thld_ind    (0)
  { "copy_thld_ind", 0, 128, 128,  0xf, { 0 },_sym232, "^ *(\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? (\\.real|\\.cmplx|\\.log2|\\.simple_copy|\\.threshold_ge|\\.threshold_lt|\\.transpose_copy|\\.copy_real_pack|\\.copy_imag_pack|\\.copy_unpack|\\.partial_copy_real|\\.partial_copy_imag|\\.partial_copy_r2i|\\.partial_copy_i2r|\\.copy_clear|\\.copy_shift|\\.transpose_fwd|\\.copy_fwd|\\.transpose_bck|\\.copy_bck|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_rst|\\.rst_wr|\\.keep_orig|\\.reset_values)? ([^,      ,,,,,, ]+) ([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+)", 0, 13, 13, 0, 5, _sym225_operands,_sym231,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'copy_'.
static struct adl_opcode _sym1336[] = {
  // copy_    (0)
  { "copy_", 16, 128, 128,  0xf, { 0x94000000,},_sym204, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 21, 42, 0, 0, _sym203_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'evt'.
static struct adl_opcode _sym1337[] = {
  // evt    (0)
  { "evt", 16, 128, 128,  0xf, { 0x24000000,},_sym234, "^ *(\\.low|\\.high)? (\\.lsb|\\.bit0|\\.bit1|\\.bit2|\\.bit3|\\.bit4|\\.bit5|\\.bit6|\\.msb|\\.bit7)", 0, 2, 2, 0, 1, _sym233_operands,0,0,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir'.
static struct adl_opcode _sym1338[] = {
  // fir    (0)
  { "fir", 0, 128, 128,  0xf, { 0 },_sym250, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,      ,,,, ]+) ([^,      ,,,, ]+) ([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+)", 0, 11, 11, 0, 4, _sym235_operands,_sym249,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.ind'.
static struct adl_opcode _sym1339[] = {
  // fir_ind    (0)
  { "fir_ind", 0, 128, 128,  0xf, { 0 },_sym264, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+)", 0, 10, 10, 0, 4, _sym253_operands,_sym263,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.shift_wr'.
static struct adl_opcode _sym1340[] = {
  // fir_shift_wr    (0)
  { "fir_shift_wr", 0, 128, 128,  0xf, { 0 },_sym280, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,       ,,,, ]+) ([^,       ,,,, ]+) ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 4, _sym265_operands,_sym279,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir.shift_wr.ind'.
static struct adl_opcode _sym1341[] = {
  // fir_shift_wr_ind    (0)
  { "fir_shift_wr_ind", 0, 128, 128,  0xf, { 0 },_sym292, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.zero_init|\\.const_init|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,       ,,, ]+) ([^,       ,,, ]+) ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 4, _sym281_operands,_sym291,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'fir_'.
static struct adl_opcode _sym1342[] = {
  // fir_    (0)
  { "fir_", 16, 128, 128,  0xf, { 0xa4000000,},_sym252, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 24, 48, 0, 0, _sym251_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get'.
static struct adl_opcode _sym1343[] = {
  // get    (0)
  { "get", 0, 128, 128,  0xf, { 0 },_sym301, "^ *([^,, ]+),([^,, ]+)", 0, 2, 2, 0, 0, _sym293_operands,_sym300,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get.ind'.
static struct adl_opcode _sym1344[] = {
  // get_ind    (0)
  { "get_ind", 0, 128, 128,  0xf, { 0 },_sym308, "^ *([^, ]+)", 0, 1, 1, 0, 0, _sym304_operands,_sym307,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'get_'.
static struct adl_opcode _sym1345[] = {
  // get_    (0)
  { "get_", 16, 128, 128,  0xf, { 0x8000000,},_sym303, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 6, 12, 0, 0, _sym302_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'hist'.
static struct adl_opcode _sym1346[] = {
  // hist    (0)
  { "hist", 0, 128, 128,  0xf, { 0 },_sym320, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 6, _sym309_operands,_sym319,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'hist.ind'.
static struct adl_opcode _sym1347[] = {
  // hist_ind    (0)
  { "hist_ind", 0, 128, 128,  0xf, { 0 },_sym330, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.read_store|\\.read|\\.acc|\\.store|\\.16_24bins|\\.32bins|\\.64bins|\\.no_pack_real|\\.no_pack_im|\\.pack|\\.16bits|\\.24bits)? ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 6, _sym323_operands,_sym329,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'hist_'.
static struct adl_opcode _sym1348[] = {
  // hist_    (0)
  { "hist_", 16, 128, 128,  0xf, { 0x90000000,},_sym322, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 19, 38, 0, 0, _sym321_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2'.
static struct adl_opcode _sym1349[] = {
  // irdx2    (0)
  { "irdx2", 0, 128, 128,  0xf, { 0 },_sym346, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 6, _sym331_operands,_sym345,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv'.
static struct adl_opcode _sym1350[] = {
  // irdx2_adptv    (0)
  { "irdx2_adptv", 0, 128, 128,  0xf, { 0 },_sym364, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,          ,,,, ]+) ([^,          ,,,, ]+) ([^,          ,,,, ]+),([^,          ,,,, ]+),([^,          ,,,, ]+),([^,          ,,,, ]+),([^,          ,,,, ]+)", 0, 15, 15, 0, 8, _sym349_operands,_sym363,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv.ind'.
static struct adl_opcode _sym1351[] = {
  // irdx2_adptv_ind    (0)
  { "irdx2_adptv_ind", 0, 128, 128,  0xf, { 0 },_sym376, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,          ,,, ]+) ([^,          ,,, ]+) ([^,          ,,, ]+),([^,          ,,, ]+),([^,          ,,, ]+),([^,          ,,, ]+)", 0, 14, 14, 0, 8, _sym365_operands,_sym375,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv.shift_wr'.
static struct adl_opcode _sym1352[] = {
  // irdx2_adptv_shift_wr    (0)
  { "irdx2_adptv_shift_wr", 0, 128, 128,  0xf, { 0 },_sym392, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,        ,,,, ]+) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 6, _sym377_operands,_sym391,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.adptv.shift_wr.ind'.
static struct adl_opcode _sym1353[] = {
  // irdx2_adptv_shift_wr_ind    (0)
  { "irdx2_adptv_shift_wr_ind", 0, 128, 128,  0xf, { 0 },_sym404, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,        ,,, ]+) ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 6, _sym393_operands,_sym403,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.ind'.
static struct adl_opcode _sym1354[] = {
  // irdx2_ind    (0)
  { "irdx2_ind", 0, 128, 128,  0xf, { 0 },_sym416, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 6, _sym405_operands,_sym415,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.shift_wr'.
static struct adl_opcode _sym1355[] = {
  // irdx2_shift_wr    (0)
  { "irdx2_shift_wr", 0, 128, 128,  0xf, { 0 },_sym432, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,       ,,,, ]+) ([^,       ,,,, ]+) ([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+),([^,       ,,,, ]+)", 0, 12, 12, 0, 5, _sym417_operands,_sym431,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2.shift_wr.ind'.
static struct adl_opcode _sym1356[] = {
  // irdx2_shift_wr_ind    (0)
  { "irdx2_shift_wr_ind", 0, 128, 128,  0xf, { 0 },_sym444, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,       ,,, ]+) ([^,       ,,, ]+) ([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+),([^,       ,,, ]+)", 0, 11, 11, 0, 5, _sym433_operands,_sym443,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx2_'.
static struct adl_opcode _sym1357[] = {
  // irdx2_    (0)
  { "irdx2_", 16, 128, 128,  0xf, { 0xb0000000,},_sym348, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 27, 54, 0, 0, _sym347_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4'.
static struct adl_opcode _sym1358[] = {
  // irdx4_mmn0    (0)
  { "irdx4_mmn0", 0, 128, 128,  0xf, { 0 },_sym482, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, _sym467_operands,_sym481,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
  // irdx4_mm0    (1)
  { "irdx4_mm0", 0, 128, 128,  0xf, { 0 },_sym456, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym445_operands,_sym455,1,7, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'irdx4.adptv'.
static struct adl_opcode _sym1359[] = {
  // irdx4_mmn0_adptv    (0)
  { "irdx4_mmn0_adptv", 0, 128, 128,  0xf, { 0 },_sym500, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,           ,,,,,, ]+)", 0, 18, 18, 0, 9, _sym485_operands,_sym499,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.adptv.ind'.
static struct adl_opcode _sym1360[] = {
  // irdx4_mmn0_adptv_ind    (0)
  { "irdx4_mmn0_adptv_ind", 0, 128, 128,  0xf, { 0 },_sym512, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,,, ]+) ([^,           ,,,,, ]+) ([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,           ,,,,, ]+)", 0, 17, 17, 0, 9, _sym501_operands,_sym511,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.ind'.
static struct adl_opcode _sym1361[] = {
  // irdx4_mmn0_ind    (0)
  { "irdx4_mmn0_ind", 0, 128, 128,  0xf, { 0 },_sym524, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym513_operands,_sym523,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
  // irdx4_mm0_ind    (1)
  { "irdx4_mm0_ind", 0, 128, 128,  0xf, { 0 },_sym466, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym459_operands,_sym465,1,7, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'irdx4.shift'.
static struct adl_opcode _sym1362[] = {
  // irdx4_mmn0_shft    (0)
  { "irdx4_mmn0_shft", 0, 128, 128,  0xf, { 0 },_sym540, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, _sym525_operands,_sym539,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.shift.ind'.
static struct adl_opcode _sym1363[] = {
  // irdx4_mmn0_shft_ind    (0)
  { "irdx4_mmn0_shft_ind", 0, 128, 128,  0xf, { 0 },_sym552, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym541_operands,_sym551,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.shift_wr'.
static struct adl_opcode _sym1364[] = {
  // irdx4_mmn0_shft_wr    (0)
  { "irdx4_mmn0_shft_wr", 0, 128, 128,  0xf, { 0 },_sym568, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,         ,,,,,, ]+)", 0, 16, 16, 0, 7, _sym553_operands,_sym567,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4.shift_wr.ind'.
static struct adl_opcode _sym1365[] = {
  // irdx4_mmn0_shft_wr_ind    (0)
  { "irdx4_mmn0_shft_wr_ind", 0, 128, 128,  0xf, { 0 },_sym580, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,,, ]+) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,         ,,,,, ]+)", 0, 15, 15, 0, 7, _sym569_operands,_sym579,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4_mm0_'.
static struct adl_opcode _sym1366[] = {
  // irdx4_mm0_    (0)
  { "irdx4_mm0_", 16, 128, 128,  0xf, { 0xac000000,},_sym458, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 21, 42, 0, 0, _sym457_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'irdx4_mmn0_'.
static struct adl_opcode _sym1367[] = {
  // irdx4_mmn0_    (0)
  { "irdx4_mmn0_", 16, 128, 128,  0xf, { 0xac000000,},_sym484, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 31, 62, 0, 0, _sym483_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jump_'.
static struct adl_opcode _sym1368[] = {
  // jump_    (0)
  { "jump_", 16, 128, 128,  0xf, { 0x34000000,},_sym582, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 4, 8, 0, 0, _sym581_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jumpa'.
static struct adl_opcode _sym1369[] = {
  // jump_alw    (0)
  { "jump_alw", 0, 128, 128,  0xf, { 0 },_sym586, "^ *([^, ]+)", 0, 1, 1, 0, 0, _sym583_operands,_sym585,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jumpc'.
static struct adl_opcode _sym1370[] = {
  // jump_cond    (0)
  { "jump_cond", 0, 128, 128,  0xf, { 0 },_sym590, "^ *(\\.bit0|\\.bit1|\\.bit2|\\.bit3|\\.bit4|\\.bit5|\\.bit6|\\.bit7|\\.bit8|\\.bit9) ([^,   +]+) ([^,   ]+)", 0, 3, 3, 0, 0, _sym587_operands,_sym589,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'loop'.
static struct adl_opcode _sym1371[] = {
  // loop    (0)
  { "loop", 16, 128, 128,  0xf, { 0x14000000,},_sym592, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 3, 6, 0, 0, _sym591_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
  // loop_    (1)
  { "loop_", 0, 128, 128,  0xf, { 0 },_sym598, "^ *(\\.immed|\\.reg)? ([^,  ]+)", 0, 2, 2, 0, 1, _sym593_operands,_sym597,1,1, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'maxs'.
static struct adl_opcode _sym1372[] = {
  // maxs    (0)
  { "maxs", 0, 128, 128,  0xf, { 0 },_sym612, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? ([^,         ,,,, ]+) ([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+)", 0, 14, 14, 0, 8, _sym599_operands,_sym611,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs.gbl'.
static struct adl_opcode _sym1373[] = {
  // maxs_gbl    (0)
  { "maxs_gbl", 0, 128, 128,  0xf, { 0 },_sym628, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? ([^,     ,,,, ]+) ([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+)", 0, 10, 10, 0, 4, _sym615_operands,_sym627,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs.gbl.ind'.
static struct adl_opcode _sym1374[] = {
  // maxs_gbl_ind    (0)
  { "maxs_gbl_ind", 0, 128, 128,  0xf, { 0 },_sym638, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? ([^,     ,,, ]+) ([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+)", 0, 9, 9, 0, 4, _sym629_operands,_sym637,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs.ind'.
static struct adl_opcode _sym1375[] = {
  // maxs_ind    (0)
  { "maxs_ind", 0, 128, 128,  0xf, { 0 },_sym648, "^ *(\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? (\\.real|\\.cmplx|\\.log2|\\.no_pre|\\.abs_abs_proc|\\.abs_mag_proc|\\.no_thld_cmp|\\.thld_cmp|\\.no_tag_in|\\.tag_in|\\.packed_bitfld|\\.tagged_vect|\\.no_cyc_ext|\\.cyc_ext|\\.in_24real|\\.in_24im|\\.in_48packed|\\.no_maxsn|\\.maxsn_16|\\.maxsn_8|\\.maxsn_4)? ([^,         ,,, ]+) ([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+)", 0, 13, 13, 0, 8, _sym639_operands,_sym647,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'maxs_'.
static struct adl_opcode _sym1376[] = {
  // maxs_    (0)
  { "maxs_", 16, 128, 128,  0xf, { 0x9c000000,},_sym614, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 23, 46, 0, 0, _sym613_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'next'.
static struct adl_opcode _sym1377[] = {
  // next    (0)
  { "next", 16, 128, 128,  0xf, { 0x18000000,},_sym650, "^", 0, 0, 0, 0, 0, _sym649_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'pdma'.
static struct adl_opcode _sym1378[] = {
  // pdma    (0)
  { "pdma", 0, 128, 128,  0xf, { 0 },_sym658, "^ *(\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? ([^,      ,,,,, ]+) ([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+)", 0, 12, 12, 0, 5, _sym651_operands,_sym657,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'pdma.ind'.
static struct adl_opcode _sym1379[] = {
  // pdma_ind    (0)
  { "pdma_ind", 0, 128, 128,  0xf, { 0 },_sym665, "^ *(\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? (\\.zeropad|\\.signext|\\.notag|\\.tag|\\.16cmplx|\\.24cmplx|\\.24real|\\.16real|\\.48bin|\\.16swap|\\.16clubbing|\\.cp4|\\.cp6|\\.cp8|\\.cp16|\\.cp4d|\\.abs|\\.idx|\\.idxsum|\\.cp4fmta|\\.cp4dfmta|\\.cp4fmtb|\\.cp4dfmtb|\\.cp8fmtb|\\.cp16fmtb|\\.sysram2opram|\\.opram2sysram|\\.async|\\.sync)? ([^,      ,,,,, ]+) ([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+)", 0, 12, 12, 0, 5, _sym661_operands,_sym664,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'pdma_'.
static struct adl_opcode _sym1380[] = {
  // pdma_    (0)
  { "pdma_", 16, 128, 128,  0xf, { 0xa0000000,},_sym660, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 16, 32, 0, 0, _sym659_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2'.
static struct adl_opcode _sym1381[] = {
  // rdx2    (0)
  { "rdx2", 0, 128, 128,  0xf, { 0 },_sym681, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym666_operands,_sym680,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv'.
static struct adl_opcode _sym1382[] = {
  // rdx2_adptv    (0)
  { "rdx2_adptv", 0, 128, 128,  0xf, { 0 },_sym699, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,, ]+) ([^,           ,,,, ]+) ([^,           ,,,, ]+),([^,           ,,,, ]+),([^,           ,,,, ]+),([^,           ,,,, ]+),([^,           ,,,, ]+)", 0, 16, 16, 0, 9, _sym684_operands,_sym698,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv.ind'.
static struct adl_opcode _sym1383[] = {
  // rdx2_adptv_ind    (0)
  { "rdx2_adptv_ind", 0, 128, 128,  0xf, { 0 },_sym711, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,, ]+) ([^,           ,,, ]+) ([^,           ,,, ]+),([^,           ,,, ]+),([^,           ,,, ]+),([^,           ,,, ]+)", 0, 15, 15, 0, 9, _sym700_operands,_sym710,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv.shift_wr'.
static struct adl_opcode _sym1384[] = {
  // rdx2_adptv_shift_wr    (0)
  { "rdx2_adptv_shift_wr", 0, 128, 128,  0xf, { 0 },_sym727, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,, ]+) ([^,         ,,,, ]+) ([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+),([^,         ,,,, ]+)", 0, 14, 14, 0, 7, _sym712_operands,_sym726,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.adptv.shift_wr.ind'.
static struct adl_opcode _sym1385[] = {
  // rdx2_adptv_shift_wr_ind    (0)
  { "rdx2_adptv_shift_wr_ind", 0, 128, 128,  0xf, { 0 },_sym739, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,, ]+) ([^,         ,,, ]+) ([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+),([^,         ,,, ]+)", 0, 13, 13, 0, 7, _sym728_operands,_sym738,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.ind'.
static struct adl_opcode _sym1386[] = {
  // rdx2_ind    (0)
  { "rdx2_ind", 0, 128, 128,  0xf, { 0 },_sym751, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 7, _sym740_operands,_sym750,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.shift_wr'.
static struct adl_opcode _sym1387[] = {
  // rdx2_shift_wr    (0)
  { "rdx2_shift_wr", 0, 128, 128,  0xf, { 0 },_sym767, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,        ,,,, ]+) ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 6, _sym752_operands,_sym766,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2.shift_wr.ind'.
static struct adl_opcode _sym1388[] = {
  // rdx2_shift_wr_ind    (0)
  { "rdx2_shift_wr_ind", 0, 128, 128,  0xf, { 0 },_sym779, "^ *(\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.nosplit|\\.opsplit|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,        ,,, ]+) ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 6, _sym768_operands,_sym778,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx2_'.
static struct adl_opcode _sym1389[] = {
  // rdx2_    (0)
  { "rdx2_", 16, 128, 128,  0xf, { 0x8c000000,},_sym683, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 28, 56, 0, 0, _sym682_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4'.
static struct adl_opcode _sym1390[] = {
  // rdx4_mmn0    (0)
  { "rdx4_mmn0", 0, 128, 128,  0xf, { 0 },_sym817, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, _sym802_operands,_sym816,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
  // rdx4_mm0    (1)
  { "rdx4_mm0", 0, 128, 128,  0xf, { 0 },_sym791, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym780_operands,_sym790,1,7, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'rdx4.adptv'.
static struct adl_opcode _sym1391[] = {
  // rdx4_mmn0_adptv    (0)
  { "rdx4_mmn0_adptv", 0, 128, 128,  0xf, { 0 },_sym835, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+) ([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),([^,           ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,           ,,,,,, ]+)", 0, 18, 18, 0, 9, _sym820_operands,_sym834,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.ind'.
static struct adl_opcode _sym1392[] = {
  // rdx4_mmn0_adptv_ind    (0)
  { "rdx4_mmn0_adptv_ind", 0, 128, 128,  0xf, { 0 },_sym847, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,           ,,,,, ]+) ([^,           ,,,,, ]+) ([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),([^,           ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,           ,,,,, ]+)", 0, 17, 17, 0, 9, _sym836_operands,_sym846,1,9, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift'.
static struct adl_opcode _sym1393[] = {
  // rdx4_mmn0_adptv_shft    (0)
  { "rdx4_mmn0_adptv_shft", 0, 128, 128,  0xf, { 0 },_sym863, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8|\\.15down|\\.23down)? ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,         ,,,,,, ]+)", 0, 16, 16, 0, 8, _sym848_operands,_sym862,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift.ind'.
static struct adl_opcode _sym1394[] = {
  // rdx4_mmn0_adptv_shft_ind    (0)
  { "rdx4_mmn0_adptv_shft_ind", 0, 128, 128,  0xf, { 0 },_sym875, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) (\\.15down|\\.23down) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,         ,,,,, ]+)", 0, 15, 15, 0, 6, _sym864_operands,_sym874,1,6, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift_wr'.
static struct adl_opcode _sym1395[] = {
  // rdx4_mmn0_adptv_shft_wr    (0)
  { "rdx4_mmn0_adptv_shft_wr", 0, 128, 128,  0xf, { 0 },_sym891, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,          ,,,,,, ]+) ([^,          ,,,,,, ]+) ([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),([^,          ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,          ,,,,,, ]+)", 0, 17, 17, 0, 8, _sym876_operands,_sym890,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.adptv.shift_wr.ind'.
static struct adl_opcode _sym1396[] = {
  // rdx4_mmn0_adptv_shft_wr_ind    (0)
  { "rdx4_mmn0_adptv_shft_wr_ind", 0, 128, 128,  0xf, { 0 },_sym903, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.15down|\\.23down|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,          ,,,,, ]+) ([^,          ,,,,, ]+) ([^,          ,,,,, ]+),([^,          ,,,,, ]+),([^,          ,,,,, ]+),([^,          ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,          ,,,,, ]+)", 0, 16, 16, 0, 8, _sym892_operands,_sym902,1,8, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.ind'.
static struct adl_opcode _sym1397[] = {
  // rdx4_mmn0_ind    (0)
  { "rdx4_mmn0_ind", 0, 128, 128,  0xf, { 0 },_sym915, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym904_operands,_sym914,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
  // rdx4_mm0_ind    (1)
  { "rdx4_mm0_ind", 0, 128, 128,  0xf, { 0 },_sym801, "^ *(\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.round0|\\.round1|\\.round2|\\.round3|\\.round4|\\.round5|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym794_operands,_sym800,1,7, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'rdx4.shift'.
static struct adl_opcode _sym1398[] = {
  // rdx4_mmn0_shft    (0)
  { "rdx4_mmn0_shft", 0, 128, 128,  0xf, { 0 },_sym931, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, _sym916_operands,_sym930,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.shift.ind'.
static struct adl_opcode _sym1399[] = {
  // rdx4_mmn0_shft_ind    (0)
  { "rdx4_mmn0_shft_ind", 0, 128, 128,  0xf, { 0 },_sym943, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext)? (\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512)? (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,        ,,,,, ]+)", 0, 14, 14, 0, 5, _sym932_operands,_sym942,1,5, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.shift_wr'.
static struct adl_opcode _sym1400[] = {
  // rdx4_mmn0_shft_wr    (0)
  { "rdx4_mmn0_shft_wr", 0, 128, 128,  0xf, { 0 },_sym959, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+) ([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),([^,         ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,         ,,,,,, ]+)", 0, 16, 16, 0, 7, _sym944_operands,_sym958,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4.shift_wr.ind'.
static struct adl_opcode _sym1401[] = {
  // rdx4_mmn0_shft_wr_ind    (0)
  { "rdx4_mmn0_shft_wr_ind", 0, 128, 128,  0xf, { 0 },_sym971, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.no_win|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.no_repeat|\\.fft8|\\.fft16|\\.fft32|\\.noqext|\\.qext|\\.noovs|\\.ovs2|\\.ovs4|\\.ovs8|\\.ovs16|\\.ovs32|\\.ovs64|\\.ovs128|\\.ovs256|\\.ovs512|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,         ,,,,, ]+) ([^,         ,,,,, ]+) ([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),([^,         ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,         ,,,,, ]+)", 0, 15, 15, 0, 7, _sym960_operands,_sym970,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4_mm0_'.
static struct adl_opcode _sym1402[] = {
  // rdx4_mm0_    (0)
  { "rdx4_mm0_", 16, 128, 128,  0xf, { 0x88000000,},_sym793, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 21, 42, 0, 0, _sym792_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'rdx4_mmn0_'.
static struct adl_opcode _sym1403[] = {
  // rdx4_mmn0_    (0)
  { "rdx4_mmn0_", 16, 128, 128,  0xf, { 0x88000000,},_sym819, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 31, 62, 0, 0, _sym818_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp'.
static struct adl_opcode _sym1404[] = {
  // scp    (0)
  { "scp", 0, 128, 128,  0xf, { 0 },_sym987, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,     ,,,, ]+) ([^,     ,,,, ]+) ([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+),([^,     ,,,, ]+)", 0, 10, 10, 0, 3, _sym972_operands,_sym986,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp.ind'.
static struct adl_opcode _sym1405[] = {
  // scp_ind    (0)
  { "scp_ind", 0, 128, 128,  0xf, { 0 },_sym1001, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8)? ([^,     ,,, ]+) ([^,     ,,, ]+) ([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+),([^,     ,,, ]+)", 0, 9, 9, 0, 3, _sym990_operands,_sym1000,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp.shift_wr'.
static struct adl_opcode _sym1406[] = {
  // scp_shft_wr    (0)
  { "scp_shft_wr", 0, 128, 128,  0xf, { 0 },_sym1017, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,      ,,,, ]+) ([^,      ,,,, ]+) ([^,      ,,,, ]+) ([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+),([^,      ,,,, ]+)", 0, 11, 11, 0, 4, _sym1002_operands,_sym1016,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp.shift_wr.ind'.
static struct adl_opcode _sym1407[] = {
  // scp_shft_wr_ind    (0)
  { "scp_shft_wr_ind", 0, 128, 128,  0xf, { 0 },_sym1029, "^ *(\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.real|\\.cmplx|\\.coef_cmplx|\\.coef_im|\\.coef_re|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+) ([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+),([^,      ,,, ]+)", 0, 10, 10, 0, 4, _sym1018_operands,_sym1028,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'scp_'.
static struct adl_opcode _sym1408[] = {
  // scp_    (0)
  { "scp_", 16, 128, 128,  0xf, { 0xa8000000,},_sym989, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 23, 46, 0, 0, _sym988_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sel'.
static struct adl_opcode _sym1409[] = {
  // sel    (0)
  { "sel", 0, 128, 128,  0xf, { 0 },_sym1049, "^ *(\\.im|\\.re) ([^,   ,, ]+) ([^,   ,, ]+) ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 1, _sym1030_operands,_sym1048,1,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sel_'.
static struct adl_opcode _sym1410[] = {
  // sel_    (0)
  { "sel_", 16, 128, 128,  0xf, { 0x38000000,},_sym1051, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 18, 36, 0, 0, _sym1050_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set'.
static struct adl_opcode _sym1411[] = {
  // set    (0)
  { "set", 0, 128, 128,  0xf, { 0 },_sym1061, "^ *(\\.immed|\\.reg)? ([^, , ]+),([^, , ]+)", 0, 3, 3, 0, 1, _sym1052_operands,_sym1060,1,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.chrp'.
static struct adl_opcode _sym1412[] = {
  // set_chrp    (0)
  { "set_chrp", 0, 128, 128,  0xf, { 0 },_sym1071, "^ *([^, ]+)", 0, 1, 1, 0, 0, _sym1064_operands,_sym1070,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.ind'.
static struct adl_opcode _sym1413[] = {
  // set_ind    (0)
  { "set_ind", 0, 128, 128,  0xf, { 0 },_sym1076, "^ *([^, ]+)", 0, 1, 1, 0, 0, _sym1072_operands,_sym1075,1,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set_'.
static struct adl_opcode _sym1414[] = {
  // set_    (0)
  { "set_", 16, 128, 128,  0xf, { 0x4000000,},_sym1063, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 9, 18, 0, 0, _sym1062_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'stop'.
static struct adl_opcode _sym1415[] = {
  // stop    (0)
  { "stop", 16, 128, 128,  0xf, { 0x10000000,},_sym1078, "^", 0, 0, 0, 0, 0, _sym1077_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'sub'.
static struct adl_opcode _sym1416[] = {
  // sub    (0)
  { "sub", 0, 128, 128,  0xf, { 0 },_sym1092, "^ *(\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? (\\.immed|\\.reg|\\.noshift|\\.shift|\\.mod0|\\.mod1|\\.mod2|\\.mod3|\\.mod4|\\.mod5|\\.mod6|\\.mod7|\\.mod8|\\.mod9|\\.mod10|\\.mod11|\\.mod12|\\.mod13|\\.mod14|\\.mod15|\\.mod16|\\.mod17|\\.mod18|\\.mod19|\\.mod20|\\.mod21|\\.mod22|\\.mod23|\\.mod24)? ([^,   ,, ]+),([^,   ,, ]+),([^,   ,, ]+)", 0, 6, 6, 0, 3, _sym1079_operands,_sym1091,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sub.chrp'.
static struct adl_opcode _sym1417[] = {
  // sub_chrp    (0)
  { "sub_chrp", 0, 128, 128,  0xf, { 0 },_sym1098, "^", 0, 0, 0, 0, 0, _sym1095_operands,_sym1097,1,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'sub_'.
static struct adl_opcode _sym1418[] = {
  // sub_    (0)
  { "sub_", 16, 128, 128,  0xf, { 0x2c000000,},_sym1094, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 16, 32, 0, 0, _sym1093_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'sync'.
static struct adl_opcode _sym1419[] = {
  // sync    (0)
  { "sync", 16, 128, 128,  0xf, { 0x1c000000,},_sym1100, "^", 0, 0, 0, 0, 0, _sym1099_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'vmt'.
static struct adl_opcode _sym1420[] = {
  // vmt    (0)
  { "vmt", 0, 128, 128,  0xf, { 0 },_sym1116, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym1101_operands,_sym1115,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.imm_off_sq2s2'.
static struct adl_opcode _sym1421[] = {
  // vmt_imm_off_sq2s2    (0)
  { "vmt_imm_off_sq2s2", 0, 128, 128,  0xf, { 0 },_sym1134, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,,,, ]+) ([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+),([^,        ,,,,,, ]+)", 0, 15, 15, 0, 7, _sym1119_operands,_sym1133,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.imm_off_sq2s2.ind'.
static struct adl_opcode _sym1422[] = {
  // vmt_imm_off_sq2s2_ind    (0)
  { "vmt_imm_off_sq2s2_ind", 0, 128, 128,  0xf, { 0 },_sym1146, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym1135_operands,_sym1145,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.ind'.
static struct adl_opcode _sym1423[] = {
  // vmt_ind    (0)
  { "vmt_ind", 0, 128, 128,  0xf, { 0 },_sym1158, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,, ]+) ([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+),([^,        ,,, ]+)", 0, 12, 12, 0, 7, _sym1147_operands,_sym1157,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.shift_sq2s2'.
static struct adl_opcode _sym1424[] = {
  // vmt_shift_sq2s2    (0)
  { "vmt_shift_sq2s2", 0, 128, 128,  0xf, { 0 },_sym1174, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym1159_operands,_sym1173,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.shift_sq2s2.ind'.
static struct adl_opcode _sym1425[] = {
  // vmt_shift_sq2s2_ind    (0)
  { "vmt_shift_sq2s2_ind", 0, 128, 128,  0xf, { 0 },_sym1186, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym1175_operands,_sym1185,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.vec_sq2s2'.
static struct adl_opcode _sym1426[] = {
  // vmt_vec_sq2s2    (0)
  { "vmt_vec_sq2s2", 0, 128, 128,  0xf, { 0 },_sym1202, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym1187_operands,_sym1201,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.vec_sq2s2.ind'.
static struct adl_opcode _sym1427[] = {
  // vmt_vec_sq2s2_ind    (0)
  { "vmt_vec_sq2s2_ind", 0, 128, 128,  0xf, { 0 },_sym1214, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym1203_operands,_sym1213,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.wr_off_sq2s2'.
static struct adl_opcode _sym1428[] = {
  // vmt_wr_off_sq2s2    (0)
  { "vmt_wr_off_sq2s2", 0, 128, 128,  0xf, { 0 },_sym1230, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,,, ]+) ([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+),([^,        ,,,,, ]+)", 0, 14, 14, 0, 7, _sym1215_operands,_sym1229,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt.wr_off_sq2s2.ind'.
static struct adl_opcode _sym1429[] = {
  // vmt_wr_off_sq2s2_ind    (0)
  { "vmt_wr_off_sq2s2_ind", 0, 128, 128,  0xf, { 0 },_sym1242, "^ *(\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? (\\.real|\\.cmplx|\\.no_rst|\\.rst_sum|\\.in_24real|\\.in_24im|\\.in_48|\\.op_off|\\.op_on|\\.no_sq1|\\.sq1|\\.no_sq2s1|\\.abs_sq2s1|\\.mag_sq2s1|\\.conj_sq2s1|\\.no_sq2s3|\\.sum_sq2s3)? ([^,        ,,,, ]+) ([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+),([^,        ,,,, ]+)", 0, 13, 13, 0, 7, _sym1231_operands,_sym1241,1,7, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'vmt_'.
static struct adl_opcode _sym1430[] = {
  // vmt_    (0)
  { "vmt_", 16, 128, 128,  0xf, { 0x98000000,},_sym1118, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 26, 52, 0, 0, _sym1117_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'wait'.
static struct adl_opcode _sym1431[] = {
  // wait    (0)
  { "wait", 16, 128, 128,  0xf, { 0x20000000,},_sym1244, "^ *(\\.l0|\\.l1|\\.pos|\\.neg)? ([^,  ]+)", 0, 2, 2, 0, 1, _sym1243_operands,0,0,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'watchdog'.
static struct adl_opcode _sym1432[] = {
  // watchdog    (0)
  { "watchdog", 16, 128, 128,  0xf, { 0x28000000,},_sym1246, "^ *(\\.l0|\\.l1|\\.pos|\\.neg)? (\\.start|\\.stop|\\.reset|\\.event) (\\.ev0|\\.ev1|\\.ev2|\\.ev3|\\.hsync|\\.vsync) ([^,    ]+)", 0, 4, 4, 0, 1, _sym1245_operands,0,0,1, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win'.
static struct adl_opcode _sym1433[] = {
  // win_mmn0    (0)
  { "win_mmn0", 0, 128, 128,  0xf, { 0 },_sym1284, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,     ,,,,,, ]+) ([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),([^,     ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,     ,,,,,, ]+)", 0, 12, 12, 0, 3, _sym1269_operands,_sym1283,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
  // win_mm0    (1)
  { "win_mm0", 0, 128, 128,  0xf, { 0 },_sym1258, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,    ,,,,, ]+) ([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+),([^,    ,,,,, ]+)", 0, 10, 10, 0, 2, _sym1247_operands,_sym1257,1,2, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'win.ind'.
static struct adl_opcode _sym1434[] = {
  // win_mmn0_ind    (0)
  { "win_mmn0_ind", 0, 128, 128,  0xf, { 0 },_sym1298, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,     ,,,,, ]+) ([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),([^,     ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,     ,,,,, ]+)", 0, 11, 11, 0, 3, _sym1287_operands,_sym1297,1,3, 0,0,0,{}, 0,0,0,0,0,0, },
  // win_mm0_ind    (1)
  { "win_mm0_ind", 0, 128, 128,  0xf, { 0 },_sym1268, "^ *(\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram)? (\\.nosft|\\.shift1|\\.shift2|\\.shift3|\\.shift4|\\.shift8) ([^,    ,,,, ]+) ([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+),([^,    ,,,, ]+)", 0, 9, 9, 0, 2, _sym1261_operands,_sym1267,1,2, 0,0,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'win.shift_wr'.
static struct adl_opcode _sym1435[] = {
  // win_mmn0_shft    (0)
  { "win_mmn0_shft", 0, 128, 128,  0xf, { 0 },_sym1314, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,      ,,,,,, ]+) ([^,      ,,,,,, ]+) ([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),([^,      ,,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,      ,,,,,, ]+)", 0, 13, 13, 0, 4, _sym1299_operands,_sym1313,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win.shift_wr.ind'.
static struct adl_opcode _sym1436[] = {
  // win_mmn0_shft_ind    (0)
  { "win_mmn0_shft_ind", 0, 128, 128,  0xf, { 0 },_sym1326, "^ *(\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? (\\.immed|\\.const|\\.caddr|\\.real|\\.cmplx|\\.cmplx_win|\\.real_win_im_tram|\\.real_win_real_tram|\\.bits_0_5|\\.bits_6_11|\\.bits_12_17|\\.bits_18_23|\\.bits_24_29|\\.bits_30_35|\\.bits_36_41|\\.bits_42_47)? ([^,      ,,,,, ]+) ([^,      ,,,,, ]+) ([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),([^,      ,,,,, ]+),(\\.mod0|\\.mod2|\\.mod4|\\.mod8|\\.mod16|\\.mod32|\\.mod64|\\.mod128|\\.mod256|\\.mod512)?,([^,      ,,,,, ]+)", 0, 12, 12, 0, 4, _sym1315_operands,_sym1325,1,4, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win_mm0_'.
static struct adl_opcode _sym1437[] = {
  // win_mm0_    (0)
  { "win_mm0_", 16, 128, 128,  0xf, { 0x84000000,},_sym1260, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 17, 34, 0, 0, _sym1259_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'win_mmn0_'.
static struct adl_opcode _sym1438[] = {
  // win_mmn0_    (0)
  { "win_mmn0_", 16, 128, 128,  0xf, { 0x84000000,},_sym1286, "^ *([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+),([^ ,\t,]+)", 0, 25, 50, 0, 0, _sym1285_operands,0,0,0, 0,0,0,{}, 0,0,0,0,0,0, },
};

// Instruction table.
static struct adl_instr other_instructions [] = {
  { "add", 1, _sym1327 },
  { "add_", 1, _sym1328 },
  { "cmp", 1, _sym1329 },
  { "cmp.chrp", 1, _sym1330 },
  { "cmp_", 1, _sym1331 },
  { "copy", 1, _sym1332 },
  { "copy.ind", 1, _sym1333 },
  { "copy.thld", 1, _sym1334 },
  { "copy.thld.ind", 1, _sym1335 },
  { "copy_", 1, _sym1336 },
  { "evt", 1, _sym1337 },
  { "fir", 1, _sym1338 },
  { "fir.ind", 1, _sym1339 },
  { "fir.shift_wr", 1, _sym1340 },
  { "fir.shift_wr.ind", 1, _sym1341 },
  { "fir_", 1, _sym1342 },
  { "get", 1, _sym1343 },
  { "get.ind", 1, _sym1344 },
  { "get_", 1, _sym1345 },
  { "hist", 1, _sym1346 },
  { "hist.ind", 1, _sym1347 },
  { "hist_", 1, _sym1348 },
  { "irdx2", 1, _sym1349 },
  { "irdx2.adptv", 1, _sym1350 },
  { "irdx2.adptv.ind", 1, _sym1351 },
  { "irdx2.adptv.shift_wr", 1, _sym1352 },
  { "irdx2.adptv.shift_wr.ind", 1, _sym1353 },
  { "irdx2.ind", 1, _sym1354 },
  { "irdx2.shift_wr", 1, _sym1355 },
  { "irdx2.shift_wr.ind", 1, _sym1356 },
  { "irdx2_", 1, _sym1357 },
  { "irdx4", 2, _sym1358 },
  { "irdx4.adptv", 1, _sym1359 },
  { "irdx4.adptv.ind", 1, _sym1360 },
  { "irdx4.ind", 2, _sym1361 },
  { "irdx4.shift", 1, _sym1362 },
  { "irdx4.shift.ind", 1, _sym1363 },
  { "irdx4.shift_wr", 1, _sym1364 },
  { "irdx4.shift_wr.ind", 1, _sym1365 },
  { "irdx4_mm0_", 1, _sym1366 },
  { "irdx4_mmn0_", 1, _sym1367 },
  { "jump_", 1, _sym1368 },
  { "jumpa", 1, _sym1369 },
  { "jumpc", 1, _sym1370 },
  { "loop", 2, _sym1371 },
  { "maxs", 1, _sym1372 },
  { "maxs.gbl", 1, _sym1373 },
  { "maxs.gbl.ind", 1, _sym1374 },
  { "maxs.ind", 1, _sym1375 },
  { "maxs_", 1, _sym1376 },
  { "next", 1, _sym1377 },
  { "pdma", 1, _sym1378 },
  { "pdma.ind", 1, _sym1379 },
  { "pdma_", 1, _sym1380 },
  { "rdx2", 1, _sym1381 },
  { "rdx2.adptv", 1, _sym1382 },
  { "rdx2.adptv.ind", 1, _sym1383 },
  { "rdx2.adptv.shift_wr", 1, _sym1384 },
  { "rdx2.adptv.shift_wr.ind", 1, _sym1385 },
  { "rdx2.ind", 1, _sym1386 },
  { "rdx2.shift_wr", 1, _sym1387 },
  { "rdx2.shift_wr.ind", 1, _sym1388 },
  { "rdx2_", 1, _sym1389 },
  { "rdx4", 2, _sym1390 },
  { "rdx4.adptv", 1, _sym1391 },
  { "rdx4.adptv.ind", 1, _sym1392 },
  { "rdx4.adptv.shift", 1, _sym1393 },
  { "rdx4.adptv.shift.ind", 1, _sym1394 },
  { "rdx4.adptv.shift_wr", 1, _sym1395 },
  { "rdx4.adptv.shift_wr.ind", 1, _sym1396 },
  { "rdx4.ind", 2, _sym1397 },
  { "rdx4.shift", 1, _sym1398 },
  { "rdx4.shift.ind", 1, _sym1399 },
  { "rdx4.shift_wr", 1, _sym1400 },
  { "rdx4.shift_wr.ind", 1, _sym1401 },
  { "rdx4_mm0_", 1, _sym1402 },
  { "rdx4_mmn0_", 1, _sym1403 },
  { "scp", 1, _sym1404 },
  { "scp.ind", 1, _sym1405 },
  { "scp.shift_wr", 1, _sym1406 },
  { "scp.shift_wr.ind", 1, _sym1407 },
  { "scp_", 1, _sym1408 },
  { "sel", 1, _sym1409 },
  { "sel_", 1, _sym1410 },
  { "set", 1, _sym1411 },
  { "set.chrp", 1, _sym1412 },
  { "set.ind", 1, _sym1413 },
  { "set_", 1, _sym1414 },
  { "stop", 1, _sym1415 },
  { "sub", 1, _sym1416 },
  { "sub.chrp", 1, _sym1417 },
  { "sub_", 1, _sym1418 },
  { "sync", 1, _sym1419 },
  { "vmt", 1, _sym1420 },
  { "vmt.imm_off_sq2s2", 1, _sym1421 },
  { "vmt.imm_off_sq2s2.ind", 1, _sym1422 },
  { "vmt.ind", 1, _sym1423 },
  { "vmt.shift_sq2s2", 1, _sym1424 },
  { "vmt.shift_sq2s2.ind", 1, _sym1425 },
  { "vmt.vec_sq2s2", 1, _sym1426 },
  { "vmt.vec_sq2s2.ind", 1, _sym1427 },
  { "vmt.wr_off_sq2s2", 1, _sym1428 },
  { "vmt.wr_off_sq2s2.ind", 1, _sym1429 },
  { "vmt_", 1, _sym1430 },
  { "wait", 1, _sym1431 },
  { "watchdog", 1, _sym1432 },
  { "win", 2, _sym1433 },
  { "win.ind", 2, _sym1434 },
  { "win.shift_wr", 1, _sym1435 },
  { "win.shift_wr.ind", 1, _sym1436 },
  { "win_mm0_", 1, _sym1437 },
  { "win_mmn0_", 1, _sym1438 },
};

static const int num_other_instructions = 112;

static const struct adl_name_pair ppc_regnames[] = {
  {"or0",0},
  {"or1",1},
  {"or2",2},
  {"or3",3},
  {"or4",4},
  {"or5",5},
  {"or6",6},
  {"or7",7},
  {"or8",8},
  {"or9",9},
  {"or10",10},
  {"or11",11},
  {"or12",12},
  {"or13",13},
  {"or14",14},
  {"or15",15},
  {"or16",16},
  {"or17",17},
  {"or18",18},
  {"or19",19},
  {"or20",20},
  {"or21",21},
  {"or22",22},
  {"or23",23},
  {"or24",24},
  {"or25",25},
  {"or26",26},
  {"or27",27},
  {"or28",28},
  {"or29",29},
  {"or30",30},
  {"or31",31},
  {"or32",32},
  {"or33",33},
  {"or34",34},
  {"or35",35},
  {"or36",36},
  {"or37",37},
  {"or38",38},
  {"or39",39},
  {"or40",40},
  {"or41",41},
  {"or42",42},
  {"or43",43},
  {"or44",44},
  {"or45",45},
  {"or46",46},
  {"or47",47},
  {"or48",48},
  {"or49",49},
  {"or50",50},
  {"or51",51},
  {"r0",0},
  {"r1",1},
  {"r2",2},
  {"r3",3},
  {"r4",4},
  {"r5",5},
  {"r6",6},
  {"r7",7},
  {"r8",8},
  {"r9",9},
  {"r10",10},
  {"r11",11},
  {"r12",12},
  {"r13",13},
  {"r14",14},
  {"r15",15},
  {"r16",16},
  {"r17",17},
  {"r18",18},
  {"r19",19},
  {"r20",20},
  {"r21",21},
  {"r22",22},
  {"r23",23},
  {"r24",24},
  {"r25",25},
  {"r26",26},
  {"r27",27},
  {"r28",28},
  {"r29",29},
  {"r30",30},
  {"r31",31},
  {"r32",32},
  {"r33",33},
  {"r34",34},
  {"r35",35},
  {"r36",36},
  {"r37",37},
  {"r38",38},
  {"r39",39},
  {"tr0",0},
  {"tr1",1},
  {"tr2",2},
  {"tr3",3},
  {"tr4",4},
  {"tr5",5},
  {"tr6",6},
  {"tr7",7},
  {"tr8",8},
  {"tr9",9},
  {"tr10",10},
  {"tr11",11},
  {"tr12",12},
  {"tr13",13},
  {"tr14",14},
  {"tr15",15},
  {"tr16",16},
  {"tr17",17},
  {"tr18",18},
  {"tr19",19},
  {"tr20",20},
  {"tr21",21},
  {"tr22",22},
  {"tr23",23},
  {"tr24",24},
  {"tr25",25},
  {"tr26",26},
  {"tr27",27},
  {"tr28",28},
  {"tr29",29},
  {"tr30",30},
  {"tr31",31},
  {"tr32",32},
  {"tr33",33},
  {"tr34",34},
  {"tr35",35},
  {"wr0",0},
  {"wr1",1},
  {"wr2",2},
  {"wr3",3},
  {"wr4",4},
  {"wr5",5},
  {"wr6",6},
  {"wr7",7},
  {"wr8",8},
  {"wr9",9},
  {"wr10",10},
  {"wr11",11},
  {"wr12",12},
  {"wr13",13},
  {"wr14",14},
  {"wr15",15},
  {"wr16",16},
  {"wr17",17},
  {"wr18",18},
  {"wr19",19},
  {"wr20",20},
  {"wr21",21},
  {"wr22",22},
  {"wr23",23},
  {"wr24",24},
  {"wr25",25},
  {"wr26",26},
  {"wr27",27},
  {"wr28",28},
  {"wr29",29},
  {"wr30",30},
  {"wr31",31},
  {"wr32",32},
  {"wr33",33},
  {"wr34",34},
  {"wr35",35},
  {"wr36",36},
  {"wr37",37},
  {"wr38",38},
  {"wr39",39},
  {"wr40",40},
  {"wr41",41},
  {"wr42",42},
  {"wr43",43},
  {"wr44",44},
  {"wr45",45},
  {"wr46",46},
  {"wr47",47},
};

static const int num_ppc_regnames = 176;

static const char *ppc_itnames[] = {
  "default",
};


static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(1,0,2,32,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_PPC_ADDR32",0,0x0,0xffffffff,0), // relocation R_PPC_ADDR32 (R_PPC_ADDR32)
  HOWTO(26,0,2,32,1,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_PPC_REL32",0,0x0,0xffffffff,1), // relocation R_PPC_REL32 (R_PPC_REL32)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos = 3;

// Relocations ordered by name, for fast name -> type searches.
static struct adl_name_pair ppc_relocs_by_index [] = {
   { "R_PPC_ADDR32", 0 }, // R_PPC_ADDR32
   { "R_PPC_REL32", 1 }, // R_PPC_REL32
};

static const int num_ppc_relocs_by_index = 2;


// Relocation offsets.
static struct adl_int_pair ppc_reloc_offsets [] = {
   { 1,-1 }, // R_PPC_ADDR32
   { 26,-1 }, // R_PPC_REL32
};

static const int num_ppc_reloc_offsets = 2;

static const char *instr_names[] = {
  "add",
  "add_",
  "cmp",
  "cmp.chrp",
  "cmp_",
  "copy",
  "copy.ind",
  "copy.thld",
  "copy.thld.ind",
  "copy_",
  "evt",
  "fir",
  "fir.ind",
  "fir.shift_wr",
  "fir.shift_wr.ind",
  "fir_",
  "get",
  "get.ind",
  "get_",
  "hist",
  "hist.ind",
  "hist_",
  "irdx2",
  "irdx2.adptv",
  "irdx2.adptv.ind",
  "irdx2.adptv.shift_wr",
  "irdx2.adptv.shift_wr.ind",
  "irdx2.ind",
  "irdx2.shift_wr",
  "irdx2.shift_wr.ind",
  "irdx2_",
  "irdx4",
  "irdx4.adptv",
  "irdx4.adptv.ind",
  "irdx4.ind",
  "irdx4.shift",
  "irdx4.shift.ind",
  "irdx4.shift_wr",
  "irdx4.shift_wr.ind",
  "irdx4_mm0_",
  "irdx4_mmn0_",
  "jump_",
  "jumpa",
  "jumpc",
  "loop",
  "maxs",
  "maxs.gbl",
  "maxs.gbl.ind",
  "maxs.ind",
  "maxs_",
  "next",
  "pdma",
  "pdma.ind",
  "pdma_",
  "rdx2",
  "rdx2.adptv",
  "rdx2.adptv.ind",
  "rdx2.adptv.shift_wr",
  "rdx2.adptv.shift_wr.ind",
  "rdx2.ind",
  "rdx2.shift_wr",
  "rdx2.shift_wr.ind",
  "rdx2_",
  "rdx4",
  "rdx4.adptv",
  "rdx4.adptv.ind",
  "rdx4.adptv.shift",
  "rdx4.adptv.shift.ind",
  "rdx4.adptv.shift_wr",
  "rdx4.adptv.shift_wr.ind",
  "rdx4.ind",
  "rdx4.shift",
  "rdx4.shift.ind",
  "rdx4.shift_wr",
  "rdx4.shift_wr.ind",
  "rdx4_mm0_",
  "rdx4_mmn0_",
  "scp",
  "scp.ind",
  "scp.shift_wr",
  "scp.shift_wr.ind",
  "scp_",
  "sel",
  "sel_",
  "set",
  "set.chrp",
  "set.ind",
  "set_",
  "stop",
  "sub",
  "sub.chrp",
  "sub_",
  "sync",
  "vmt",
  "vmt.imm_off_sq2s2",
  "vmt.imm_off_sq2s2.ind",
  "vmt.ind",
  "vmt.shift_sq2s2",
  "vmt.shift_sq2s2.ind",
  "vmt.vec_sq2s2",
  "vmt.vec_sq2s2.ind",
  "vmt.wr_off_sq2s2",
  "vmt.wr_off_sq2s2.ind",
  "vmt_",
  "wait",
  "watchdog",
  "win",
  "win.ind",
  "win.shift_wr",
  "win.shift_wr.ind",
  "win_mm0_",
  "win_mmn0_",
};

static int num_instr_names = 112;

static const char *instr_pfx_fields[] = {
   0 };

static int num_instr_pfx_fields = 0;

//
// Helper code.
//

 unsigned get_bank ( unsigned x ) {
      if ( get_mode ( x ) == 2 ) return ( x >> 12 ) & 0x3 ; else return 0 ;
}

 unsigned get_col ( unsigned notzero , unsigned x ) {
      if ( ! notzero ) return 0 ; else if ( x & 0xc000 ) return ( x >> 3 ) & 0x1FF ; else return ( x >> 3 ) & 0x3F ;
}

 unsigned long long get_imm_dat ( unsigned isreg , unsigned long long x ) {
      return isreg ? 0 : x ;
}

 unsigned get_loop_immed ( unsigned mode , unsigned val ) {
      if ( mode == 0 ) return val ; else return 0 ;
}

 unsigned get_loop_wr ( unsigned mode , unsigned val ) {
      if ( mode == 1 ) return val ; else return 0 ;
}

 unsigned get_maxsN ( unsigned x ) {
      if ( ! x ) return 0 ; else return x - 1 ;
}

 unsigned get_mode ( unsigned x ) {
      return x >> 14 ;
}

 unsigned get_slice ( unsigned x ) {
      if ( x & 0xc000 ) return ( x & 7 ) ; else return 0 ;
}

 unsigned is_maxsN ( unsigned x ) {
      return x != 0 ;
}


static struct adl_asm_instr asm_instrs[] = {
   {"",0 } 
};
static int num_asm_instrs = 0;
static int internal_current_table = 0;
static bool show_warnings = false;
static struct hash_control *instr_hash[1];

static struct hash_control *reg_hash;

static struct hash_control *asm_instr_hash;

static struct hash_control *instr_pfx_fields_hash;

static const char *terminating_chars     = "\t .";

static const char *min_terminating_chars = "\t ";

static bool setup_endianness()
{
  adl_setup_endianness(true); return true;
}

static bool setup_endianness_var = setup_endianness();

void md_begin()
{
  adl_setup_general(min_terminating_chars,terminating_chars,0,0,0,0,0,init_queue_size, show_warnings, false,16);
  adl_setup_comments(init_comment_strs, init_num_comment_strs, init_line_comment_strs, init_num_line_comment_strs);
  adl_setup_instrfields(ppc_operands, num_ppc_operands,ppc_operands_by_index, num_ppc_operands_by_index);
  adl_setup_grouping(packet_begin_chars, packet_end_chars);
  adl_setup_prefix(pfx_queue, 0,0,0,reset_prefix_counters);
  adl_setup_relocations(ppc_elf_howto_table,num_ppc_elf_howtos,ppc_relocs_by_index,num_ppc_relocs_by_index,ppc_reloc_offsets,num_ppc_reloc_offsets);
  instr_hash[0] = adl_setup_instructions(other_instructions,num_other_instructions,ppc_operands);
  reg_hash = adl_setup_name_hash(ppc_regnames,num_ppc_regnames,"register");
  asm_instr_hash = 0;
  instr_pfx_fields_hash = 0;
}

std::string adl_asm_version = "8.18";

extern "C" void md_assemble(char *str)
{
  adl_assemble(str,instr_hash[internal_current_table],asm_instr_hash,reg_hash,instr_pfx_fields_hash,31,internal_current_table,ppc_itnames[internal_current_table]);
}

extern "C" void md_apply_fix (fixS *fixP ,valueT *valP ,segT seg)
{
  adl_apply_fix(fixP,valP,seg);
}

int ppc_parse_option(int,char*);

extern "C" int md_parse_option (int c,char *arg)
{
  if (c == 'd') {
    show_warnings = TRUE;
    return 1;
  } else if (c == 'm') {
    if (!strcmp(arg,"default")) {
      internal_current_table = 0;
      return 1;
    }
  }
  return ppc_parse_option(c,arg);
}

void ppc_show_usage(FILE*);

extern "C" void md_show_usage (FILE *stream ATTRIBUTE_UNUSED)
{
  fprintf (stream,
  "\nInstruction-selection options:\n\n"
  "-mdefault		Select the default instruction table.\n"
  "-d			Show debugging warnings about undefined symbols.\n"
  );
  ppc_show_usage(stream);
}

extern "C" void adl_get_instr_names(const char ***names, int *num_names)
{
  *names = instr_names;
  *num_names = num_instr_names;
};

extern "C" void adl_get_instr_ops(const struct adl_name_pair **names, int* num_names)
{
  *names = ppc_regnames;
  *num_names = num_ppc_regnames;
}

extern "C" bfd_boolean  dt_debug(void);

extern "C" bfd_boolean  dt_debug(void)
{
  #ifdef _DEVTECH_DEBUG_
  return TRUE;
  #else
  return FALSE;
  #endif
}

