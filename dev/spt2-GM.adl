//
// The SPT command-sequencer.  This simply defines instructions for decoding
// purposes.  All of the actual instruction semantics are implemented using an
// external object of type SptBehavior (interface declared in SptBehavior.h).
//

// This declares the interface class which must implement the SPT behavior.
//#include "SptBehavior.h"

define (arch=SPT) {

  define (regfile=R) {
    size = 40;
    width = 32;
    prefix = r;
  }

  attrs = (nia,cia);

  define (reg=PC) {
    attrs = (nia,cia);
  }

  bit_endianness = little;

  define (regfile=OR) {
    // Operand RAM
    size = 52;
    prefix = or;
  }

  define (regfile=TR) {
    // Twiddle RAM
    size = 36;
    prefix = tr;
  }

  define (regfile=WR) {
    // Work register
    size = 48;
    prefix = wr;
  }

  define (instrfield=opcode) {
    bits = (127,122);
  }

  define (instrfield=src) {
	// SET, ADD
    bits = 121;
    enumerated = (".immed",("",".reg"));
    //value = ".imm";
  }

  define (instrfield=ima) {
	// SET, GET, WIN, RDX4, RDX2, FIR, COPY
    bits = 109;
    enumerated = (".imm",".ind");
    value = ".imm";
  }

  define (instrfield=ima2) {
	// PDMA
    bits = 119;
    enumerated = (".imm",".ind");
    value = ".imm";
  }

  define (instrfield=src_add_mode) {
	// 2 upper bits
  bits = (95, 94);
  enumerated = ("wr", "tr", "or");
  }

  define (instrfield=src_add_wr) {
    bits = (93,83);
    display=name;
    ref=WR;
  }

  define (instrfield=src_add_bank) {
    bits = (93,92);
  }

  define (instrfield=src_add_col) {
    bits = (91,83);
    display=dec;
  }

  define (instrfield=src_add_slice) {
    bits = (82,80);
    display=dec;
  }

  define (instrfield=src_add) {
	// SET, GET, ADD, WIN, RDX4, RDX2, FIR, COPY, SUB, CMP
    //bits = (95,80);
    width = 16;
    pseudo = true;
    disassemble = false;
  }

  define (instrfield=src_add_T) {
  /* pseudo instruction fields to perform value checking */
	// WIN, RDX4, RDX2, FIR, COPY
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0x4000,0x4FFF);
  }

  define (instrfield=src_add_O) {
  /* pseudo instruction fields to perform value checking */
	// WIN, RDX4, RDX2, FIR, COPY
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0x8000,0xBFFF);
  }

  define (instrfield=src_add_T_O) {
  /* pseudo instruction fields to perform value checking */
    width = 16;
    pseudo=true;
    disassemble = false;
    valid_masks = ((0x4000,0x4000),(0x8000,0x8000));
  }

  define (instrfield=src_add_WR) {
  /* pseudo instruction fields to perform value checking */
    width = 16;
    pseudo=true;
    disassemble = false;
    valid_ranges = (0,0x0178);
  }

  define (instrfield=dest_add_T) {
  /* pseudo instruction fields to perform value checking */
	// WIN, RDX4, RDX2, FIR, COPY
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0x4000,0x4FFF);
  }

  define (instrfield=dest_add_O) {
  /* pseudo instruction fields to perform value checking */
	// WIN, RDX4, RDX2, FIR, COPY
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0x8000,0xBFFF);
  }

  define (instrfield=dest_add_T_O) {
  /* pseudo instruction fields to perform value checking */
    width = 16;
    pseudo=true;
    disassemble = false;
    valid_masks = ((0x4000,0x4000),(0x8000,0x8000));
  }

  define (instrfield=dest_add_WR) {
  /* pseudo instruction fields to perform value checking */
    width = 16;
    pseudo=true;
    disassemble = false;
    valid_ranges = (0,0x0178);
  }

  define (instrfield=dest_add_mode) {
	// 2 upper bits
  bits = (79, 78);
  enumerated = ("wr", "tr", "or");
  }

  define (instrfield=dest_add_wr) {
    bits = (77,67);
    display=name;
    ref=WR;
    valid_ranges = (0,47);
  }

  define (instrfield=dest_add_bank) {
    bits = (77,76);
    display=dec;
  }

  define (instrfield=dest_add_col) {
    bits = (75,67);
    display=dec;
  }

  define (instrfield=dest_add_slice) {
    bits = (66,64);
    display=dec;
  }

  define (instrfield=dest_add) {
	// SET, GET, ADD, WIN, RDX4, RDX2, FIR, COPY, SUB, CMP, SEL
    //bits = (79,64);
    width = 16;
    pseudo = true;
    disassemble = false;
  }

  define (instrfield=imm_dat) {
	// SET, ADD
    bits = (47,0);
  }

  define (instrfield=shift) {
	// ADD
    bits = 120;
    enumerated = (".noshift",(".shift",""));
    value = "";
  }

  define (instrfield=modulo_val) {
	// ADD
    bits = (100,96);
    enumerated = (
      ("", ".mod0"),  ".mod1",  ".mod2",  ".mod3",  ".mod4",  ".mod5",
      ".mod6",  ".mod7",  ".mod8",  ".mod9",  ".mod10", ".mod11",
      ".mod12", ".mod13", ".mod14", ".mod15", ".mod16", ".mod17",
      ".mod18", ".mod19", ".mod20", ".mod21", ".mod22", ".mod23",
      ".mod24");
    value = "";
  }

  define (instrfield=src2_add_mode) {
	// 2 upper bits
  bits = (63, 62);
  enumerated = ("wr", "tr", "or");
  }

  define (instrfield=src2_add_wr) {
    bits = (59,51);
    display=name;
    ref=WR;
  }

  define (instrfield=src2_add_bank) {
    bits = (61,60);
  }

  define (instrfield=src2_add_col) {
    bits = (59,51);
    display=dec;
  }

  define (instrfield=src2_add_slice) {
    bits = (50,48);
    display=dec;
  }

  define (instrfield=src2_add) {
	// ADD, SUB, CMP
    //bits = (63,48);
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0,0x0178);
  }

  define (instrfield=src2_add_sel) {
	// SEL
    //bits = (63,48);
    width = 16;
    pseudo = true;
    disassemble = false;
  }

 define (instrfield=extra_val) {
	// VMT
    width = 16;
    pseudo = true;
    disassemble = false;
  }

 define (instrfield=extra_val2) {
	// VMT
    width = 16;
    pseudo = true;
    disassemble = false;
  }

  define (instrfield=sel_src3_add_mode) {
	// 2 upper bits
  bits = (47, 46);
  enumerated = ("wr", "tr", "or");
  }

  define (instrfield=sel_src3_add_bank) {
    bits = (45,44);
  }

  define (instrfield=sel_src3_add_col) {
    bits = (43,35);
    display=dec;
  }

  define (instrfield=sel_src3_add_slice) {
    bits = (34,32);
    display=dec;
  }

  define (instrfield=sel_src3_add) {
	// SEL
    width = 16;
    pseudo = true;
    disassemble = false;
  }

  define (instrfield=sel_src1_add_mode) {
	// 2 upper bits
  bits = (31, 30);
  enumerated = ("wr", "tr", "or");
  }

  define (instrfield=sel_src1_add_bank) {
    bits = (29,28);
  }

  define (instrfield=sel_src1_add_col) {
    bits = (27,19);
    display=dec;
  }

  define (instrfield=sel_src1_add_slice) {
    bits = (18,16);
    display=dec;
  }

  define (instrfield=sel_src1_add) {
	// SEL
    width = 16;
    pseudo = true;
    disassemble = false;
  }

  define (instrfield=src1_add_mode) {
	// 2 upper bits
    bits = (31, 30);
    enumerated = ("wr", "tr", "or");
  }

  define (instrfield=src1_add_bank) {
    bits = (29,28);
  }

  define (instrfield=src1_add_col) {
    bits = (27,19);
    display=dec;
  }

  define (instrfield=src1_add_slice) {
    bits = (18,16);
    display=dec;
  }

  define (instrfield=src1_add) {
	// SEL
    //bits = (31,16);
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0,0x0178);
  }

  define (instrfield=lp_cnt) {
	// LOOP
    bits = (111,96);
  }

  define (instrfield=wdog_op) {
	// 
    bits = (117,116);
    enumerated = (".start",".stop",".reset",".event");
   }

  define (instrfield=wdog_ev) {
	// WATCHDOG EV
    bits = (114,112);
    enumerated = (".ev0", ".ev1", ".ev2", ".ev3", ".hsync", ".vsync");
  }

  define (instrfield=wdog_cnt) {
	// WATCHDOG CNT
    bits = (23,0);
  }

  define (instrfield=wait_ev) {
	// WAIT
    bits = (116,112);
  }

  define (instrfield=ev_tr) {
	// WAIT, WATCHDOG
    bits = (121,120);
    enumerated = (".l0",".l1", ".pos", ".neg");
    value = ".l0";
  }

  define (instrfield=ev_lvl) {
	// EVT
    bits = 119;
    enumerated = (".low",".high");
    value = ".low";
  }

  define (instrfield=evt_ev) {
	// EVT
    bits = (114,112);
    enumerated = ((".lsb",".bit0"),".bit1",".bit2",".bit3",".bit4",".bit5",".bit6",(".msb",".bit7"));
  }

  define (instrfield=win_type) {
	// WIN, FIR
    bits = (120,119);
    enumerated = (reserved,".cmplx_win",".real_win_im_tram",".real_win_real_tram");
  }

  define (instrfield=win_type_rdx) {
	// RDX4, RDX2
    bits = (120,119);
    enumerated = (".no_win",".cmplx_win",".real_win_im_tram",".real_win_real_tram");
  }

  define (instrfield=in_dattyp) {
	// WIN, RDX4, RDX2, FIR, SCP
    bits = (121);
    enumerated = (".real",".cmplx");
    value = ".real";
  }

  define (instrfield=in_dattyp2) {
	// COPY, MAXS
    bits = (121,120);
    enumerated = (".real",".cmplx",".log2");
    value = ".real";
  }

  define (instrfield=vec_sz) {
	// WIN, RDX4, FIR
    bits = (108,96);
    display = dec;
  }

  define (instrfield=mult_coef_mode) {
	// 2 upper bits
  bits = (63, 62);
  enumerated = (reserved, "tr", "or");
  }

  define (instrfield=mult_coef_bank) {
    bits = (61,60);
  }

  define (instrfield=mult_coef_col) {
    bits = (59,51);
    display=dec;
  }

  define (instrfield=mult_coef_slice) {
    bits = (50,48);
    display=dec;
  }

  define (instrfield=mult_coef_add) {
	// WIN, RDX4, RDX2
    //bits = (63,48);
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0,0x4FFF);
  }

  define (instrfield=src_add_inc) {
	// WIN, RDX4, RDX2, FIR, COPY
    bits = (47,40);
  }

  define (instrfield=dest_add_inc) {
	// WIN, RDX4, RDX2, FIR, COPY
    bits = (39,32);
  }

  define (instrfield=mca_mod) {
	// WIN, RDX4
    bits = (31,28);
    enumerated = (
      ("", ".mod0"), ".mod2", ".mod4", ".mod8",
      ".mod16",  ".mod32",  ".mod64",  ".mod128",
      ".mod256", ".mod512", reserved, reserved,
      reserved, reserved, reserved, reserved);
    value = "";
  }

  define (instrfield=mca_inc) {
	// WIN, RDX4
    bits = (24,16);
  }

  define (instrfield=mult_mod) {
	// WIN, RDX4
    bits = (9,8);
    enumerated = (".immed",".const",".caddr", reserved);
  }

  define (instrfield=shft_val) {
	// WIN, RDX4, FIR
    bits = (6,4);
    enumerated = (".nosft",".shift1",".shift2",".shift3", ".shift4",".shift8",reserved,reserved);
  }

  define (instrfield=cc_im) {
	// WIN
    bits = (63,48);
  }

   define (instrfield=cc_re) {
	// WIN
    bits = (31,16);
  }

  define (instrfield=fft_rnd) {
	// RDX4
    bits = (118,116);
    enumerated = (".round0",".round1",".round2",".round3",".round4",".round5");
    display = dec;
  }

  define (instrfield=fft_rnd_rdx2) {
	// RDX2
    bits = (118,116);
    enumerated = (reserved,".round1",".round2",".round3",".round4",".round5");
    display = dec;
  }

  define (instrfield=quad_ext) {
	// RDX4, RDX2
    bits = 112;
    enumerated = (".noqext",".qext");
    value = ".noqext";
  }

  define (instrfield=real_fft) {
	// RDX2
    bits = 115;
    enumerated = (".nosplit",".opsplit");
    value = ".nosplit";
  }

  define (instrfield=tw_ovs) {
	// RDX2
    bits = (3,0);
    enumerated = (".noovs",".ovs2",".ovs4",".ovs8",".ovs16",".ovs32",".ovs64",".ovs128",".ovs256",".ovs512");
    value = ".noovs";
  }

  define (instrfield=init) {
	// FIR
    bits = 116;
    enumerated = (".zero_init",".const_init");
    value = ".zero_init";
  }

  define (instrfield=no_of_taps) {
	// FIR
    bits = (115,112);
    display = dec;
  }

  define (instrfield=tap_coef_mode) {
	// 2 upper bits
  bits = (63, 62);
  value = 1;
  }

  define (instrfield=tap_coef_bank) {
    bits = (61,60);
  }

  define (instrfield=tap_coef_col) {
    bits = (59,51);
    display=dec;
  }

  define (instrfield=tap_coef_slice) {
    bits = (50,48);
    display=dec;
  }

  define (instrfield=tap_coef_add) {
	// FIR
    //bits = (63,48);
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0,0x4FFF);
  }

  define (instrfield=cp_type) {
	// COPY
    bits = (115,112);
    enumerated = (".simple_copy",".threshold_ge",".threshold_lt",".transpose_copy",
                  ".copy_real_pack",".copy_imag_pack",".copy_unpack",".partial_copy_real",
                  ".partial_copy_imag",".partial_copy_r2i",".partial_copy_i2r",
                  ".copy_clear",".copy_shift",(".transpose_fwd",".copy_fwd"),(".transpose_bck",".copy_bck"),reserved,reserved);
    value = ".simple_copy";
  }

  define (instrfield=rst_acc) {
	// COPY
    bits = 117;
    enumerated = (".no_rst",".rst_wr");
  }

  define (instrfield=rst_n_keep) {
	// COPY
    bits = 111;
    enumerated = (".keep_orig",".reset_values");
    value = ".keep_orig";
  }

  define (instrfield=blk_src_inc) {
	// COPY
    bits = (63,56);
    display = dec;
  }

  define (instrfield=blk_dest_inc) {
	// COPY
    bits = (54,48);
    display = dec;
  }

  define (instrfield=mask) {
	// COPY
    bits = (31,16);
  }

  define (instrfield=se) {
	// PDMA
    bits = 120;
    enumerated = (".zeropad",".signext");
    value = ".zeropad";
  }

  define (instrfield=data_packing) {
	// PDMA
    bits = (118,114);
    enumerated = (".16cmplx",".24cmplx",".24real",".16real",".48bin",".16swap",".16clubbing",".cp4",".cp6",".cp8",".cp16",".cp4d",reserved,".abs",".idx",".idxsum",".cp4fmta",".cp4dfmta",".cp4fmtb",".cp4dfmtb",".cp8fmtb",".cp16fmtb");
    value = ".16cmplx";
  }

  define (instrfield=trans_type) {
	// PDMA
    bits = 113;
    enumerated = (".sysram2opram",".opram2sysram");
    value = ".sysram2opram";
  }

  define (instrfield=sync_async) {
	// PDMA
    bits = 112;
    enumerated = (".async",".sync");
    value = ".sync";
  }

  define (instrfield=vector_len) {
	// PDMA
    bits = (111,96);
    display = dec;
  }

  define (instrfield=sysram_mem_start_addr) {
	// PDMA
    bits = (95,64);
    reloc = R_PPC_ADDR32;
    display = hex;
  }

  define (instrfield=opram_mem_start_mode) {
	// 2 upper bits
  bits = (63, 62);
  enumerated = ("wr", "tr", "or");
  }

  define (instrfield=opram_mem_start_bank) {
    bits = (61,60);
  }

  define (instrfield=opram_mem_start_col) {
    bits = (59,51);
    display=dec;
  }

  define (instrfield=opram_mem_start_slice) {
    bits = (50,48);
    display=dec;
  }

  define (instrfield=opram_mem_start_addr) {
	// FIR
    //bits = (63,48);
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_masks = ((0x8000,0x8000),(0x4000,0x4000));
  }

  define (instrfield=opram_mem_start_addr_ind) {
	// FIR
    //bits = (63,48);
    width = 16;
    pseudo = true;
    disassemble = false;
    valid_ranges = (0,0x0178);
  }

  define (instrfield=opram_skip_addr) {
	// PDMA
    bits = (47,36);
  }

  define (instrfield=shft_ofst) {
	// WIN, RDX4, IRDX4
    bits = (27,25);
    enumerated = (".bits_0_5", ".bits_6_11", ".bits_12_17", ".bits_18_23",
	".bits_24_29", ".bits_30_35", ".bits_36_41", ".bits_42_47");
  }

  define (instrfield=shft_wr) {
	// WIN, RDX4, IRDX4
    bits = (15,10);
  }

  define (reloc=R_PPC_ADDR32) {
	// PDMS relocation
	value=1;
	pcrel=false;
  }

  define (reloc=R_PPC_REL32) {
	// JUMP relocation
	value=26;
	width=8;
        action = func (addr_t relocation,int is_linker) {
           return (is_linker) ? relocation + 8 : relocation;
          };
  }

  define (instrfield=opram_continuous_addr) {
	// PDMA
    bits = (35,24);
  }

  define (instrfield=sysram_skip_addr) {
	// PDMA
    bits = (23,12);
  }

  define (instrfield=sysram_continous_addr) {
	// PDMA
    bits = (11,0);
  }

  define (instrfield=adptv) {
	// RDX2-4
    bits = 114;
    enumerated = (".noadptv",".adptv");
  }

  define (instrfield=adptv_shft) {
	// RDX2-4
    bits = 113;
    enumerated = (".15down",".23down");
  }

  define (instrfield=adptv_ofst) {
	// RDX2-4
    bits = (27,25);
    enumerated = (".bits_0_5", ".bits_6_11", ".bits_12_17", ".bits_18_23",
	".bits_24_29", ".bits_30_35", ".bits_36_41", ".bits_42_47");
  }

  define (instrfield=adptv_wrnum) {
	// RDX2-4
    bits = (15,10);
    //display=name;
    //ref=WR;
  }

  define (instrfield=jmp_type) {
	// conditional jump
    bits = 121;
    enumerated = (("",".always"), ".cond");
  }

  define (instrfield=jmp_sel) {
	// conditional bit selection
    bits = (120,117);
    enumerated = (".bit0",".bit1",".bit2",".bit3",".bit4",
	".bit5",".bit6",".bit7",".bit8",".bit9");
  }

  define (instrfield=jmp_addr) {
	// target address relative to @jump instr
    bits = (63,32);
    reloc = R_PPC_REL32;
    addr=pc;
    display=hex;
  }

  define (instrfield=jmp_wr) {
	// conditional wr
    bits = (88,83);
    display=name;
    ref=WR;
    valid_ranges = (0,47);
  }

  define (instrfield=rst_acc_vmt) {
	// VMT
    bits = 121;
    enumerated = (".no_rst", ".rst_sum");
  }

  define (instrfield=in_dattyp_vmt) {
	// VMT
    bits = 120;
    enumerated = (".real",".cmplx");
    value = ".real";
  }

    define (instrfield=opsq1) {
	// VMT
    bits = 119;
    enumerated = (".no_sq1", ".sq1");
  }

    define (instrfield=opsq2s1) {
	// VMT
    bits = (118,117);
    enumerated = (".no_sq2s1", ".abs_sq2s1", ".mag_sq2s1", ".conj_sq2s1");
  }

    define (instrfield=opsq2s2) {
	// VMT
    bits = (116,114);
    enumerated = (".no_sq2s2", ".shft_sq2s2", ".wr_off_sq2s2", "imm_off_sqs2", ".vec_sq2s2");
  }

    define (instrfield=opsq2s3) {
	// VMT
    bits = 113;
    enumerated = (".no_sq2s3", ".sum_sq2s3");
  }

    define (instrfield=op_pack) {
	// VMT
    bits = 112;
    enumerated = (".op_off", ".op_on");
  }

    define (instrfield=ip_pack) {
	// VMT
    bits = (111,110);
    enumerated = (".in_24real", ".in_24im", ".in_48");
  }

    define (instrfield=imdt_offset_val_im) {
	// VMT
    bits = (31,16);
  }

    define (instrfield=extra_offset_val_im) {
	// VMT
    bits = (15,0);
  }

    define (instrfield=pre_proc) {
	// COPY, HIST, MAXS
    bits = (119,118);
    enumerated = (".no_pre", ".abs_abs_proc", ".abs_mag_proc");
  }

    define (instrfield=hist_mode) {
	// HIST
    bits = (117,116);
    enumerated = (".read_store", ".read", ".acc", ".store");
  }

    define (instrfield=bin_sz) {
	// HIST
    bits = (115,114);
    enumerated = (".16_24bins", ".32bins", ".64bins");
  }

    define (instrfield=pack_en) {
	// HIST
    bits = (111,110);
    enumerated = (".no_pack_real", ".no_pack_im", ".pack");
  }

    define (instrfield=threshold) {
	// HIST
    bits = (15,10);
  }

    define (instrfield=repeat2) {
	// RDX2, IRDX2
    bits = (111,110);
    enumerated = (("",".no_repeat"), ".fft8", reserved, ".fft32");
  }

    define (instrfield=repeat) {
	// RDX4, IRDX4
    bits = (111,110);
    enumerated = (("",".no_repeat"), ".fft8", ".fft16", ".fft32");
  }

    define (instrfield=thld_add) {
	// COPY
    bits = (15,0);
  }

    define (instrfield=shft_src) {
	// WIN
    bits = 7;
    enumerated = (".shft_val", ".shft_wr");
  }

    define (instrfield=dat_sz) {
	// HIST
    bits = 0;
    enumerated = (".16bits", ".24bits");
  }

    define (instrfield=thld_cmp) {
	// MAXS
    bits = 117;
    enumerated = (".no_thld_cmp", ".thld_cmp");
  }

    define (instrfield=pdma_tag) {
	// PDMA
    bits = 121;
    enumerated = (".notag", ".tag");
  }

    define (instrfield=in_tag) {
	// MAXS
    bits = 116;
    enumerated = (".no_tag_in", ".tag_in");
  }

    define (instrfield=loc_n_abs) {
	// MAXS
    bits = 115;
    enumerated = (".global_max", ".local_max");
  }

    define (instrfield=tag_n_bitfld) {
	// MAXS
    bits = 114;
    enumerated = (".packed_bitfld", ".tagged_vect");
  }

    define (instrfield=cyc_extn) {
	// MAXS
    bits = 113;
    enumerated = (".no_cyc_ext", ".cyc_ext");
  }

    define (instrfield=maxsn_en) {
	// MAXS
    bits = 112;
    enumerated = (".masxn_dis", ".maxsn_en");
  }

    define (instrfield=in_pack) {
	// MAXS
    bits = (111,110);
    enumerated = (".in_24real", ".in_24im", ".in_48packed");

  }

    define (instrfield=maxsn_sel) {
	// MAXS
    bits = (17,16);
    enumerated = (".no_maxsn", ".maxsn_16", ".maxsn_8", ".maxsn_4");
  }

    define (instrfield=re_im) {
	// SEL
    bits = 121;
    enumerated = (".im", ".re");
  }

    define (instrfield=sel_wr) {
	// SEL
    bits = (88,83);
  }

    define (instrfield=re_im_coeff) {
	// SCP
    bits = (120,119);
    enumerated = (".coef_cmplx", reserved, ".coef_im", ".coef_re");
  }

  //
  // The external resource is just an opaque object, registered
  // externally, which contains all of the real action code.  We just
  // decode stuff in here and pass it to this object.
  //
  define (ext_resource=spt) {
    objtype = SptBehavior;  // The class name is SptBehavior.
    external = true;        // It is externally defined and passed in.
  }

  //
  // Instructions
  //

  enum Option { WorkReg, Ram };

  unsigned long long get_imm_dat(unsigned isreg, unsigned long long x) {
    // return 0 if isref
    return isreg?0:x;
  }

  unsigned get_mode(unsigned x) {
    // 2 upper bits are the memtype (0: work register, 1: twiddle ram, 2: operand ram)
    return x >> 14;
  }

  unsigned get_bank(unsigned x) {
    // 2 bank bits for Operand RAM
    if (get_mode(x)==2)
        return (x >> 12) & 0x3;
    else
	return 0;
  }

  unsigned get_col(unsigned notzero,unsigned x) {
    // Twiddle or Operand RAM have a 9 bits encoded value in 0x0FF8
    // Work Register have a 6 bits encoded value in 0x01F8
    if(!notzero)
	return 0;
    else if (x&0xc000)
        return (x >> 3) & 0x1FF;
    else
	return (x >> 3) & 0x3F;
  }

  unsigned get_slice(unsigned x) {
    // Twiddle or Operand RAM
    if (x&0xc000)
        return (x & 7);
    else
	return 0;
  }

  unsigned get_maxsN(unsigned x) {
    // when disabled return 0 else x-1
    if (!x)
        return 0;
    else
	return x-1;
  }

  unsigned is_maxsN(unsigned x) {
    // when disabled return 0 else 1
    return x != 0;
  }

/*
** set		src_add, dest_add
** set.ind	src_add
** set.immed	imm_dat, dest_add
*/
  define (instr=set_) {
    """ Set workreg (full instruction) """;
    width = 128;
    fields = (opcode(0x1),src,ima,
              src_add_mode(0),
              src_add_wr,
              src_add_slice(0),
              dest_add_mode,
              dest_add_bank,
              dest_add_col,
              dest_add_slice,
              imm_dat);
    action = { };
  }

  define (instr=set) {
    """ Set workreg, [TR_col_slice, OR_bank_col_slice, WR] """;
    width = 128;
    alias = set_(src(src),imm_dat(get_imm_dat(src,imm_dat)),ima(0),
                src_add_wr(get_col(src,imm_dat)),
                dest_add_mode(get_mode(dest_add)),
                dest_add_bank(get_bank(dest_add)),
                dest_add_col(get_col(1,dest_add)),
                dest_add_slice(get_slice(dest_add)));
    syntax = ("%i%p %f,%f",src,imm_dat,dest_add);
  }

  define (instr=set_ind) {
    """ Set indirect via work register """;
    width = 128;
    alias = set_(src(1),ima(1),src_add_wr(get_col(1,src_add)),
	imm_dat(0),
              dest_add_mode(0),
              dest_add_bank(0),
              dest_add_col(0),
              dest_add_slice(0));
    syntax = ("set.ind %f",src_add);
  }

/*
** get	src_add, dest_add
** get.ind	src_add
*/
  define (instr=get_) {
    """ Get workreg (full instruction) """;
    width = 128;
    fields = (opcode(0x2),ima,
              src_add_mode,
              src_add_bank,
              src_add_col,
              src_add_slice,
              dest_add_mode(0),
              dest_add_wr,
              dest_add_slice(0));
    action = { };
  }

   define (instr=get) {
    """ Get workreg, [TR_col_slice, OR_bank_col_slice, WR] """;
    width = 128;
    alias = get_(ima(0),
                dest_add_wr(get_col(1,dest_add_WR)),
                src_add_mode(get_mode(src_add_T_O)),
                src_add_bank(get_bank(src_add_T_O)),
                src_add_col(get_col(1,src_add_T_O)),
                src_add_slice(get_slice(src_add_T_O)));
    syntax = ("%i %f,%f",src_add_T_O,dest_add_WR);
  }

  define (instr=get_ind) {
    """ Get indirect via work register """;
    width = 128;
    alias = get_(ima(1),src_add_mode(0), src_add_col(get_col(1,src_add_WR)), src_add_bank(0), src_add_slice(0));
    syntax = ("get.ind %f",src_add_WR);
  }

/*
** add		src shift modulo_val src_add, src2_add, dest_add 
*/
  define (instr=add_) {

    width = 128;
    fields = (opcode(0x3),src,shift,modulo_val,
              src_add_mode, src_add_bank, src_add_col, src_add_slice,
              src2_add_mode, src2_add_wr, src2_add_slice,
              dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
              imm_dat);

    action = { };
  }

  define (instr=add) {

    width = 128;
    alias = add_(src(src),shift(shift),modulo_val(modulo_val),imm_dat(get_imm_dat(src,imm_dat)),
              src_add_mode(get_mode(src_add)),
              src_add_bank(get_bank(src_add)),
              src_add_col(get_col(1,src_add)),
              src_add_slice(get_slice(src_add)),
              src2_add_mode(0),
              src2_add_wr(get_col(src,imm_dat)),
              src2_add_slice(0),
              dest_add_mode(get_mode(dest_add)),
              dest_add_bank(get_bank(dest_add)),
              dest_add_col(get_col(1,dest_add)),
              dest_add_slice(get_slice(dest_add)));
    syntax = ("%i %p %p %p %f,%f,%f",src,shift,modulo_val,src_add,imm_dat,dest_add);
  }

/** stop */
  define (instr=stop) {

    width = 128;
    fields = (opcode(0x4));

    action = { };
  }

/** loop	lp_cnt */
  define (instr=loop) {

    width = 128;
    fields = (opcode(0x5),lp_cnt);

    action = { };
  }

/** next */
  define (instr=next) {

    width = 128;
    fields = (opcode(0x6));

    action = { };
  }

/** sync */
  define (instr=sync) {

    width = 128;
    fields = (opcode(0x7));

    action = { };
  }

/** wait	ev_trig wait_ev */
  define (instr=wait) {

    width = 128;
    fields = (opcode(0x8),ev_tr,wait_ev);
    syntax = ("%i%p %f",ev_tr,wait_ev);

    action = { };
  }

/** evt	ev_lvl evt_ev */
  define (instr=evt) {

    width = 128;
    fields = (opcode(0x9),ev_lvl,evt_ev);
    syntax = ("%i%p %f",ev_lvl,evt_ev);

    action = { };
  }

/** watchdog	ev_tr mode wdog_ev count */
  define (instr=watchdog) {

    width = 128;
    fields = (opcode(0xa),ev_tr,wdog_op,wdog_ev,wdog_cnt);
    syntax = ("%i%p %f %f %f",ev_tr,wdog_op,wdog_ev,wdog_cnt);

    action = { };
  }

/*
** sub   	src shift modulo_val src_add, src2_add, dest_add
*/ 
  define (instr=sub_) {

    width = 128;
    fields = (opcode(0xB),src,shift,modulo_val,
              src_add_mode, src_add_bank, src_add_col, src_add_slice,
              src2_add_mode, src2_add_wr, src2_add_slice,
              dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
              imm_dat);

    action = { };
  }

  define (instr=sub) {

    width = 128;
    alias = sub_(src(src),shift(shift),modulo_val(modulo_val),imm_dat(get_imm_dat(src,imm_dat)),
              src_add_mode(get_mode(src_add)),
              src_add_bank(get_bank(src_add)),
              src_add_col(get_col(1,src_add)),
              src_add_slice(get_slice(src_add)),
              src2_add_mode(0),
              src2_add_wr(get_col(src,imm_dat)),
              src2_add_slice(0),
              dest_add_mode(get_mode(dest_add)),
              dest_add_bank(get_bank(dest_add)),
              dest_add_col(get_col(1,dest_add)),
              dest_add_slice(get_slice(dest_add)));

    syntax = ("%i%p %p %p %f,%f,%f",src,shift,modulo_val,src_add,imm_dat,dest_add);
  }

/*
** cmp	        src src_add, src2_add, dest_add 
*/
  define (instr=cmp_) {

    width = 128;
    fields = (opcode(0xC),src,
              src_add_mode, src_add_bank, src_add_col, src_add_slice,
              src2_add_mode, src2_add_wr, src2_add_slice,
              dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
              imm_dat);

    action = { };
  }

  define (instr=cmp) {

    width = 128;
    alias = cmp_(src(src),imm_dat(get_imm_dat(src,imm_dat)),
              src_add_mode(get_mode(src_add)),
              src_add_bank(get_bank(src_add)),
              src_add_col(get_col(1,src_add)),
              src_add_slice(get_slice(src_add)),
              src2_add_mode(0),
              src2_add_wr(get_col(src,imm_dat)),
              src2_add_slice(0),
              dest_add_mode(get_mode(dest_add)),
              dest_add_bank(get_bank(dest_add)),
              dest_add_col(get_col(1,dest_add)),
              dest_add_slice(get_slice(dest_add)));
    syntax = ("%i%p %f,%f,%f",src,src_add,imm_dat,dest_add);
  }

/*
** jump.cond cond_sel cond_wr rel_off 
** jump	                      rel_off
*/
  define (instr=jump_) {
    width = 128;
    fields = (opcode(0xD),jmp_type,jmp_sel,jmp_wr,jmp_addr);
    action = { };
  }

  define (instr=jump_alw) {
    width = 128;
    alias = jump_(jmp_type(0),jmp_sel(0),jmp_wr(0),jmp_addr(jmp_addr));
    syntax = ("jumpa %f",jmp_addr);
    dsyntax = ("jumpa .+0x%f",jmp_addr);
  }

  define (instr=jump_cond) {
    width = 128;
    alias = jump_(jmp_type(1),jmp_sel(jmp_sel),jmp_wr(jmp_wr),jmp_addr(jmp_addr));
    syntax = ("jumpc %f %f %f",jmp_sel,jmp_wr,jmp_addr);
    dsyntax = ("jumpc %f %f .+0x%f",jmp_sel,jmp_wr,jmp_addr);
  }

/* sel	re_im wr dest_add src1_add, src2_add, src3_add  */
  define (instr=sel_) {
    width = 128;
    fields = (opcode(0xE),re_im,sel_wr,
              dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
              src2_add_mode, src2_add_bank, src2_add_col, src2_add_slice,
              sel_src3_add_mode, sel_src3_add_bank, sel_src3_add_col, sel_src3_add_slice,
              sel_src1_add_mode, sel_src1_add_bank, sel_src1_add_col, sel_src1_add_slice);

    action = { };
  }

  define (instr=sel) {

    width = 128;
    alias = sel_(re_im(re_im),sel_wr(sel_wr),
	dest_add_mode(get_mode(dest_add)),
	dest_add_bank(get_bank(dest_add)),
	dest_add_col(get_col(1,dest_add)),
	dest_add_slice(get_slice(dest_add)),
	src2_add_mode(get_mode(src2_add_sel)),
	src2_add_bank(get_bank(src2_add_sel)),
	src2_add_col(get_col(1,src2_add_sel)),
	src2_add_slice(get_slice(src2_add_sel)),
	sel_src3_add_mode(get_mode(sel_src3_add)),
	sel_src3_add_bank(get_bank(sel_src3_add)),
	sel_src3_add_col(get_col(1,sel_src3_add)),
	sel_src3_add_slice(get_slice(sel_src3_add)),
	sel_src1_add_mode(get_mode(sel_src1_add)),
	sel_src1_add_bank(get_bank(sel_src1_add)),
	sel_src1_add_col(get_col(1,sel_src1_add)),
	sel_src1_add_slice(get_slice(sel_src1_add)));

    syntax = ("%i%p %f %f %f,%f,%f",re_im,sel_wr,dest_add,sel_src1_add,src2_add_sel,sel_src3_add);
  }

/*
win                           in_dattyp win_type shft_val          vec_sz src_add, dest_add,                src_add_inc, dest_add_inc, cc_im, cc_re
win.ind                       in_dattyp win_type shft_val          vec_sz src_add,                          src_add_inc, dest_add_inc, cc_im, cc_re 
win                 mult_mode in_dattyp win_type shft_val          vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
win.ind             mult_mode in_dattyp win_type shft_val          vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
win.shift_wr        mult_mode in_dattyp win_type shft_ofst shft_wr vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
win.ind.shift_wr    mult_mode in_dattyp win_type shft_ofst shft_wr vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
*/
  // Win instruction with MultMode == 0.
  define (instr=win_mm0_) {
    width = 128;
    fields = (opcode(0x21),in_dattyp,win_type,ima,vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	cc_im,src_add_inc,dest_add_inc,cc_re,
	shft_wr(0),mult_mod(0),shft_src(0),shft_val);

    dsyntax = ("win mult_mode=0 %p %p %p shift= %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f src_inc=%f dest_inc=%f cc_im=%f cc_re=%f",
	ima, in_dattyp, win_type, shft_val, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc, dest_add_inc,
	cc_im,cc_re);

    action = { };
  }

  define (instr=win_mm0) {
    width = 128;
    alias = win_mm0_(in_dattyp(in_dattyp),ima(0),
	win_type(win_type),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add_O)),
	src_add_bank(get_bank(src_add_O)),
	src_add_col(get_col(1,src_add_O)),
	src_add_slice(get_slice(src_add_O)),
	dest_add_mode(get_mode(dest_add_O)),
	dest_add_bank(get_bank(dest_add_O)),
	dest_add_col(get_col(1,dest_add_O)),
	dest_add_slice(get_slice(dest_add_O)),
	cc_im(cc_im), cc_re(cc_re),
	src_add_inc(src_add_inc), dest_add_inc(dest_add_inc),
	shft_val(shft_val));

    syntax = ("win %p %p %f %f %f,%f,%f,%f,%f,%f",
	in_dattyp, win_type, shft_val, vec_sz,
	src_add_O, dest_add_O,
	src_add_inc, dest_add_inc,
	cc_im,cc_re);
 }

  define (instr=win_mm0_ind) {
    width = 128;
    alias = win_mm0_(in_dattyp(in_dattyp),
	ima(1),win_type(win_type),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add_WR)),
	src_add_bank(get_bank(src_add_WR)),
	src_add_col(get_col(1,src_add_WR)),
	src_add_slice(get_slice(src_add_WR)),
	dest_add_mode(0),
	dest_add_bank(0),
	dest_add_col(0),
	dest_add_slice(0),
	cc_im(cc_im), cc_re(cc_re),
	src_add_inc(src_add_inc), dest_add_inc(dest_add_inc),
	shft_val(shft_val));

    syntax = ("win.ind %p %p %f %f %f,%f,%f,%f,%f",
	in_dattyp, win_type, shft_val, vec_sz,
	src_add_WR,
	src_add_inc, dest_add_inc,
	cc_im,cc_re);
 }

   // Win instruction with MultMode != 0.
  define (instr=win_mmn0_) {
    width = 128;
    fields = (opcode(0x21), in_dattyp, win_type, ima, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	mult_coef_mode, mult_coef_bank, mult_coef_col, mult_coef_slice,
	src_add_inc, dest_add_inc,
	mca_mod, shft_ofst, mca_inc,
	shft_wr, mult_mod, shft_src, shft_val);

    dsyntax = ("win mult_mode=%f %f %f %f shft=%f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_coef=%f,%f,%f,%f mca_mod=%f mca_inc=%f src_inc=%f dest_inc=%f",
	mult_mod, ima, in_dattyp, win_type,
	shft_src, shft_val, shft_wr, shft_ofst, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	mult_coef_mode, mult_coef_bank, mult_coef_col, mult_coef_slice,
	src_add_inc, dest_add_inc,
	mca_mod, mca_inc);

    action = { };
  }

  // Win instruction with MultMode != 0.
  define (instr=win_mmn0) {
    width = 128;
    alias = win_mmn0_(in_dattyp(in_dattyp),
	ima(0),win_type(win_type),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add_O)),
	src_add_bank(get_bank(src_add_O)),
	src_add_col(get_col(1,src_add_O)),
	src_add_slice(get_slice(src_add_O)),
	dest_add_mode(get_mode(dest_add_O)),
	dest_add_bank(get_bank(dest_add_O)),
	dest_add_col(get_col(1,dest_add_O)),
	dest_add_slice(get_slice(dest_add_O)),
	mult_coef_mode(get_mode(mult_coef_add)),
	mult_coef_bank(get_bank(mult_coef_add)),
	mult_coef_col(get_col(1,mult_coef_add)),
	mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),shft_ofst(0),mca_inc(mca_inc),
	shft_wr(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val));

    syntax = ("win %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
      mult_mod,in_dattyp,win_type,shft_val,vec_sz,
      src_add_O,dest_add_O,mult_coef_add,
      src_add_inc,dest_add_inc,
      mca_mod,mca_inc);
}

  // Win instruction with MultMode != 0.
  define (instr=win_mmn0_ind) {
    width = 128;
    alias = win_mmn0_(in_dattyp(in_dattyp),
	ima(1),win_type(win_type),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(0),
	dest_add_bank(0),
	dest_add_col(0),
	dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),
	mult_coef_bank(get_bank(mult_coef_add)),
	mult_coef_col(get_col(1,mult_coef_add)),
	mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),shft_ofst(0),mca_inc(mca_inc),
	shft_wr(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val));

    syntax = ("win.ind %p %p %p %f %f %f,%f,%f,%f,%f,%f",
      mult_mod,in_dattyp,win_type,shft_val,vec_sz,
      src_add,mult_coef_add,
      src_add_inc,dest_add_inc,
      mca_mod,mca_inc);
}

  define (instr=win_mmn0_shft) {
    width = 128;
    alias = win_mmn0_(in_dattyp(in_dattyp),
	ima(0),win_type(win_type),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add_O)),
	src_add_bank(get_bank(src_add_O)),
	src_add_col(get_col(1,src_add_O)),
	src_add_slice(get_slice(src_add_O)),
	dest_add_mode(get_mode(dest_add_O)),
	dest_add_bank(get_bank(dest_add_O)),
	dest_add_col(get_col(1,dest_add_O)),
	dest_add_slice(get_slice(dest_add_O)),
	mult_coef_mode(get_mode(mult_coef_add)),
	mult_coef_bank(get_bank(mult_coef_add)),
	mult_coef_col(get_col(1,mult_coef_add)),
	mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),shft_ofst(shft_ofst),mca_inc(mca_inc),
	shft_wr(shft_wr),mult_mod(mult_mod),shft_src(1),shft_val(0));

    syntax = ("win.shift_wr %p %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
      mult_mod,in_dattyp,win_type,shft_ofst,shft_wr,vec_sz,
      src_add_O,dest_add_O,mult_coef_add,
      src_add_inc,dest_add_inc,
      mca_mod,mca_inc);
}

  define (instr=win_mmn0_shft_ind) {
    width = 128;
    alias = win_mmn0_(in_dattyp(in_dattyp),
	ima(1),win_type(win_type),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(0),
	dest_add_bank(0),
	dest_add_col(0),
	dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),
	mult_coef_bank(get_bank(mult_coef_add)),
	mult_coef_col(get_col(1,mult_coef_add)),
	mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),shft_ofst(shft_ofst),mca_inc(mca_inc),
	shft_wr(shft_wr),mult_mod(mult_mod),shft_src(1),shft_val(0));

    syntax = ("win.shift_wr.ind %p %p %p %p %f %f %f,%f,%f,%f,%f,%f",
      mult_mod,in_dattyp,win_type,shft_ofst,shft_wr,vec_sz,
      src_add,mult_coef_add,
      src_add_inc,dest_add_inc,
      mca_mod,mca_inc);
}
 
/*
rdx4                                in_dattyp win_type repeat quad_ext tw_ovs fft_rnd shft_val                                vec_sz src_add, dest_add,                src_add_inc, dest_add_inc, cc_im, cc_re
rdx4.ind                            in_dattyp win_type repeat quad_ext tw_ovs fft_rnd shft_val                                vec_sz src_add,                          src_add_inc, dest_add_inc, cc_im, cc_re
rdx4                      mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd                                         vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.ind                  mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd                                         vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.shift                mult_mode in_dattyp win_type repeat quad_ext tw_ovs         shft_val                                vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.shift.ind            mult_mode in_dattyp win_type repeat quad_ext tw_ovs         shft_val                                vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.shift_wr             mult_mode in_dattyp win_type repeat quad_ext tw_ovs                             shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.shift_wr.ind         mult_mode in_dattyp win_type repeat quad_ext tw_ovs                             shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.adptv                mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd          adptv_shft adptv_ofst adptv_wr vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.adptv.ind            mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd          adptv_shft adptv_ofst adptv_wr vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.adptv.shift          mult_mode in_dattyp win_type repeat quad_ext tw_ovs         shft_val adptv_shft                     vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.adptv.shift.ind      mult_mode in_dattyp win_type repeat quad_ext tw_ovs         shft_val adptv_shft                     vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.adptv.shift_wr       mult_mode in_dattyp win_type repeat quad_ext tw_ovs                  adptv_shft shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
rdx4.adptv.shift_wr.ind   mult_mode in_dattyp win_type repeat quad_ext tw_ovs                  adptv_shft shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
*/
   // rdx4 instruction with MultMode == 0.
  define (instr=rdx4_mm0_) {
    width = 128;
    fields = (opcode(0x22),in_dattyp,win_type_rdx,fft_rnd,adptv(0),adptv_shft(0),quad_ext,
	repeat,ima,vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	cc_im,
	src_add_inc,dest_add_inc,
	cc_re,
	adptv_wrnum(0),mult_mod(0),shft_src(0),shft_val,tw_ovs);

    dsyntax = ("rdx4 mult_mode=0 %p %p %p %p %f %f fft_round=%f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f src_inc=%f dest_inc=%f cc_im=%f cc_re=%f",
	ima, in_dattyp, win_type_rdx, repeat, quad_ext, tw_ovs, fft_rnd, shft_val, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc, dest_add_inc,
	cc_im,cc_re);

    action = { };
  }

  define (instr=rdx4_mm0) {

    width = 128;
    alias = rdx4_mm0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	cc_im(cc_im),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	cc_re(cc_re),
	shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("rdx4 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
      in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,fft_rnd,shft_val,
      vec_sz,src_add,dest_add,src_add_inc,dest_add_inc,cc_im,cc_re);
}

  define (instr=rdx4_mm0_ind) {

    width = 128;
    alias = rdx4_mm0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	cc_im(cc_im),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	cc_re(cc_re),
	shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("rdx4.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
      in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,fft_rnd,shft_val,
      vec_sz,src_add,src_add_inc,dest_add_inc,cc_im,cc_re);
}

   // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_) {
    width = 128;
    fields = (opcode(0x22),in_dattyp,win_type_rdx,fft_rnd,adptv,adptv_shft,quad_ext,
	repeat,ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	mca_mod,adptv_ofst,mca_inc,
	adptv_wrnum,mult_mod,shft_src,shft_val,tw_ovs);

    dsyntax = ("rdx4 mult_mode=%p %p %p %p %f %f %f fft_round=%f adptv=%f %f %f %f  shift=%f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_coef=%f,%f,%f,%f src_inc=%f dest_inc=%f mca_mod=%f mca_inc=%f",
	mult_mod,ima,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,fft_rnd,
	adptv,adptv_shft,adptv_wrnum,adptv_ofst,
	shft_val,shft_src,adptv_wrnum,adptv_ofst,
	vec_sz,src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	mca_mod,mca_inc);

    action = { };
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);

  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_ind) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_adptv) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(adptv_ofst),mca_inc(mca_inc),
	adptv_wrnum(adptv_wrnum),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.adptv %p %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_adptv_ind) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(adptv_ofst),mca_inc(mca_inc),
	adptv_wrnum(adptv_wrnum),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.adptv.ind %p %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_shft) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("rdx4.shift %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              shft_val,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_shft_wr) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(shft_ofst),mca_inc(mca_inc),
	adptv_wrnum(shft_wr),mult_mod(mult_mod),shft_src(1),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.shift_wr %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,shft_ofst,
              shft_wr,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_shft_ind) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("rdx4.shift.ind %p %p %p %p %p %f %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              shft_val,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_shft_wr_ind) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(shft_ofst),mca_inc(mca_inc),
	adptv_wrnum(shft_wr),mult_mod(mult_mod),shft_src(1),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.shift_wr.ind %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,shft_ofst,
              shft_wr,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_adptv_shft) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("rdx4.adptv.shift %p %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              shft_val,adptv_shft,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_adptv_shft_wr) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(shft_ofst),mca_inc(mca_inc),
	adptv_wrnum(shft_wr),mult_mod(mult_mod),shft_src(1),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.adptv.shift_wr %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,adptv_shft,shft_ofst,
              shft_wr,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_adptv_shft_ind) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("rdx4.adptv.shift.ind %p %p %p %p %p %p %f %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              shft_val,adptv_shft,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // RDX4 instruction with MultMode != 0.
  define (instr=rdx4_mmn0_adptv_shft_wr_ind) {

    width = 128;
    alias = rdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(shft_ofst),mca_inc(mca_inc),
	adptv_wrnum(shft_wr),mult_mod(mult_mod),shft_src(1),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("rdx4.adptv.shift_wr.ind %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,adptv_shft,shft_ofst,
              shft_wr,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }


  // RDX2 instruction 
/*
rdx2                         in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat real_fft shft_val                                vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
rdx2.ind                     in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat real_fft shft_val                                vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
rdx2.shift_wr                in_dattyp quad_ext tw_ovs              repeat real_fft                     shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
rdx2.shift_wr.ind            in_dattyp quad_ext tw_ovs              repeat real_fft                     shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
rdx2.adptv                   in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat real_fft shft_val adptv_shft adptv_ofst adptv_wr vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
rdx2.adptv.ind               in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat real_fft shft_val adptv_shft adptv_ofst adptv_wr vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
rdx2.adptv.shift_wr          in_dattyp quad_ext tw_ovs              repeat real_fft          adptv_shft shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
rdx2.adptv.shift_wr.ind      in_dattyp quad_ext tw_ovs              repeat real_fft          adptv_shft shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
*/
  define (instr=rdx2_) {
    width = 128;
    fields = (opcode(0x23),in_dattyp,fft_rnd_rdx2,real_fft,adptv,adptv_shft,quad_ext,
	repeat2,ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	adptv_ofst,adptv_wrnum,
	shft_src,shft_val,tw_ovs);

    dsyntax = ("rdx2 %f %f %f %f fft_round=%f %f %f adptv=%f %f %f %f shift=%f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_coef=%f,%f,%f,%f src_inc=%f dest_inc=%f",
	ima,in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat2,real_fft,
	adptv,adptv_shft,adptv_wrnum,adptv_ofst,
	shft_val,shft_src,adptv_wrnum,adptv_ofst,
	vec_sz,src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc);


    action = { };
  }

  // RDX2 instruction 
  define (instr=rdx2) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(fft_rnd_rdx2),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),real_fft(real_fft),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(0),shft_val(shft_val),shft_src(0),
	adptv_wrnum(0),tw_ovs(tw_ovs));

    syntax = ("rdx2 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,real_fft,shft_val,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction
  define (instr=rdx2_ind) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(fft_rnd_rdx2),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),real_fft(real_fft),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(0),shft_val(shft_val),shft_src(0),
	adptv_wrnum(0),tw_ovs(tw_ovs));

    syntax = ("rdx2.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,real_fft,shft_val,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction 
  define (instr=rdx2_shift_wr) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),real_fft(real_fft),fft_rnd_rdx2(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("rdx2.shift_wr %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,real_fft,
              adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction 
  define (instr=rdx2_shift_wr_ind) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),real_fft(real_fft),fft_rnd_rdx2(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("rdx2.shift_wr.ind %p %p %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,real_fft,
              adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction 
  define (instr=rdx2_adptv) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),real_fft(real_fft),fft_rnd_rdx2(fft_rnd_rdx2),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(shft_val),shft_src(0),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("rdx2.adptv %p %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,real_fft,shft_val,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction 
  define (instr=rdx2_adptv_ind) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),real_fft(real_fft),fft_rnd_rdx2(fft_rnd_rdx2),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(shft_val),shft_src(0),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("rdx2.adptv.ind %p %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,real_fft,shft_val,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction 
  define (instr=rdx2_adptv_shift_wr) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),real_fft(real_fft),fft_rnd_rdx2(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("rdx2.adptv.shift_wr %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,real_fft,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // RDX2 instruction 
  define (instr=rdx2_adptv_shift_wr_ind) {

    width = 128;
    alias = rdx2_(in_dattyp(in_dattyp),real_fft(real_fft),fft_rnd_rdx2(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("rdx2.adptv.shift_wr.ind %p %p %p %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,real_fft,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

/*
fir                 in_dattyp win_type init no_of_taps shft_val          vec_sz src_add, dest_add, tap_coef_add, src_add_inc, dest_add_inc  
fir.ind             in_dattyp win_type init no_of_taps shft_val          vec_sz src_add,           tap_coef_add, src_add_inc, dest_add_inc 
fir.shift_wr        in_dattyp win_type init no_of_taps shft_ofst shft_wr vec_sz src_add, dest_add, tap_coef_add, src_add_inc, dest_add_inc
fir.shift_wr.ind    in_dattyp win_type init no_of_taps shft_ofst shft_wr vec_sz src_add,           tap_coef_add, src_add_inc, dest_add_inc
*/
  define (instr=fir_) {

    width = 128;
    fields = (opcode(0x29),in_dattyp,win_type,init,no_of_taps,
	ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	tap_coef_mode,tap_coef_bank,tap_coef_col,tap_coef_slice,
	src_add_inc,dest_add_inc,
	shft_ofst,
	shft_wr,shft_src,shft_val);

    dsyntax = ("fir %p %p %p %p taps=%f shift=%f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f tap_coef=%f,%f,%f,%f src_inc=%f dest_inc=%f",
	ima, in_dattyp, win_type, init, no_of_taps, shft_src,
	shft_wr,shft_ofst,shft_val,vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	tap_coef_mode, tap_coef_bank, tap_coef_col, tap_coef_slice,
	src_add_inc, dest_add_inc);

    action = { };
  }

  define (instr=fir) {
    width = 128;
    alias = fir_(in_dattyp(in_dattyp),win_type(win_type),init(init),no_of_taps(no_of_taps),ima(0),vec_sz(vec_sz),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(get_mode(dest_add)),
    		dest_add_bank(get_bank(dest_add)),
     		dest_add_col(get_col(1,dest_add)),
     		dest_add_slice(get_slice(dest_add)),
    		tap_coef_mode(get_mode(tap_coef_add)),
    		tap_coef_bank(get_bank(tap_coef_add)),
     		tap_coef_col(get_col(1,tap_coef_add)),
     		tap_coef_slice(get_slice(tap_coef_add)),
		shft_src(0),shft_wr(0),shft_ofst(0),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
		shft_val(shft_val));

    syntax = ("fir %p %p %p %p %f %f %f,%f,%f,%f,%f",
		in_dattyp,win_type,init,shft_val,no_of_taps,
		vec_sz,src_add,dest_add,tap_coef_add,src_add_inc,dest_add_inc);
  }

  define (instr=fir_ind) {
    width = 128;
    alias = fir_(in_dattyp(in_dattyp),win_type(win_type),init(init),no_of_taps(no_of_taps),ima(1),vec_sz(vec_sz),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(0),
    		dest_add_bank(0),
     		dest_add_col(0),
     		dest_add_slice(0),
    		tap_coef_mode(get_mode(tap_coef_add)),
    		tap_coef_bank(get_bank(tap_coef_add)),
     		tap_coef_col(get_col(1,tap_coef_add)),
     		tap_coef_slice(get_slice(tap_coef_add)),
		shft_src(0),shft_wr(0),shft_ofst(0),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
		shft_val(shft_val));

    syntax = ("fir.ind %p %p %p %p %f %f %f,%f,%f,%f",
		in_dattyp,win_type,init,shft_val,no_of_taps,
		vec_sz,src_add,tap_coef_add,src_add_inc,dest_add_inc);

  }

  define (instr=fir_shift_wr) {
    width = 128;
    alias = fir_(in_dattyp(in_dattyp),win_type(win_type),init(init),no_of_taps(no_of_taps),ima(0),vec_sz(vec_sz),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(get_mode(dest_add)),
    		dest_add_bank(get_bank(dest_add)),
     		dest_add_col(get_col(1,dest_add)),
     		dest_add_slice(get_slice(dest_add)),
    		tap_coef_mode(get_mode(tap_coef_add)),
    		tap_coef_bank(get_bank(tap_coef_add)),
     		tap_coef_col(get_col(1,tap_coef_add)),
     		tap_coef_slice(get_slice(tap_coef_add)),
		shft_src(1),shft_wr(shft_wr),shft_ofst(shft_ofst),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),shft_val(0));

    syntax = ("fir.shift_wr %p %p %p %p %f %f %f %f,%f,%f,%f,%f",
		in_dattyp,win_type,init,shft_ofst,shft_wr,no_of_taps,
		vec_sz,src_add,dest_add,tap_coef_add,src_add_inc,dest_add_inc);

  }

  define (instr=fir_shift_wr_ind) {
    width = 128;
    alias = fir_(in_dattyp(in_dattyp),win_type(win_type),init(init),no_of_taps(no_of_taps),ima(1),vec_sz(vec_sz),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(0),
    		dest_add_bank(0),
     		dest_add_col(0),
     		dest_add_slice(0),
    		tap_coef_mode(get_mode(tap_coef_add)),
    		tap_coef_bank(get_bank(tap_coef_add)),
     		tap_coef_col(get_col(1,tap_coef_add)),
     		tap_coef_slice(get_slice(tap_coef_add)),
		shft_src(1),shft_wr(shft_wr),shft_ofst(shft_ofst),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),shft_val(0));

    syntax = ("fir.shift_wr.ind %p %p %p %p %f %f %f %f,%f,%f,%f",
		in_dattyp,win_type,init,shft_ofst,shft_wr,no_of_taps,
		vec_sz,src_add,tap_coef_add,src_add_inc,dest_add_inc);

  }
 
/*
irdx4                        in_dattyp win_type repeat quad_ext tw_ovs fft_rnd shft_val                       vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, cc_im, cc_re
irdx4.ind                    in_dattyp win_type repeat quad_ext tw_ovs fft_rnd shft_val                       vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, cc_im, cc_re
irdx4              mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd                                vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
irdx4.ind          mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd                                vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
irdx4.shift        mult_mode in_dattyp win_type repeat quad_ext tw_ovs shft_val                               vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
irdx4.shift.ind    mult_mode in_dattyp win_type repeat quad_ext tw_ovs shft_val                               vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
irdx4.shift_wr     mult_mode in_dattyp win_type repeat quad_ext tw_ovs                    shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc 
irdx4.shift_wr.ind mult_mode in_dattyp win_type repeat quad_ext tw_ovs                    shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
irdx4.adptv        mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd adptv_shft adptv_ofst adptv_wr vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
irdx4.adptv.ind    mult_mode in_dattyp win_type repeat quad_ext tw_ovs fft_rnd adptv_shft adptv_ofst adptv_wr vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc, mca_mod, mca_inc
*/
   // irdx4 instruction with MultMode == 0.
  define (instr=irdx4_mm0_) {
    width = 128;
    fields = (opcode(0x2b),in_dattyp,win_type_rdx,fft_rnd,adptv(0),adptv_shft(0),quad_ext,
	repeat,ima,vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	cc_im,
	src_add_inc,dest_add_inc,
	cc_re,
	adptv_wrnum(0),mult_mod(0),shft_src(0),shft_val,tw_ovs);

    dsyntax = ("irdx4 mult_mode=0 %p %p %p %f %f %f fft_round=%f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f src_inc=%f dest_inc=%f cc_im=%f cc_re=%f",
	ima, in_dattyp, win_type_rdx, repeat, quad_ext, tw_ovs, fft_rnd, shft_val, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc, dest_add_inc,
	cc_im,cc_re);

    action = { };
  }

  define (instr=irdx4_mm0) {

    width = 128;
    alias = irdx4_mm0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	cc_im(cc_im),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	cc_re(cc_re),
	shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("irdx4 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
      in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,fft_rnd,shft_val,
      vec_sz,src_add,dest_add,src_add_inc,dest_add_inc,cc_im,cc_re);
}

  define (instr=irdx4_mm0_ind) {

    width = 128;
    alias = irdx4_mm0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	cc_im(cc_im),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	cc_re(cc_re),
	shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("irdx4.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
      in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,fft_rnd,shft_val,
      vec_sz,src_add,src_add_inc,dest_add_inc,cc_im,cc_re);

}

   // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_) {
    width = 128;
    fields = (opcode(0x2b),in_dattyp,win_type_rdx,fft_rnd,adptv,adptv_shft,quad_ext,
	repeat,ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	mca_mod,adptv_ofst,mca_inc,
	adptv_wrnum,mult_mod,shft_src,shft_val,tw_ovs);

    dsyntax = ("irdx4 mult_mode=%p %p %p %p %p %p %f fft_round=%f adptv=%f %f %f %f  shift=%f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_coef=%f,%f,%f,%f src_inc=%f dest_inc=%f mca_mod=%f mca_inc=%f",
	mult_mod,ima,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,fft_rnd,
	adptv,adptv_shft,adptv_wrnum,adptv_ofst,
	shft_val,shft_src,adptv_wrnum,adptv_ofst,
	vec_sz,src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	mca_mod,mca_inc);

    action = { };
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("irdx4 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_ind) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("irdx4.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_adptv) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(adptv_ofst),mca_inc(mca_inc),
	adptv_wrnum(adptv_wrnum),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("irdx4.adptv %p %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_adptv_ind) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(fft_rnd),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(adptv_ofst),mca_inc(mca_inc),
	adptv_wrnum(adptv_wrnum),mult_mod(mult_mod),shft_src(0),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("irdx4.adptv.ind %p %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              fft_rnd,adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_shft) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("irdx4.shift %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              shft_val,vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_shft_wr) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(adptv_ofst),mca_inc(mca_inc),
	adptv_wrnum(adptv_wrnum),mult_mod(mult_mod),shft_src(1),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("irdx4.shift_wr %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_shft_ind) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(0),mca_inc(mca_inc),
	adptv_wrnum(0),mult_mod(mult_mod),shft_src(0),shft_val(shft_val),tw_ovs(tw_ovs));

    syntax = ("irdx4.shift.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              shft_val,vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX4 instruction with MultMode != 0.
  define (instr=irdx4_mmn0_shft_wr_ind) {

    width = 128;
    alias = irdx4_mmn0_(in_dattyp(in_dattyp),win_type_rdx(win_type_rdx),fft_rnd(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	mca_mod(mca_mod),adptv_ofst(adptv_ofst),mca_inc(mca_inc),
	adptv_wrnum(adptv_wrnum),mult_mod(mult_mod),shft_src(1),shft_val(0),tw_ovs(tw_ovs));

    syntax = ("irdx4.shift_wr.ind %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f,%f",
              mult_mod,in_dattyp,win_type_rdx,repeat,quad_ext,tw_ovs,
              adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc,mca_mod,mca_inc);
  }

  // IRDX2 instruction 
/*
irdx2                         in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat shft_val                                vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
irdx2.ind                     in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat shft_val                                vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
irdx2.shift_wr                in_dattyp quad_ext tw_ovs              repeat                     shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
irdx2.shift_wr.ind            in_dattyp quad_ext tw_ovs              repeat                     shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
irdx2.adptv                   in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat shft_val adptv_shft adptv_ofst adptv_wr vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
irdx2.adptv.ind               in_dattyp quad_ext tw_ovs fft_rnd_rdx2 repeat shft_val adptv_shft adptv_ofst adptv_wr vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
irdx2.adptv.shift_wr          in_dattyp quad_ext tw_ovs              repeat          adptv_shft shft_ofst  shft_wr  vec_sz src_add, dest_add, mult_coef_add, src_add_inc, dest_add_inc
irdx2.adptv.shift_wr.ind      in_dattyp quad_ext tw_ovs              repeat          adptv_shft shft_ofst  shft_wr  vec_sz src_add,           mult_coef_add, src_add_inc, dest_add_inc
*/

  define (instr=irdx2_) {
    width = 128;
    fields = (opcode(0x2c),in_dattyp,fft_rnd_rdx2,adptv,adptv_shft,quad_ext,
	repeat2,ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	adptv_ofst,adptv_wrnum,
	shft_src,shft_val,tw_ovs);

    dsyntax = ("irdx2 %f %f %f %f fft_round=%f %f adptv=%f %f %f %f shift=%f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_coef=%f,%f,%f,%f src_inc=%f dest_inc=%f",
	ima,in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat2,
	adptv,adptv_shft,adptv_wrnum,adptv_ofst,
	shft_val,shft_src,adptv_wrnum,adptv_ofst,
	vec_sz,src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc);


    action = { };
  }

  // IRDX2 instruction 
  define (instr=irdx2) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(fft_rnd_rdx2),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(0),shft_val(shft_val),shft_src(0),
	adptv_wrnum(0),tw_ovs(tw_ovs));

    syntax = ("irdx2 %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,shft_val,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction
  define (instr=irdx2_ind) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(fft_rnd_rdx2),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(0),shft_val(shft_val),shft_src(0),
	adptv_wrnum(0),tw_ovs(tw_ovs));

    syntax = ("irdx2.ind %p %p %p %p %p %p %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,shft_val,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction 
  define (instr=irdx2_shift_wr) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("irdx2.shift_wr %p %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,
              adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction 
  define (instr=irdx2_shift_wr_ind) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(0),adptv(0),adptv_shft(0),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("irdx2.shift_wr.ind %p %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,
              adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction 
  define (instr=irdx2_adptv) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(fft_rnd_rdx2),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(shft_val),shft_src(0),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("irdx2.adptv %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,shft_val,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction 
  define (instr=irdx2_adptv_ind) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(fft_rnd_rdx2),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(shft_val),shft_src(0),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("irdx2.adptv.ind %p %p %p %p %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,fft_rnd_rdx2,repeat,shft_val,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction 
  define (instr=irdx2_adptv_shift_wr) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("irdx2.adptv.shift_wr %p %p %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

  // IRDX2 instruction 
  define (instr=irdx2_adptv_shift_wr_ind) {

    width = 128;
    alias = irdx2_(in_dattyp(in_dattyp),fft_rnd_rdx2(0),adptv(1),adptv_shft(adptv_shft),quad_ext(quad_ext),
	repeat2(repeat),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	adptv_ofst(adptv_ofst),shft_val(0),shft_src(1),
	adptv_wrnum(adptv_wrnum),tw_ovs(tw_ovs));

    syntax = ("irdx2.adptv.shift_wr.ind %p %p %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,quad_ext,tw_ovs,repeat,
              adptv_shft,adptv_ofst,adptv_wrnum,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

 // SCP instruction 
/*
scp                in_dattyp re_im_coeff shft_val         no_of_taps vec_sz src_add, dest_add, coef_add, src_add_inc, dest_add_inc
scp.ind            in_dattyp re_im_coeff shft_val         no_of_taps vec_sz src_add,           coef_add, src_add_inc, dest_add_inc
scp.shift_wr       in_dattyp re_im_coeff shft_ofst sht_wr no_of_taps vec_sz src_add, dest_add, coef_add, src_add_inc, dest_add_inc
scp.shift_wr.ind   in_dattyp re_im_coeff shft_ofst sht_wr no_of_taps vec_sz src_add,           coef_add, src_add_inc, dest_add_inc
*/
  define (instr=scp_) {
    width = 128;
    fields = (opcode(0x2a),in_dattyp,re_im_coeff,no_of_taps,
	ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	shft_ofst,
	shft_wr,shft_src,shft_val);

    dsyntax = ("scp %f %f %f no_of_taps=%f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_coef=%f,%f,%f,%f src_inc=%f dest_inc=%f shift=%f %f %f %f",
	ima,in_dattyp,re_im_coeff,no_of_taps,
	vec_sz, src_add_mode, src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	shft_val,shft_src,shft_wr,shft_ofst);

    action = { };
  }

  // scp instruction
  define (instr=scp) {

    width = 128;
    alias = scp_(in_dattyp(in_dattyp),re_im_coeff(re_im_coeff),no_of_taps(no_of_taps),
	ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	shft_ofst(0),
	shft_wr(0),shft_src(0),shft_val(shft_val));

    syntax = ("scp %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,re_im_coeff,shft_val,no_of_taps,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);
  }

  // scp instruction
  define (instr=scp_ind) {

    width = 128;
    alias = scp_(in_dattyp(in_dattyp),re_im_coeff(re_im_coeff),no_of_taps(no_of_taps),
	ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	shft_ofst(0),
	shft_wr(0),shft_src(0),shft_val(shft_val));

    syntax = ("scp.ind %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,re_im_coeff,shft_val,no_of_taps,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

 // scp instruction 
  define (instr=scp_shft_wr) {

    width = 128;
    alias = scp_(in_dattyp(in_dattyp),re_im_coeff(re_im_coeff),no_of_taps(no_of_taps),
	ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	shft_ofst(shft_ofst),
	shft_wr(shft_wr),shft_src(1),shft_val(0));

    syntax = ("scp.shift_wr %p %p %p %p %f %f %f,%f,%f,%f,%f",
              in_dattyp,re_im_coeff,shft_ofst,shft_wr,no_of_taps,
              vec_sz,src_add,dest_add,mult_coef_add,
	      src_add_inc,dest_add_inc);
  }

  // scp instruction
  define (instr=scp_shft_wr_ind) {

    width = 128;
    alias = scp_(in_dattyp(in_dattyp),re_im_coeff(re_im_coeff),no_of_taps(no_of_taps),
	ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	shft_ofst(shft_ofst),
	shft_wr(shft_wr),shft_src(1),shft_val(0));

    syntax = ("scp.shift_wr.ind %p %p %p %p %f %f %f,%f,%f,%f",
              in_dattyp,re_im_coeff,shft_ofst,shft_wr,no_of_taps,
              vec_sz,src_add,mult_coef_add,
	      src_add_inc,dest_add_inc);

  }

	// COPY
/*
copy            in_dattyp cp_type rst_n_keep                  vec_sz src_add, dest_add, blk_src_inc, blk_dest_inc, src_add_inc, dest_add_inc,           mask
copy.ind        in_dattyp cp_type rst_n_keep                  vec_sz src_add,           blk_src_inc, blk_dest_inc, src_add_inc, dest_add_inc,           mask
copy.thld       in_dattyp cp_type rst_n_keep pre_proc rst_acc vec_sz src_add, dest_add, blk_src_inc, blk_dest_inc, src_add_inc, dest_add_inc, thld_add, mask
copy.thld.ind   in_dattyp cp_type rst_n_keep pre_proc rst_acc vec_sz src_add,           blk_src_inc, blk_dest_inc, src_add_inc, dest_add_inc, thld_add, mask
*/
  define (instr=copy_) {

    width = 128;    
    fields = (opcode(0x25),in_dattyp2,pre_proc,rst_acc,cp_type,
	rst_n_keep,ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	blk_src_inc,blk_dest_inc,
	src_add_inc,dest_add_inc,
	mask,thld_add);

    dsyntax = ("copy %p %p %p %p vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f blk_src_inc=%f blk_dest_inc=%f src_inc=%f dest_inc=%f %f thld=%f %f %f",
		ima,in_dattyp2,cp_type,rst_n_keep,vec_sz,
    		src_add_mode,src_add_bank,src_add_col,src_add_slice,
    		dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
		blk_src_inc,blk_dest_inc,
		src_add_inc,dest_add_inc,
		mask,pre_proc,rst_acc,
		thld_add);

    action = { };
  }

  define (instr=copy) {

    width = 128;    
    alias = copy_(in_dattyp2(in_dattyp2),cp_type(cp_type),
		pre_proc(0),rst_acc(0),
		rst_n_keep(rst_n_keep),ima(0),vec_sz(vec_sz),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(get_mode(dest_add)),
    		dest_add_bank(get_bank(dest_add)),
     		dest_add_col(get_col(1,dest_add)),
     		dest_add_slice(get_slice(dest_add)),
              	blk_src_inc(blk_src_inc),blk_dest_inc(blk_dest_inc),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
		mask(mask),thld_add(0));

    syntax = ("copy %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              in_dattyp2,cp_type,rst_n_keep,
              vec_sz,src_add,dest_add,blk_src_inc,blk_dest_inc,src_add_inc,dest_add_inc,mask
              );
  }

  define (instr=copy_ind) {

    width = 128;    
    alias = copy_(in_dattyp2(in_dattyp2),cp_type(cp_type),rst_n_keep(rst_n_keep),ima(1),vec_sz(vec_sz),
		pre_proc(0),rst_acc(0),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(0),
    		dest_add_bank(0),
     		dest_add_col(0),
     		dest_add_slice(0),
              	blk_src_inc(blk_src_inc),blk_dest_inc(blk_dest_inc),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
		mask(mask),thld_add(0));
    syntax = ("copy.ind %p %p %p %f %f,%f,%f,%f,%f,%f",
              in_dattyp2,cp_type,rst_n_keep,
              vec_sz,src_add,blk_src_inc,blk_dest_inc,src_add_inc,dest_add_inc,mask
              );
  }

  define (instr=copy_thld) {

    width = 128;    
    alias = copy_(in_dattyp2(in_dattyp2),cp_type(cp_type),rst_n_keep(rst_n_keep),ima(0),vec_sz(vec_sz),
		pre_proc(pre_proc),rst_acc(rst_acc),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(get_mode(dest_add)),
    		dest_add_bank(get_bank(dest_add)),
     		dest_add_col(get_col(1,dest_add)),
     		dest_add_slice(get_slice(dest_add)),
              	blk_src_inc(blk_src_inc),blk_dest_inc(blk_dest_inc),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
		thld_add(thld_add),mask(mask));

    syntax = ("copy.thld %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f,%f",
              in_dattyp2,cp_type,pre_proc,rst_acc,rst_n_keep,
              vec_sz,src_add,dest_add,blk_src_inc,blk_dest_inc,src_add_inc,dest_add_inc,thld_add,mask
              );
  }

  define (instr=copy_thld_ind) {

    width = 128;    
    alias = copy_(in_dattyp2(in_dattyp2),cp_type(cp_type),rst_n_keep(rst_n_keep),ima(1),vec_sz(vec_sz),
		pre_proc(pre_proc),rst_acc(rst_acc),
     		src_add_mode(get_mode(src_add)),
    		src_add_bank(get_bank(src_add)),
     		src_add_col(get_col(1,src_add)),
     		src_add_slice(get_slice(src_add)),
    		dest_add_mode(0),
    		dest_add_bank(0),
     		dest_add_col(0),
     		dest_add_slice(0),
              	blk_src_inc(blk_src_inc),blk_dest_inc(blk_dest_inc),
		src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
		thld_add(thld_add),mask(mask));

    syntax = ("copy.thld.ind %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
              in_dattyp2,cp_type,pre_proc,rst_acc,rst_n_keep,
              vec_sz,src_add,blk_src_inc,blk_dest_inc,src_add_inc,dest_add_inc,thld_add,mask
              );
  }

	// PDMA
/*
pdma        se tag data_packing trans_type sync_async vector_len sysram_mem_start_addr, opram_mem_start_addr, opram_skip_addr, opram_continuous_addr, sysram_skip_addr, sysram_continous_addr
pdma.ind    se tag data_packing trans_type sync_async vector_len sysram_mem_start_addr, sysram_offset_wr_num, opram_skip_addr, opram_continuous_addr, sysram_skip_addr, sysram_continous_addr
*/
  define (instr=pdma_) {

    width = 128;
    fields = (opcode(0x28),se,pdma_tag,ima2,data_packing,trans_type,sync_async,
              vector_len,sysram_mem_start_addr,
	      opram_mem_start_mode,opram_mem_start_bank,
	      opram_mem_start_col,opram_mem_start_slice,
	      opram_skip_addr,opram_continuous_addr,
              sysram_skip_addr,sysram_continous_addr);

    dsyntax = ("pdma %p %p %p %p %p %p vec_size=%f sys=%f opram=%f,%f,%f,%f opram_skip=%f opram_cont=%f sys_skip=%f sys_cont=%f",
		ima2, se, pdma_tag, data_packing, trans_type, sync_async, vector_len,
    		sysram_mem_start_addr,
	        opram_mem_start_mode,opram_mem_start_bank,
	        opram_mem_start_col,opram_mem_start_slice,
	        opram_skip_addr,opram_continuous_addr,
                sysram_skip_addr,sysram_continous_addr);

    action = { };
  }

  define (instr=pdma) {

    width = 128;
    alias = pdma_(se(se),pdma_tag(pdma_tag), ima2(0),data_packing(data_packing),
	      trans_type(trans_type),sync_async(sync_async),vector_len(vector_len),
	      sysram_mem_start_addr((sysram_mem_start_addr)),
	      opram_mem_start_mode(get_mode(opram_mem_start_addr)),
	      opram_mem_start_bank(get_bank(opram_mem_start_addr)),
	      opram_mem_start_col(get_col(1,opram_mem_start_addr)),
	      opram_mem_start_slice(get_slice(opram_mem_start_addr)),
	      opram_skip_addr(opram_skip_addr),opram_continuous_addr(opram_continuous_addr),
              sysram_skip_addr(sysram_skip_addr),sysram_continous_addr(sysram_continous_addr));
    syntax = ("pdma %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
              se,pdma_tag,data_packing,trans_type,sync_async,
              vector_len,sysram_mem_start_addr,opram_mem_start_addr,
              opram_skip_addr,opram_continuous_addr,
              sysram_skip_addr,sysram_continous_addr
              );
  }

  define (instr=pdma_ind) {

    width = 128;
    alias = pdma_(se(se),pdma_tag(pdma_tag),ima2(1),data_packing(data_packing),
	      trans_type(trans_type),sync_async(sync_async),vector_len(vector_len),
	      sysram_mem_start_addr((sysram_mem_start_addr)),
	      opram_mem_start_mode(0),
	      opram_mem_start_bank(0),
	      opram_mem_start_col(get_col(1,opram_mem_start_addr_ind)),
	      opram_mem_start_slice(0),
	      opram_skip_addr(opram_skip_addr),opram_continuous_addr(opram_continuous_addr),
              sysram_skip_addr(sysram_skip_addr),sysram_continous_addr(sysram_continous_addr));
    syntax = ("pdma.ind %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
              se,pdma_tag,data_packing,trans_type,sync_async,
              vector_len,sysram_mem_start_addr,opram_mem_start_addr_ind,
              opram_skip_addr,opram_continuous_addr,
              sysram_skip_addr,sysram_continous_addr
              );
  }

 // VMT instruction 
/*
vmt			in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc
vmt.shift_sq2s2		in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_shift_value
vmt.wr_off_sq2s2	in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_offset_value
vmt.imm_off_sq2s2	in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_re_imdt_value, sq2s2_im_imdt_value
vmt.vec_sq2s2		in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_vec_src
vmt.ind			in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc
vmt.shift_sq2s2.ind	in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_shift_value
vmt.wr_off_sq2s2.ind	in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_offset_value
vmt.imm_off_sq2s2.ind	in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_re_imdt_value, sq2s2_im_imdt_value
vmt.vec_sq2s2.ind	in_dattyp rst_acc ip_pack op_pack opsq1 opsq2s1 opsq2s3 vec_sz src_add, dest_add, mult_s_exp_n_val_addr, src_add_inc, dest_add_inc, sq2s2_vec_src
*/
  define (instr=vmt_) {
    width = 128;
    fields = (opcode(0x26),rst_acc_vmt,in_dattyp_vmt,opsq1,opsq2s1,opsq2s2,opsq2s3, 
	op_pack,ip_pack,ima,vec_sz,
	src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	imdt_offset_val_im,
	extra_offset_val_im
	);

    dsyntax = ("vmt %f %f %f %f %f %f %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f mult_s_exp_n_val_addr=%f,%f,%f,%f src_inc=%f dest_inc=%f %f %f",
	in_dattyp_vmt,rst_acc_vmt,ip_pack,op_pack,opsq1,opsq2s1,opsq2s2,opsq2s3,
	vec_sz,src_add_mode,src_add_bank,src_add_col,src_add_slice,
	dest_add_mode,dest_add_bank,dest_add_col,dest_add_slice,
	mult_coef_mode,mult_coef_bank,mult_coef_col,mult_coef_slice,
	src_add_inc,dest_add_inc,
	imdt_offset_val_im,extra_offset_val_im);

    action = { };
  }

  // vmt instruction 
  define (instr=vmt) {

    width = 128;
    alias = vmt_(rst_acc_vmt(rst_acc_vmt),in_dattyp_vmt(in_dattyp_vmt),opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(0),opsq2s3(opsq2s3),
	op_pack(op_pack),ip_pack(ip_pack),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),
	extra_offset_val_im(0)
	);

    syntax = ("vmt %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add, dest_add,
	mult_coef_add,
	src_add_inc, dest_add_inc);
  }

  // vmt instruction
  define (instr=vmt_ind) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(0),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(0));

    syntax = ("vmt.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add,
	mult_coef_add,
	src_add_inc, dest_add_inc);
  }

  // vmt instruction 
  define (instr=vmt_shift_sq2s2) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(1),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(extra_val));

    syntax = ("vmt.shift_sq2s2 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add, dest_add,
	mult_coef_add,
	src_add_inc, dest_add_inc, extra_val);
  }

  // vmt instruction
  define (instr=vmt_shift_sq2s2_ind) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(1),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(extra_val));

    syntax = ("vmt.shift_sq2s2.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add,
	mult_coef_add,
	src_add_inc, dest_add_inc,extra_val);
  }

  // vmt instruction 
  define (instr=vmt_wr_off_sq2s2) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(2),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(extra_val));

    syntax = ("vmt.wr_off_sq2s2 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add, dest_add,
	mult_coef_add,
	src_add_inc, dest_add_inc, extra_val);
  }

  // vmt instruction
  define (instr=vmt_wr_off_sq2s2_ind) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(2),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(extra_val));

    syntax = ("vmt.wr_off_sq2s2.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add,
	mult_coef_add,
	src_add_inc, dest_add_inc,extra_val);
  }

  // vmt instruction 
  define (instr=vmt_imm_off_sq2s2) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(3),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(extra_val),extra_offset_val_im(extra_val2));

    syntax = ("vmt.imm_off_sq2s2 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add, dest_add,
	mult_coef_add,
	src_add_inc, dest_add_inc, extra_val,extra_val2);
  }

  // vmt instruction
  define (instr=vmt_imm_off_sq2s2_ind) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(3),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(extra_val),extra_offset_val_im(extra_val2));

    syntax = ("vmt.imm_off_sq2s2.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add,
	mult_coef_add,
	src_add_inc, dest_add_inc,extra_val,extra_val2);
  }

 // vmt instruction 
  define (instr=vmt_vec_sq2s2) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(4),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(0),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),dest_add_bank(get_bank(dest_add)),dest_add_col(get_col(1,dest_add)),dest_add_slice(get_slice(dest_add)),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(extra_val));

    syntax = ("vmt.vec_sq2s2 %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add, dest_add,
	mult_coef_add,
	src_add_inc, dest_add_inc, extra_val);
  }

  // vmt instruction
  define (instr=vmt_vec_sq2s2_ind) {

    width = 128;
    alias = vmt_(in_dattyp_vmt(in_dattyp_vmt),rst_acc_vmt(rst_acc_vmt),
	opsq1(opsq1),opsq2s1(opsq2s1),opsq2s2(4),opsq2s3(opsq2s3),op_pack(op_pack),
	ip_pack(ip_pack),ima(1),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),src_add_bank(get_bank(src_add)),src_add_col(get_col(1,src_add)),src_add_slice(get_slice(src_add)),
	dest_add_mode(0),dest_add_bank(0),dest_add_col(0),dest_add_slice(0),
	mult_coef_mode(get_mode(mult_coef_add)),mult_coef_bank(get_bank(mult_coef_add)),mult_coef_col(get_col(1,mult_coef_add)),mult_coef_slice(get_slice(mult_coef_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	imdt_offset_val_im(0),extra_offset_val_im(extra_val));

    syntax = ("vmt.vec_sq2s2.ind %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp_vmt, rst_acc_vmt, ip_pack, op_pack,
	opsq1, opsq2s1, opsq2s3,
	vec_sz, src_add,
	mult_coef_add,
	src_add_inc, dest_add_inc,extra_val);
  }

  // HIST instruction 
/*
** hist		in_dattyp2 pre_proc hist_mode bin_sz pack_en vec_sz src_add, dest_add, src_add_inc, dest_add_inc, threshold, dat_sz
** hist.ind	in_dattyp2 pre_proc hist_mode bin_sz pack_en vec_sz src_add, 	      src_add_inc, dest_add_inc, threshold, dat_sz
*/
  define (instr=hist_) {
    width = 128;
   fields = (opcode(0x24),in_dattyp2,pre_proc,hist_mode,
	bin_sz,ima,pack_en,vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc,dest_add_inc,
	threshold, dat_sz);

    dsyntax = ("hist %p %p %p %p %p %f %f vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f src_inc=%f dest_inc=%f %f",
	ima, in_dattyp2, pre_proc, hist_mode, bin_sz, pack_en, dat_sz, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc, dest_add_inc,
	threshold);
    action = { };
  }

  // HIST instruction 
  define (instr=hist) {
    width = 128;
     alias = hist_(in_dattyp2(in_dattyp2),pre_proc(pre_proc),hist_mode(hist_mode),
	bin_sz(bin_sz),ima(0),pack_en(pack_en),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),
	dest_add_bank(get_bank(dest_add)),
	dest_add_col(get_col(1,dest_add)),
	dest_add_slice(get_slice(dest_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	threshold(threshold), dat_sz(dat_sz));

    syntax = ("hist %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp2, pre_proc, hist_mode, bin_sz, pack_en,
	dat_sz, vec_sz,
	src_add,
	dest_add,
	src_add_inc, dest_add_inc,
	threshold);
  }

  // HIST instruction 
  define (instr=hist_ind) {
    width = 128;
     alias = hist_(in_dattyp2(in_dattyp2),pre_proc(pre_proc),hist_mode(hist_mode),
	bin_sz(bin_sz),ima(1),pack_en(pack_en),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(0),
	dest_add_bank(0),
	dest_add_col(0),
	dest_add_slice(0),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	threshold(threshold), dat_sz(dat_sz));

    syntax = ("hist.ind %p %p %p %p %p %p %f %f,%f,%f,%f",
	in_dattyp2, pre_proc, hist_mode, bin_sz, pack_en,
	dat_sz, vec_sz,
	src_add,
	src_add_inc, dest_add_inc,
	threshold);
  }

  // MAXS instruction 
/*
** maxs		in_dattyp pre_proc thld_cmp in_tag tag_n_bitfld cyc_extn in_pack maxsn_sel vec_sz src_add, dest_add, src_add_inc, dest_add_inc, thld_add
** maxs.ind	in_dattyp pre_proc thld_cmp in_tag tag_n_bitfld cyc_extn in_pack maxsn_sel vec_sz src_add,           src_add_inc, dest_add_inc, thld_add
** maxs.gbl	in_dattyp pre_proc                                       in_pack maxsn_sel vec_sz src_add, dest_add, src_add_inc, dest_add_inc, thld_add
** maxs.gbl.ind	in_dattyp pre_proc                                       in_pack maxsn_sel vec_sz src_add,           src_add_inc, dest_add_inc, thld_add
*/
  define (instr=maxs_) {
    width = 128;
   fields = (opcode(0x27),in_dattyp2,pre_proc,thld_cmp,in_tag, loc_n_abs,
	tag_n_bitfld, cyc_extn, maxsn_en, in_pack, ima, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc,dest_add_inc,maxsn_sel,
	thld_add);

    dsyntax = ("maxs %p %p %p %p %p %p %p %p %p %p %p vec_size=%f src=%f,%f,%f,%f dest=%f,%f,%f,%f src_inc=%f dest_inc=%f %f",
	loc_n_abs, maxsn_en, ima, in_dattyp2, pre_proc, thld_cmp, in_tag, 
	tag_n_bitfld, cyc_extn, in_pack, maxsn_sel, vec_sz,
	src_add_mode, src_add_bank, src_add_col, src_add_slice,
	dest_add_mode, dest_add_bank, dest_add_col, dest_add_slice,
	src_add_inc, dest_add_inc,
	thld_add);
    action = { };
  }

  // MAXS instruction 
  define (instr=maxs) {
    width = 128;
     alias = maxs_(in_dattyp2(in_dattyp2),pre_proc(pre_proc),ima(0),
	thld_cmp(thld_cmp),in_tag(in_tag),loc_n_abs(1),
	tag_n_bitfld(tag_n_bitfld),cyc_extn(cyc_extn),
	maxsn_en(is_maxsN(maxsn_sel)),in_pack(in_pack),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),
	dest_add_bank(get_bank(dest_add)),
	dest_add_col(get_col(1,dest_add)),
	dest_add_slice(get_slice(dest_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	maxsn_sel(get_maxsN(maxsn_sel)),
	thld_add(thld_add));

    syntax = ("maxs %p %p %p %p %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp2, pre_proc, thld_cmp, in_tag,
	tag_n_bitfld,cyc_extn,in_pack,maxsn_sel,vec_sz,
	src_add,
	dest_add,
	src_add_inc, dest_add_inc,
	thld_add);
  }
 
  // MAXS instruction 
  define (instr=maxs_ind) {
    width = 128;
     alias = maxs_(in_dattyp2(in_dattyp2),pre_proc(pre_proc),ima(1),
	thld_cmp(thld_cmp),in_tag(in_tag),loc_n_abs(1),
	tag_n_bitfld(tag_n_bitfld),cyc_extn(cyc_extn),
	maxsn_en(is_maxsN(maxsn_sel)),in_pack(in_pack),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(0),
	dest_add_bank(0),
	dest_add_col(0),
	dest_add_slice(0),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	maxsn_sel(get_maxsN(maxsn_sel)),
	thld_add(thld_add));

    syntax = ("maxs.ind %p %p %p %p %p %p %p %p %f %f,%f,%f,%f",
	in_dattyp2, pre_proc, thld_cmp, in_tag,
	tag_n_bitfld,cyc_extn,in_pack,maxsn_sel,vec_sz,
	src_add,
	src_add_inc, dest_add_inc,
	thld_add);
  }
 
  // MAXS instruction 
  define (instr=maxs_gbl) {
    width = 128;
     alias = maxs_(in_dattyp2(in_dattyp2),pre_proc(pre_proc),ima(0),
	thld_cmp(0),in_tag(0),loc_n_abs(0),
	tag_n_bitfld(0),cyc_extn(0),
	maxsn_en(is_maxsN(maxsn_sel)),in_pack(in_pack),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(get_mode(dest_add)),
	dest_add_bank(get_bank(dest_add)),
	dest_add_col(get_col(1,dest_add)),
	dest_add_slice(get_slice(dest_add)),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	maxsn_sel(get_maxsN(maxsn_sel)),
	thld_add(thld_add));

    syntax = ("maxs.gbl %p %p %p %p %f %f,%f,%f,%f,%f",
	in_dattyp2, pre_proc, in_pack,maxsn_sel,vec_sz,
	src_add,
	dest_add,
	src_add_inc, dest_add_inc,
	thld_add);
  }
 
  // MAXS instruction 
  define (instr=maxs_gbl_ind) {
    width = 128;
     alias = maxs_(in_dattyp2(in_dattyp2),pre_proc(pre_proc),ima(1),
	thld_cmp(0),in_tag(0),loc_n_abs(0),
	tag_n_bitfld(0),cyc_extn(0),
	maxsn_en(is_maxsN(maxsn_sel)),in_pack(in_pack),vec_sz(vec_sz),
	src_add_mode(get_mode(src_add)),
	src_add_bank(get_bank(src_add)),
	src_add_col(get_col(1,src_add)),
	src_add_slice(get_slice(src_add)),
	dest_add_mode(0),
	dest_add_bank(0),
	dest_add_col(0),
	dest_add_slice(0),
	src_add_inc(src_add_inc),dest_add_inc(dest_add_inc),
	maxsn_sel(get_maxsN(maxsn_sel)),
	thld_add(thld_add));

    syntax = ("maxs.gbl.ind %p %p %p %p %f %f,%f,%f,%f",
	in_dattyp2, pre_proc,in_pack,maxsn_sel,vec_sz,
	src_add,
	src_add_inc, dest_add_inc,
	thld_add);
  }
}

define (core=SPT) {
  archs = SPT;
}
