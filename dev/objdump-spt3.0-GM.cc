/*

  Disassembler code generated by ADL.

*/

#include <inttypes.h>
#include <stdio.h>
#include <iostream>
#include "sysdep.h"
#include "dis-asm.h"
extern "C" {
  #include "elf-bfd.h"
  #include "bfd.h"
  #include "libbfd.h"
  #include "bfdlink.h"
}
#include "helpers/LogUsage.h"
#include "helpers/Macros.h"

#define __NO_RNUMBER__
#include "helpers/le_sintbv.h"
#define bits le_intbv
#define sbits le_sintbv

#define ns_bits le_intbv
#define ns_sbits le_sintbv

#include "helpers/TypeConv.h"

using namespace adl;

struct Disassemble {
  //
  // Disassembler helpers
  //
  
  //
  // Instruction field getter functions.
  //
  
  static inline bits<1> get_adptv_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x40000)>>18);
    
  }
  
  static inline bits<3> get_adptv_ofst_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xe000000)>>25);
    
  }
  
  static inline bits<1> get_adptv_shft_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x20000)>>17);
    
  }
  
  static inline bits<6> get_adptv_wrnum_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfc00)>>10);
    
  }
  
  static inline bits<2> get_bin_sz_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc0000)>>18);
    
  }
  
  static inline bits<7> get_blk_dest_inc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0x7f0000)>>16);
    
  }
  
  static inline bits<8> get_blk_src_inc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xff000000)>>24);
    
  }
  
  static inline bits<16> get_cc_im_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff0000)>>16);
    
  }
  
  static inline bits<16> get_cc_re_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffff0000)>>16);
    
  }
  
  static inline bits<4> get_cp_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xf0000)>>16);
    
  }
  
  static inline bits<1> get_cyc_extn_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x20000)>>17);
    
  }
  
  static inline bits<1> get_dat_sz_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x1));
    
  }
  
  static inline bits<6> get_data_packing_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xfc0000)>>18);
    
  }
  
  static inline bits<16> get_dest_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x2&0xffff));
    
  }
  
  static inline bits<8> get_dest_add_inc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xff));
    
  }
  
  static inline bits<63> get_dsp_value_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return (((uint64_t)((x1&0x7fffffff) >> 0) << 32)) | (((uint64_t)((x0&0xffffffff) >> 0) << 0));
    
  }
  
  static inline bits<1> get_ev_lvl_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<2> get_ev_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1800000)>>23);
    
  }
  
  static inline bits<3> get_evt_ev_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x70000)>>16);
    
  }
  
  static inline bits<16> get_extra_offset_val_im_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffff));
    
  }
  
  static inline bits<3> get_fft_rnd_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x700000)>>20);
    
  }
  
  static inline bits<3> get_fft_rnd_rdx2_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x700000)>>20);
    
  }
  
  static inline bits<2> get_hist_mode_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x300000)>>20);
    
  }
  
  static inline bits<1> get_ima_fld_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000)>>13);
    
  }
  
  static inline bits<16> get_imdt_offset_val_im_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffff0000)>>16);
    
  }
  
  static inline bits<48> get_imm_dat_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return (((uint64_t)((x1&0xffff) >> 0) << 32)) | (((uint64_t)((x0&0xffffffff) >> 0) << 0));
    
  }
  
  static inline bits<1> get_immed_or_reg_src_fld_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<1> get_immed_or_reg_src_loop_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<1> get_in_dattyp_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<2> get_in_dattyp2_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x3000000)>>24);
    
  }
  
  static inline bits<1> get_in_dattyp_vmt_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1000000)>>24);
    
  }
  
  static inline bits<2> get_in_pack_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc000)>>14);
    
  }
  
  static inline bits<1> get_in_tag_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x100000)>>20);
    
  }
  
  static inline bits<1> get_init_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x100000)>>20);
    
  }
  
  static inline bits<2> get_ip_pack_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc000)>>14);
    
  }
  
  static inline bits<32> get_jmp_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffffffff));
    
  }
  
  static inline bits<4> get_jmp_sel_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1e00000)>>21);
    
  }
  
  static inline bits<1> get_jmp_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<6> get_jmp_wr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x2&0x3f0000)>>16);
    
  }
  
  static inline bits<1> get_loc_n_abs_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x80000)>>19);
    
  }
  
  static inline bits<16> get_loop_cnt_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xffff));
    
  }
  
  static inline bits<6> get_loop_wrnum_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x2&0x3f0000)>>16);
    
  }
  
  static inline bits<16> get_mask_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffff0000)>>16);
    
  }
  
  static inline bits<1> get_maxsn_en_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x10000)>>16);
    
  }
  
  static inline bits<2> get_maxsn_sel_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x30000)>>16);
    
  }
  
  static inline bits<9> get_mca_inc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x1ff0000)>>16);
    
  }
  
  static inline bits<4> get_mca_mod_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xf0000000)>>28);
    
  }
  
  static inline bits<5> get_modulo_val_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1f));
    
  }
  
  static inline bits<16> get_mult_coef_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff0000)>>16);
    
  }
  
  static inline bits<2> get_mult_mod_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x300)>>8);
    
  }
  
  static inline bits<16> get_mult_s_exp_n_val_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff0000)>>16);
    
  }
  
  static inline bits<4> get_no_of_taps_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xf0000)>>16);
    
  }
  
  static inline bits<1> get_op_pack_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x10000)>>16);
    
  }
  
  static inline bits<12> get_opram_continuous_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xf)<<8) | ((x0&0xff000000)>>24);
    
  }
  
  static inline bits<16> get_opram_mem_start_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff0000)>>16);
    
  }
  
  static inline bits<12> get_opram_skip_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xfff0)>>4);
    
  }
  
  static inline bits<1> get_opsq1_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x800000)>>23);
    
  }
  
  static inline bits<2> get_opsq2s1_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x600000)>>21);
    
  }
  
  static inline bits<3> get_opsq2s2_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1c0000)>>18);
    
  }
  
  static inline bits<1> get_opsq2s3_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x20000)>>17);
    
  }
  
  static inline bits<2> get_pack_en_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc000)>>14);
    
  }
  
  static inline bits<2> get_pre_proc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc00000)>>22);
    
  }
  
  static inline bits<1> get_quad_ext_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x10000)>>16);
    
  }
  
  static inline bits<1> get_re_im_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<2> get_re_im_coeff_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1800000)>>23);
    
  }
  
  static inline bits<1> get_real_fft_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x80000)>>19);
    
  }
  
  static inline bits<2> get_repeat_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc000)>>14);
    
  }
  
  static inline bits<2> get_repeat2_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xc000)>>14);
    
  }
  
  static inline bits<12> get_rpt_addr_incr0_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xfff0000)>>16);
    
  }
  
  static inline bits<12> get_rpt_addr_incr1_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xfff));
    
  }
  
  static inline bits<12> get_rpt_addr_incr2_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfff0000)>>16);
    
  }
  
  static inline bits<12> get_rpt_addr_incr3_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfff));
    
  }
  
  static inline bits<13> get_rpt_cnt_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1fff));
    
  }
  
  static inline bits<1> get_rst_acc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x200000)>>21);
    
  }
  
  static inline bits<1> get_rst_acc_vmt_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x2000000)>>25);
    
  }
  
  static inline bits<1> get_rst_n_keep_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x8000)>>15);
    
  }
  
  static inline bits<1> get_se_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1000000)>>24);
    
  }
  
  static inline bits<16> get_sel_src1_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffff0000)>>16);
    
  }
  
  static inline bits<16> get_sel_src3_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff));
    
  }
  
  static inline bits<6> get_sel_wr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x2&0x3f0000)>>16);
    
  }
  
  static inline bits<2> get_set_size_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x30000)>>16);
    
  }
  
  static inline bits<3> get_shft_ofst_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xe000000)>>25);
    
  }
  
  static inline bits<1> get_shft_src_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x80)>>7);
    
  }
  
  static inline bits<3> get_shft_val_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x70)>>4);
    
  }
  
  static inline bits<6> get_shft_wr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfc00)>>10);
    
  }
  
  static inline bits<1> get_shift_fld_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1000000)>>24);
    
  }
  
  static inline bits<4> get_sort_rank_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x3c0000)>>18);
    
  }
  
  static inline bits<1> get_sort_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x10000)>>16);
    
  }
  
  static inline bits<16> get_src2_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff0000)>>16);
    
  }
  
  static inline bits<16> get_src_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x2&0xffff0000)>>16);
    
  }
  
  static inline bits<8> get_src_add_inc_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xff00)>>8);
    
  }
  
  static inline bits<1> get_sync_async_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x10000)>>16);
    
  }
  
  static inline bits<5> get_sync_csid_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0x1f));
    
  }
  
  static inline bits<2> get_sync_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x3000000)>>24);
    
  }
  
  static inline bits<12> get_sysram_continous_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfff));
    
  }
  
  static inline bits<32> get_sysram_mem_start_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x2&0xffffffff));
    
  }
  
  static inline bits<12> get_sysram_skip_addr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfff000)>>12);
    
  }
  
  static inline bits<1> get_tag_n_bitfld_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x40000)>>18);
    
  }
  
  static inline bits<16> get_tap_coef_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x1&0xffff0000)>>16);
    
  }
  
  static inline bits<4> get_th_id_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xf));
    
  }
  
  static inline bits<16> get_thld_add_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffff));
    
  }
  
  static inline bits<1> get_thld_cmp_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x200000)>>21);
    
  }
  
  static inline bits<6> get_threshold_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xfc00)>>10);
    
  }
  
  static inline bits<1> get_trans_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x20000)>>17);
    
  }
  
  static inline bits<4> get_tw_ovs_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xf));
    
  }
  
  static inline bits<13> get_vec_sz_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1fff));
    
  }
  
  static inline bits<16> get_vector_len_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0xffff));
    
  }
  
  static inline bits<7> get_wait_ev_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x7f));
    
  }
  
  static inline bits<24> get_wdog_cnt_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x0&0xffffff));
    
  }
  
  static inline bits<3> get_wdog_ev_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x70000)>>16);
    
  }
  
  static inline bits<2> get_wdog_ev_tr_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x3000000)>>24);
    
  }
  
  static inline bits<2> get_wdog_op_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x300000)>>20);
    
  }
  
  static inline bits<2> get_win_type_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1800000)>>23);
    
  }
  
  static inline bits<2> get_win_type_rdx_width_128(unsigned x0 ATTRIBUTE_UNUSED, unsigned x1 ATTRIBUTE_UNUSED, unsigned x2 ATTRIBUTE_UNUSED, unsigned x3 ATTRIBUTE_UNUSED) {
    return ((x3&0x1800000)>>23);
    
  }
  
  
  //
  // Instruction field inserter functions.
  //
  
  static  void set_adptv_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 18);
  }
  
  static  void set_adptv_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x7) << 25);
  }
  
  static  void set_adptv_shft_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 17);
  }
  
  static  void set_adptv_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x3f) << 10);
  }
  
  static  void set_bin_sz_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 18);
  }
  
  static  void set_blk_dest_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0x7f) << 16);
  }
  
  static  void set_blk_src_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xff) << 24);
  }
  
  static  void set_cc_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff) << 16);
  }
  
  static  void set_cc_re_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffff) << 16);
  }
  
  static  void set_cp_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0xf) << 16);
  }
  
  static  void set_cyc_extn_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 17);
  }
  
  static  void set_dat_sz_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x1));
  }
  
  static  void set_data_packing_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3f) << 18);
  }
  
  static  void set_dest_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[2] |= ((val&0xffff));
  }
  
  static  void set_dest_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xff));
  }
  
  static  void set_dsp_value_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffffffff));
    val >>=   0x20;
    x[1] |= ((val&0x7fffffff));
  }
  
  static  void set_ev_lvl_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_ev_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 23);
  }
  
  static  void set_evt_ev_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x7) << 16);
  }
  
  static  void set_extra_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffff));
  }
  
  static  void set_fft_rnd_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x7) << 20);
  }
  
  static  void set_fft_rnd_rdx2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x7) << 20);
  }
  
  static  void set_hist_mode_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 20);
  }
  
  static  void set_ima_fld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 13);
  }
  
  static  void set_imdt_offset_val_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffff) << 16);
  }
  
  static  void set_imm_dat_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffffffff));
    val >>=   0x20;
    x[1] |= ((val&0xffff));
  }
  
  static  void set_immed_or_reg_src_fld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_immed_or_reg_src_loop_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_in_dattyp_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_in_dattyp2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 24);
  }
  
  static  void set_in_dattyp_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 24);
  }
  
  static  void set_in_pack_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 14);
  }
  
  static  void set_in_tag_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 20);
  }
  
  static  void set_init_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 20);
  }
  
  static  void set_ip_pack_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 14);
  }
  
  static  void set_jmp_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffffffff));
  }
  
  static  void set_jmp_sel_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0xf) << 21);
  }
  
  static  void set_jmp_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_jmp_wr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[2] |= ((val&0x3f) << 16);
  }
  
  static  void set_loc_n_abs_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 19);
  }
  
  static  void set_loop_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0xffff));
  }
  
  static  void set_loop_wrnum_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[2] |= ((val&0x3f) << 16);
  }
  
  static  void set_mask_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffff) << 16);
  }
  
  static  void set_maxsn_en_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 16);
  }
  
  static  void set_maxsn_sel_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x3) << 16);
  }
  
  static  void set_mca_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x1ff) << 16);
  }
  
  static  void set_mca_mod_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xf) << 28);
  }
  
  static  void set_modulo_val_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1f));
  }
  
  static  void set_mult_coef_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff) << 16);
  }
  
  static  void set_mult_mod_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x3) << 8);
  }
  
  static  void set_mult_s_exp_n_val_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff) << 16);
  }
  
  static  void set_no_of_taps_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0xf) << 16);
  }
  
  static  void set_op_pack_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 16);
  }
  
  static  void set_opram_continuous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xff) << 24);
    val >>=   0x8;
    x[1] |= ((val&0xf));
  }
  
  static  void set_opram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff) << 16);
  }
  
  static  void set_opram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xfff) << 4);
  }
  
  static  void set_opsq1_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 23);
  }
  
  static  void set_opsq2s1_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 21);
  }
  
  static  void set_opsq2s2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x7) << 18);
  }
  
  static  void set_opsq2s3_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 17);
  }
  
  static  void set_pack_en_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 14);
  }
  
  static  void set_pre_proc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 22);
  }
  
  static  void set_quad_ext_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 16);
  }
  
  static  void set_re_im_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_re_im_coeff_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 23);
  }
  
  static  void set_real_fft_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 19);
  }
  
  static  void set_repeat_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 14);
  }
  
  static  void set_repeat2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 14);
  }
  
  static  void set_rpt_addr_incr0_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xfff) << 16);
  }
  
  static  void set_rpt_addr_incr1_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xfff));
  }
  
  static  void set_rpt_addr_incr2_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xfff) << 16);
  }
  
  static  void set_rpt_addr_incr3_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xfff));
  }
  
  static  void set_rpt_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1fff));
  }
  
  static  void set_rst_acc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 21);
  }
  
  static  void set_rst_acc_vmt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 25);
  }
  
  static  void set_rst_n_keep_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 15);
  }
  
  static  void set_se_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 24);
  }
  
  static  void set_sel_src1_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffff) << 16);
  }
  
  static  void set_sel_src3_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff));
  }
  
  static  void set_sel_wr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[2] |= ((val&0x3f) << 16);
  }
  
  static  void set_set_size_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x3) << 16);
  }
  
  static  void set_shft_ofst_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x7) << 25);
  }
  
  static  void set_shft_src_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x1) << 7);
  }
  
  static  void set_shft_val_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x7) << 4);
  }
  
  static  void set_shft_wr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x3f) << 10);
  }
  
  static  void set_shift_fld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 24);
  }
  
  static  void set_sort_rank_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xf) << 18);
  }
  
  static  void set_sort_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 16);
  }
  
  static  void set_src2_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff) << 16);
  }
  
  static  void set_src_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[2] |= ((val&0xffff) << 16);
  }
  
  static  void set_src_add_inc_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xff) << 8);
  }
  
  static  void set_sync_async_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 16);
  }
  
  static  void set_sync_csid_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x1f));
  }
  
  static  void set_sync_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 24);
  }
  
  static  void set_sysram_continous_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xfff));
  }
  
  static  void set_sysram_mem_start_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[2] |= ((val&0xffffffff));
  }
  
  static  void set_sysram_skip_addr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xfff) << 12);
  }
  
  static  void set_tag_n_bitfld_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 18);
  }
  
  static  void set_tap_coef_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[1] |= ((val&0xffff) << 16);
  }
  
  static  void set_th_id_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xf));
  }
  
  static  void set_thld_add_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffff));
  }
  
  static  void set_thld_cmp_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 21);
  }
  
  static  void set_threshold_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0x3f) << 10);
  }
  
  static  void set_trans_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1) << 17);
  }
  
  static  void set_tw_ovs_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xf));
  }
  
  static  void set_vec_sz_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x1fff));
  }
  
  static  void set_vector_len_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0xffff));
  }
  
  static  void set_wait_ev_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x7f));
  }
  
  static  void set_wdog_cnt_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[0] |= ((val&0xffffff));
  }
  
  static  void set_wdog_ev_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x7) << 16);
  }
  
  static  void set_wdog_ev_tr_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 24);
  }
  
  static  void set_wdog_op_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 20);
  }
  
  static  void set_win_type_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 23);
  }
  
  static  void set_win_type_rdx_width_128(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
    x[3] |= ((val&0x3) << 23);
  }
  
  
  //
  // Instruction field clearer functions.
  //
  
  static void clear_adptv_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x40000);
    
  }
  
  static void clear_adptv_ofst_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xe000000);
    
  }
  
  static void clear_adptv_shft_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x20000);
    
  }
  
  static void clear_adptv_wrnum_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfc00);
    
  }
  
  static void clear_bin_sz_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc0000);
    
  }
  
  static void clear_blk_dest_inc_width_128 (unsigned *x) {
      x[1] = x[1] & (~0x7f0000);
    
  }
  
  static void clear_blk_src_inc_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xff000000);
    
  }
  
  static void clear_cc_im_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff0000);
    
  }
  
  static void clear_cc_re_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffff0000);
    
  }
  
  static void clear_cp_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xf0000);
    
  }
  
  static void clear_cyc_extn_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x20000);
    
  }
  
  static void clear_dat_sz_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x1);
    
  }
  
  static void clear_data_packing_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xfc0000);
    
  }
  
  static void clear_dest_add_width_128 (unsigned *x) {
      x[2] = x[2] & (~0xffff);
    
  }
  
  static void clear_dest_add_inc_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xff);
    
  }
  
  static void clear_dsp_value_width_128 (unsigned *x) {
      x[1] = x[1] & (~0x7fffffff);
      x[0] = x[0] & (~0xffffffff);
    
  }
  
  static void clear_ev_lvl_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_ev_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1800000);
    
  }
  
  static void clear_evt_ev_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x70000);
    
  }
  
  static void clear_extra_offset_val_im_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffff);
    
  }
  
  static void clear_fft_rnd_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x700000);
    
  }
  
  static void clear_fft_rnd_rdx2_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x700000);
    
  }
  
  static void clear_hist_mode_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x300000);
    
  }
  
  static void clear_ima_fld_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000);
    
  }
  
  static void clear_imdt_offset_val_im_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffff0000);
    
  }
  
  static void clear_imm_dat_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff);
      x[0] = x[0] & (~0xffffffff);
    
  }
  
  static void clear_immed_or_reg_src_fld_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_immed_or_reg_src_loop_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_in_dattyp_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_in_dattyp2_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x3000000);
    
  }
  
  static void clear_in_dattyp_vmt_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1000000);
    
  }
  
  static void clear_in_pack_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc000);
    
  }
  
  static void clear_in_tag_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x100000);
    
  }
  
  static void clear_init_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x100000);
    
  }
  
  static void clear_ip_pack_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc000);
    
  }
  
  static void clear_jmp_addr_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffffffff);
    
  }
  
  static void clear_jmp_sel_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1e00000);
    
  }
  
  static void clear_jmp_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_jmp_wr_width_128 (unsigned *x) {
      x[2] = x[2] & (~0x3f0000);
    
  }
  
  static void clear_loc_n_abs_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x80000);
    
  }
  
  static void clear_loop_cnt_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xffff);
    
  }
  
  static void clear_loop_wrnum_width_128 (unsigned *x) {
      x[2] = x[2] & (~0x3f0000);
    
  }
  
  static void clear_mask_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffff0000);
    
  }
  
  static void clear_maxsn_en_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x10000);
    
  }
  
  static void clear_maxsn_sel_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x30000);
    
  }
  
  static void clear_mca_inc_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x1ff0000);
    
  }
  
  static void clear_mca_mod_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xf0000000);
    
  }
  
  static void clear_modulo_val_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1f);
    
  }
  
  static void clear_mult_coef_add_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff0000);
    
  }
  
  static void clear_mult_mod_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x300);
    
  }
  
  static void clear_mult_s_exp_n_val_addr_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff0000);
    
  }
  
  static void clear_no_of_taps_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xf0000);
    
  }
  
  static void clear_op_pack_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x10000);
    
  }
  
  static void clear_opram_continuous_addr_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xf);
      x[0] = x[0] & (~0xff000000);
    
  }
  
  static void clear_opram_mem_start_addr_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff0000);
    
  }
  
  static void clear_opram_skip_addr_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xfff0);
    
  }
  
  static void clear_opsq1_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x800000);
    
  }
  
  static void clear_opsq2s1_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x600000);
    
  }
  
  static void clear_opsq2s2_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1c0000);
    
  }
  
  static void clear_opsq2s3_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x20000);
    
  }
  
  static void clear_pack_en_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc000);
    
  }
  
  static void clear_pre_proc_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc00000);
    
  }
  
  static void clear_quad_ext_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x10000);
    
  }
  
  static void clear_re_im_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_re_im_coeff_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1800000);
    
  }
  
  static void clear_real_fft_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x80000);
    
  }
  
  static void clear_repeat_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc000);
    
  }
  
  static void clear_repeat2_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xc000);
    
  }
  
  static void clear_rpt_addr_incr0_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xfff0000);
    
  }
  
  static void clear_rpt_addr_incr1_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xfff);
    
  }
  
  static void clear_rpt_addr_incr2_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfff0000);
    
  }
  
  static void clear_rpt_addr_incr3_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfff);
    
  }
  
  static void clear_rpt_cnt_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1fff);
    
  }
  
  static void clear_rst_acc_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x200000);
    
  }
  
  static void clear_rst_acc_vmt_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x2000000);
    
  }
  
  static void clear_rst_n_keep_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x8000);
    
  }
  
  static void clear_se_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1000000);
    
  }
  
  static void clear_sel_src1_add_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffff0000);
    
  }
  
  static void clear_sel_src3_add_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff);
    
  }
  
  static void clear_sel_wr_width_128 (unsigned *x) {
      x[2] = x[2] & (~0x3f0000);
    
  }
  
  static void clear_set_size_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x30000);
    
  }
  
  static void clear_shft_ofst_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xe000000);
    
  }
  
  static void clear_shft_src_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x80);
    
  }
  
  static void clear_shft_val_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x70);
    
  }
  
  static void clear_shft_wr_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfc00);
    
  }
  
  static void clear_shift_fld_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1000000);
    
  }
  
  static void clear_sort_rank_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x3c0000);
    
  }
  
  static void clear_sort_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x10000);
    
  }
  
  static void clear_src2_add_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff0000);
    
  }
  
  static void clear_src_add_width_128 (unsigned *x) {
      x[2] = x[2] & (~0xffff0000);
    
  }
  
  static void clear_src_add_inc_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xff00);
    
  }
  
  static void clear_sync_async_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x10000);
    
  }
  
  static void clear_sync_csid_width_128 (unsigned *x) {
      x[0] = x[0] & (~0x1f);
    
  }
  
  static void clear_sync_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x3000000);
    
  }
  
  static void clear_sysram_continous_addr_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfff);
    
  }
  
  static void clear_sysram_mem_start_addr_width_128 (unsigned *x) {
      x[2] = x[2] & (~0xffffffff);
    
  }
  
  static void clear_sysram_skip_addr_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfff000);
    
  }
  
  static void clear_tag_n_bitfld_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x40000);
    
  }
  
  static void clear_tap_coef_add_width_128 (unsigned *x) {
      x[1] = x[1] & (~0xffff0000);
    
  }
  
  static void clear_th_id_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xf);
    
  }
  
  static void clear_thld_add_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffff);
    
  }
  
  static void clear_thld_cmp_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x200000);
    
  }
  
  static void clear_threshold_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xfc00);
    
  }
  
  static void clear_trans_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x20000);
    
  }
  
  static void clear_tw_ovs_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xf);
    
  }
  
  static void clear_vec_sz_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1fff);
    
  }
  
  static void clear_vector_len_width_128 (unsigned *x) {
      x[3] = x[3] & (~0xffff);
    
  }
  
  static void clear_wait_ev_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x7f);
    
  }
  
  static void clear_wdog_cnt_width_128 (unsigned *x) {
      x[0] = x[0] & (~0xffffff);
    
  }
  
  static void clear_wdog_ev_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x70000);
    
  }
  
  static void clear_wdog_ev_tr_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x3000000);
    
  }
  
  static void clear_wdog_op_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x300000);
    
  }
  
  static void clear_win_type_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1800000);
    
  }
  
  static void clear_win_type_rdx_width_128 (unsigned *x) {
      x[3] = x[3] & (~0x1800000);
    
  }
  
  
  int disassemble_insn(bfd_vma memaddr ATTRIBUTE_UNUSED, unsigned *insn,struct disassemble_info *info)
  {
    switch (insn[3] & 0xfc000000) {
      case 0x4000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>immed_or_reg_src_fld ATTRIBUTE_UNUSED = get_immed_or_reg_src_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<48>imm_dat ATTRIBUTE_UNUSED = get_imm_dat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction set_
        (*info->fprintf_func) (info->stream, "%-25s","set_");
        switch (immed_or_reg_src_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".immed");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%llx",(long long unsigned)imm_dat.uint64());
        return 16;
      }
      break;
      case 0x8000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction get_
        (*info->fprintf_func) (info->stream, "%-25s","get_");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        return 16;
      }
      break;
      case 0xc000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>immed_or_reg_src_fld ATTRIBUTE_UNUSED = get_immed_or_reg_src_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>shift_fld ATTRIBUTE_UNUSED = get_shift_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<5>modulo_val ATTRIBUTE_UNUSED = get_modulo_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src2_add ATTRIBUTE_UNUSED = get_src2_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<48>imm_dat ATTRIBUTE_UNUSED = get_imm_dat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction add_
        (*info->fprintf_func) (info->stream, "%-25s","add_");
        switch (immed_or_reg_src_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".immed");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (shift_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noshift");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shift");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (modulo_val.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".mod1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".mod2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".mod3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".mod4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".mod5");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".mod6");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".mod7");
          break;
          case 8:
          (*info->fprintf_func) (info->stream, ".mod8");
          break;
          case 9:
          (*info->fprintf_func) (info->stream, ".mod9");
          break;
          case 10:
          (*info->fprintf_func) (info->stream, ".mod10");
          break;
          case 11:
          (*info->fprintf_func) (info->stream, ".mod11");
          break;
          case 12:
          (*info->fprintf_func) (info->stream, ".mod12");
          break;
          case 13:
          (*info->fprintf_func) (info->stream, ".mod13");
          break;
          case 14:
          (*info->fprintf_func) (info->stream, ".mod14");
          break;
          case 15:
          (*info->fprintf_func) (info->stream, ".mod15");
          break;
          case 16:
          (*info->fprintf_func) (info->stream, ".mod16");
          break;
          case 17:
          (*info->fprintf_func) (info->stream, ".mod17");
          break;
          case 18:
          (*info->fprintf_func) (info->stream, ".mod18");
          break;
          case 19:
          (*info->fprintf_func) (info->stream, ".mod19");
          break;
          case 20:
          (*info->fprintf_func) (info->stream, ".mod20");
          break;
          case 21:
          (*info->fprintf_func) (info->stream, ".mod21");
          break;
          case 22:
          (*info->fprintf_func) (info->stream, ".mod22");
          break;
          case 23:
          (*info->fprintf_func) (info->stream, ".mod23");
          break;
          case 24:
          (*info->fprintf_func) (info->stream, ".mod24");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src2_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%llx",(long long unsigned)imm_dat.uint64());
        return 16;
      }
      break;
      case 0x10000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        // Instruction stop
        (*info->fprintf_func) (info->stream, "%-25s","stop");
        return 16;
      }
      break;
      case 0x14000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>immed_or_reg_src_loop ATTRIBUTE_UNUSED = get_immed_or_reg_src_loop_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>loop_cnt ATTRIBUTE_UNUSED = get_loop_cnt_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>loop_wrnum ATTRIBUTE_UNUSED = get_loop_wrnum_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction loop
        (*info->fprintf_func) (info->stream, "%-25s","loop");
        switch (immed_or_reg_src_loop.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".reg");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",loop_cnt.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",loop_wrnum.uint32());
        return 16;
      }
      break;
      case 0x18000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        // Instruction next
        (*info->fprintf_func) (info->stream, "%-25s","next");
        return 16;
      }
      break;
      case 0x1c000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>sync_type ATTRIBUTE_UNUSED = get_sync_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<5>sync_csid ATTRIBUTE_UNUSED = get_sync_csid_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        if ((sync_type == 0x0) && (sync_csid == 0x0)) {
          // Instruction sync_
          (*info->fprintf_func) (info->stream, "sync");
          return 16;
        }
        if ((sync_type == 0x3) && (sync_csid == 0x0)) {
          // Instruction sync_dsp
          (*info->fprintf_func) (info->stream, "sync.dsp");
          return 16;
        }
        // Instruction sync
        (*info->fprintf_func) (info->stream, "%-25s","sync");
        switch (sync_type.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".pdma");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".thread");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".dsp");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "%u",sync_csid.uint32());
        return 16;
      }
      break;
      case 0x20000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>ev_type ATTRIBUTE_UNUSED = get_ev_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<7>wait_ev ATTRIBUTE_UNUSED = get_wait_ev_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction wait
        (*info->fprintf_func) (info->stream, "wait");
        switch (ev_type.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".cpu");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".ext");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".int");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",wait_ev.uint32());
        return 16;
      }
      break;
      case 0x24000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>ev_lvl ATTRIBUTE_UNUSED = get_ev_lvl_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>ev_type ATTRIBUTE_UNUSED = get_ev_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>evt_ev ATTRIBUTE_UNUSED = get_evt_ev_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction evt_
        (*info->fprintf_func) (info->stream, "%-25s","evt_");
        switch (ev_lvl.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".low");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".high");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (ev_type.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".cpu");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".ext");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".int");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (evt_ev.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".lsb");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bit1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bit2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bit3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bit4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bit5");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bit6");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".msb");
          break;
        }
        return 16;
      }
      break;
      case 0x28000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>wdog_ev_tr ATTRIBUTE_UNUSED = get_wdog_ev_tr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>wdog_op ATTRIBUTE_UNUSED = get_wdog_op_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>wdog_ev ATTRIBUTE_UNUSED = get_wdog_ev_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<24>wdog_cnt ATTRIBUTE_UNUSED = get_wdog_cnt_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction watchdog_
        (*info->fprintf_func) (info->stream, "%-25s","watchdog_");
        switch (wdog_ev_tr.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".l0");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".l1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".pos");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".neg");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (wdog_op.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".start");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".stop");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".reset");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".event");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (wdog_ev.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".ev0");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ev1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".ev2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".ev3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".rcs");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".rfs");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",wdog_cnt.uint32());
        return 16;
      }
      break;
      case 0x2c000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>immed_or_reg_src_fld ATTRIBUTE_UNUSED = get_immed_or_reg_src_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>shift_fld ATTRIBUTE_UNUSED = get_shift_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<5>modulo_val ATTRIBUTE_UNUSED = get_modulo_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src2_add ATTRIBUTE_UNUSED = get_src2_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<48>imm_dat ATTRIBUTE_UNUSED = get_imm_dat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction sub_
        (*info->fprintf_func) (info->stream, "%-25s","sub_");
        switch (immed_or_reg_src_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".immed");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (shift_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noshift");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shift");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (modulo_val.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".mod1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".mod2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".mod3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".mod4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".mod5");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".mod6");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".mod7");
          break;
          case 8:
          (*info->fprintf_func) (info->stream, ".mod8");
          break;
          case 9:
          (*info->fprintf_func) (info->stream, ".mod9");
          break;
          case 10:
          (*info->fprintf_func) (info->stream, ".mod10");
          break;
          case 11:
          (*info->fprintf_func) (info->stream, ".mod11");
          break;
          case 12:
          (*info->fprintf_func) (info->stream, ".mod12");
          break;
          case 13:
          (*info->fprintf_func) (info->stream, ".mod13");
          break;
          case 14:
          (*info->fprintf_func) (info->stream, ".mod14");
          break;
          case 15:
          (*info->fprintf_func) (info->stream, ".mod15");
          break;
          case 16:
          (*info->fprintf_func) (info->stream, ".mod16");
          break;
          case 17:
          (*info->fprintf_func) (info->stream, ".mod17");
          break;
          case 18:
          (*info->fprintf_func) (info->stream, ".mod18");
          break;
          case 19:
          (*info->fprintf_func) (info->stream, ".mod19");
          break;
          case 20:
          (*info->fprintf_func) (info->stream, ".mod20");
          break;
          case 21:
          (*info->fprintf_func) (info->stream, ".mod21");
          break;
          case 22:
          (*info->fprintf_func) (info->stream, ".mod22");
          break;
          case 23:
          (*info->fprintf_func) (info->stream, ".mod23");
          break;
          case 24:
          (*info->fprintf_func) (info->stream, ".mod24");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src2_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%llx",(long long unsigned)imm_dat.uint64());
        return 16;
      }
      break;
      case 0x30000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>immed_or_reg_src_fld ATTRIBUTE_UNUSED = get_immed_or_reg_src_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src2_add ATTRIBUTE_UNUSED = get_src2_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<48>imm_dat ATTRIBUTE_UNUSED = get_imm_dat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction cmp_
        (*info->fprintf_func) (info->stream, "%-25s","cmp_");
        switch (immed_or_reg_src_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".immed");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src2_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%llx",(long long unsigned)imm_dat.uint64());
        return 16;
      }
      break;
      case 0x34000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>jmp_type ATTRIBUTE_UNUSED = get_jmp_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>jmp_sel ATTRIBUTE_UNUSED = get_jmp_sel_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>jmp_wr ATTRIBUTE_UNUSED = get_jmp_wr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        sbits<32>jmp_addr ATTRIBUTE_UNUSED = get_jmp_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]).signExtend<32>();
        if ((jmp_type == 0x0) && (jmp_sel == 0x0) && (jmp_wr == 0x0)) {
          // Instruction jump_alw
          (*info->fprintf_func) (info->stream, "%-25s","jumpa");
          (*info->fprintf_func) (info->stream, "0x");
          (*info->print_address_func) (((memaddr + jmp_addr.int32()) & ((1ull << 32)-1)), info);
          return 16;
        }
        // Instruction jump_
        (*info->fprintf_func) (info->stream, "%-25s","jump_");
        switch (jmp_type.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".cond");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (jmp_sel.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bit0");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bit1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bit2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bit3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bit4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bit5");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bit6");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bit7");
          break;
          case 8:
          (*info->fprintf_func) (info->stream, ".bit8");
          break;
          case 9:
          (*info->fprintf_func) (info->stream, ".bit9");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",jmp_wr.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->print_address_func) (((memaddr + jmp_addr.int32()) & ((1ull << 32)-1)), info);
        return 16;
      }
      break;
      case 0x38000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>re_im ATTRIBUTE_UNUSED = get_re_im_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>sel_wr ATTRIBUTE_UNUSED = get_sel_wr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src2_add ATTRIBUTE_UNUSED = get_src2_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>sel_src3_add ATTRIBUTE_UNUSED = get_sel_src3_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>sel_src1_add ATTRIBUTE_UNUSED = get_sel_src1_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction sel_
        (*info->fprintf_func) (info->stream, "%-25s","sel_");
        switch (re_im.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".im");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".re");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",sel_wr.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src2_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",sel_src3_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",sel_src1_add.uint32());
        return 16;
      }
      break;
      case 0x3c000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<13>rpt_cnt ATTRIBUTE_UNUSED = get_rpt_cnt_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>rpt_addr_incr0 ATTRIBUTE_UNUSED = get_rpt_addr_incr0_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>rpt_addr_incr1 ATTRIBUTE_UNUSED = get_rpt_addr_incr1_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>rpt_addr_incr2 ATTRIBUTE_UNUSED = get_rpt_addr_incr2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>rpt_addr_incr3 ATTRIBUTE_UNUSED = get_rpt_addr_incr3_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction repeat
        (*info->fprintf_func) (info->stream, "%-25s","repeat");
        (*info->fprintf_func) (info->stream, "0x%x",rpt_cnt.uint32());
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",rpt_addr_incr0.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",rpt_addr_incr1.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",rpt_addr_incr2.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",rpt_addr_incr3.uint32());
        return 16;
      }
      break;
      case 0x40000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<4>th_id ATTRIBUTE_UNUSED = get_th_id_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction thread
        (*info->fprintf_func) (info->stream, "%-25s","thread");
        (*info->fprintf_func) (info->stream, "%u",th_id.uint32());
        return 16;
      }
      break;
      case 0x74000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>in_dattyp2 ATTRIBUTE_UNUSED = get_in_dattyp2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>pre_proc ATTRIBUTE_UNUSED = get_pre_proc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>sort_type ATTRIBUTE_UNUSED = get_sort_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>in_pack ATTRIBUTE_UNUSED = get_in_pack_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>sort_rank ATTRIBUTE_UNUSED = get_sort_rank_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>set_size ATTRIBUTE_UNUSED = get_set_size_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction sort_
        (*info->fprintf_func) (info->stream, "%-25s","sort_");
        switch (in_dattyp2.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".log2");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (pre_proc.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_pre");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".abs_abs_proc");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".abs_mag_proc");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "%u",sort_type.uint32());
        (*info->fprintf_func) (info->stream, ",");
        switch (in_pack.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".in_24real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".in_24im");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".in_48packed");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "%u",sort_rank.uint32());
        (*info->fprintf_func) (info->stream, ",");
        switch (set_size.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".ss4");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ss8");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".ss16");
          break;
        }
        return 16;
      }
      break;
      case 0x84000000ul: {
        switch (insn[0] & 0xff80) {
          case 0x0ul: {
            unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
            
            bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>win_type ATTRIBUTE_UNUSED = get_win_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>cc_im ATTRIBUTE_UNUSED = get_cc_im_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>cc_re ATTRIBUTE_UNUSED = get_cc_re_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            // Instruction win_mm0_
            (*info->fprintf_func) (info->stream, "%-25s","win");
            (*info->fprintf_func) (info->stream, "mult_mode=0 ");
            switch (ima_fld.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".imm");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".ind");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (in_dattyp.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".real");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (win_type.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx_win");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".real_win_im_tram");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".real_win_real_tram");
              break;
            }
            (*info->fprintf_func) (info->stream, " shift= ");
            switch (shft_val.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".nosft");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shift1");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".shift2");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".shift3");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".shift4");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".shift8");
              break;
            }
            (*info->fprintf_func) (info->stream, " vec_size=");
            (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
            (*info->fprintf_func) (info->stream, " src=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
            (*info->fprintf_func) (info->stream, " dest=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
            (*info->fprintf_func) (info->stream, " src_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " dest_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " cc_im=");
            (*info->fprintf_func) (info->stream, "0x%x",cc_im.uint32());
            (*info->fprintf_func) (info->stream, " cc_re=");
            (*info->fprintf_func) (info->stream, "0x%x",cc_re.uint32());
            return 16;
          }
          break;
          default:{
            unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
            
            bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>win_type ATTRIBUTE_UNUSED = get_win_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>mult_coef_add ATTRIBUTE_UNUSED = get_mult_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<4>mca_mod ATTRIBUTE_UNUSED = get_mca_mod_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>shft_ofst ATTRIBUTE_UNUSED = get_shft_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<9>mca_inc ATTRIBUTE_UNUSED = get_mca_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<6>shft_wr ATTRIBUTE_UNUSED = get_shft_wr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>mult_mod ATTRIBUTE_UNUSED = get_mult_mod_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            // Instruction win_mmn0_
            (*info->fprintf_func) (info->stream, "%-25s","win");
            (*info->fprintf_func) (info->stream, "mult_mode=");
            switch (mult_mod.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".immed");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".const");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".caddr");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (ima_fld.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".imm");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".ind");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (in_dattyp.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".real");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (win_type.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx_win");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".real_win_im_tram");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".real_win_real_tram");
              break;
            }
            (*info->fprintf_func) (info->stream, " shft=");
            switch (shft_src.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".shft_val");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shft_wr");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (shft_val.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".nosft");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shift1");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".shift2");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".shift3");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".shift4");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".shift8");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            (*info->fprintf_func) (info->stream, "0x%x",shft_wr.uint32());
            (*info->fprintf_func) (info->stream, " ");
            switch (shft_ofst.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".bits_0_5");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".bits_6_11");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".bits_12_17");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".bits_18_23");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".bits_24_29");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".bits_30_35");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".bits_36_41");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".bits_42_47");
              break;
            }
            (*info->fprintf_func) (info->stream, " vec_size=");
            (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
            (*info->fprintf_func) (info->stream, " src=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
            (*info->fprintf_func) (info->stream, " dest=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
            (*info->fprintf_func) (info->stream, " mult_coef=");
            (*info->fprintf_func) (info->stream, "0x%x",mult_coef_add.uint32());
            (*info->fprintf_func) (info->stream, " mca_mod=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " mca_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " src_inc=");
            switch (mca_mod.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".mod2");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".mod4");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".mod8");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".mod16");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".mod32");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".mod64");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".mod128");
              break;
              case 8:
              (*info->fprintf_func) (info->stream, ".mod256");
              break;
              case 9:
              (*info->fprintf_func) (info->stream, ".mod512");
              break;
            }
            (*info->fprintf_func) (info->stream, " dest_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",mca_inc.uint32());
            return 16;
          } }
      }
      break;
      case 0x88000000ul: {
        switch (insn[0] & 0xff80) {
          case 0x0ul: {
            switch (insn[3] & 0x60000) {
              case 0x0ul: {
                unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
                
                bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<2>win_type_rdx ATTRIBUTE_UNUSED = get_win_type_rdx_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<3>fft_rnd ATTRIBUTE_UNUSED = get_fft_rnd_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<1>quad_ext ATTRIBUTE_UNUSED = get_quad_ext_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<2>repeat ATTRIBUTE_UNUSED = get_repeat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>cc_im ATTRIBUTE_UNUSED = get_cc_im_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>cc_re ATTRIBUTE_UNUSED = get_cc_re_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<4>tw_ovs ATTRIBUTE_UNUSED = get_tw_ovs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                // Instruction rdx4_mm0_
                (*info->fprintf_func) (info->stream, "%-25s","rdx4");
                (*info->fprintf_func) (info->stream, "mult_mode=0 ");
                switch (ima_fld.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".imm");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".ind");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (in_dattyp.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".real");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".cmplx");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (win_type_rdx.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".no_win");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".cmplx_win");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".real_win_im_tram");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".real_win_real_tram");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (repeat.uint32()) {
                  case 1:
                  (*info->fprintf_func) (info->stream, ".fft8");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".fft16");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".fft32");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (quad_ext.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".noqext");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".qext");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (tw_ovs.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".noovs");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".ovs2");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".ovs4");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".ovs8");
                  break;
                  case 4:
                  (*info->fprintf_func) (info->stream, ".ovs16");
                  break;
                  case 5:
                  (*info->fprintf_func) (info->stream, ".ovs32");
                  break;
                  case 6:
                  (*info->fprintf_func) (info->stream, ".ovs64");
                  break;
                  case 7:
                  (*info->fprintf_func) (info->stream, ".ovs128");
                  break;
                  case 8:
                  (*info->fprintf_func) (info->stream, ".ovs256");
                  break;
                  case 9:
                  (*info->fprintf_func) (info->stream, ".ovs512");
                  break;
                }
                (*info->fprintf_func) (info->stream, " fft_round=");
                switch (fft_rnd.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".round0");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".round1");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".round2");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".round3");
                  break;
                  case 4:
                  (*info->fprintf_func) (info->stream, ".round4");
                  break;
                  case 5:
                  (*info->fprintf_func) (info->stream, ".round5");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (shft_val.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".nosft");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".shift1");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".shift2");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".shift3");
                  break;
                  case 4:
                  (*info->fprintf_func) (info->stream, ".shift4");
                  break;
                  case 5:
                  (*info->fprintf_func) (info->stream, ".shift8");
                  break;
                }
                (*info->fprintf_func) (info->stream, " vec_size=");
                (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
                (*info->fprintf_func) (info->stream, " src=");
                (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
                (*info->fprintf_func) (info->stream, " dest=");
                (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
                (*info->fprintf_func) (info->stream, " src_inc=");
                (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
                (*info->fprintf_func) (info->stream, " dest_inc=");
                (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
                (*info->fprintf_func) (info->stream, " cc_im=");
                (*info->fprintf_func) (info->stream, "0x%x",cc_im.uint32());
                (*info->fprintf_func) (info->stream, " cc_re=");
                (*info->fprintf_func) (info->stream, "0x%x",cc_re.uint32());
                return 16;
              }
              break;
              default:;
              (*info->fprintf_func) (info->stream, ".long 0x%x",insn[0]);
              return 8;
            }
          }
          break;
          default:{
            unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
            
            bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>win_type_rdx ATTRIBUTE_UNUSED = get_win_type_rdx_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>fft_rnd ATTRIBUTE_UNUSED = get_fft_rnd_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>adptv ATTRIBUTE_UNUSED = get_adptv_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>adptv_shft ATTRIBUTE_UNUSED = get_adptv_shft_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>quad_ext ATTRIBUTE_UNUSED = get_quad_ext_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>repeat ATTRIBUTE_UNUSED = get_repeat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>mult_coef_add ATTRIBUTE_UNUSED = get_mult_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<4>mca_mod ATTRIBUTE_UNUSED = get_mca_mod_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>adptv_ofst ATTRIBUTE_UNUSED = get_adptv_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<9>mca_inc ATTRIBUTE_UNUSED = get_mca_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<6>adptv_wrnum ATTRIBUTE_UNUSED = get_adptv_wrnum_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>mult_mod ATTRIBUTE_UNUSED = get_mult_mod_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<4>tw_ovs ATTRIBUTE_UNUSED = get_tw_ovs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            // Instruction rdx4_mmn0_
            (*info->fprintf_func) (info->stream, "%-25s","rdx4");
            (*info->fprintf_func) (info->stream, "mult_mode=");
            switch (mult_mod.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".immed");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".const");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".caddr");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (ima_fld.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".imm");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".ind");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (in_dattyp.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".real");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (win_type_rdx.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".no_win");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx_win");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".real_win_im_tram");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".real_win_real_tram");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (repeat.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".fft8");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".fft16");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".fft32");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (quad_ext.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".noqext");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".qext");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (tw_ovs.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".noovs");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".ovs2");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".ovs4");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".ovs8");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".ovs16");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".ovs32");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".ovs64");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".ovs128");
              break;
              case 8:
              (*info->fprintf_func) (info->stream, ".ovs256");
              break;
              case 9:
              (*info->fprintf_func) (info->stream, ".ovs512");
              break;
            }
            (*info->fprintf_func) (info->stream, " fft_round=");
            switch (fft_rnd.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".round0");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".round1");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".round2");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".round3");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".round4");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".round5");
              break;
            }
            (*info->fprintf_func) (info->stream, " adptv=");
            switch (adptv.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".noadptv");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".adptv");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (adptv_shft.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".15down");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".23down");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
            (*info->fprintf_func) (info->stream, " ");
            switch (adptv_ofst.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".bits_0_5");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".bits_6_11");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".bits_12_17");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".bits_18_23");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".bits_24_29");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".bits_30_35");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".bits_36_41");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".bits_42_47");
              break;
            }
            (*info->fprintf_func) (info->stream, "  shift=");
            switch (shft_val.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".nosft");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shift1");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".shift2");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".shift3");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".shift4");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".shift8");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (shft_src.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".shft_val");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shft_wr");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
            (*info->fprintf_func) (info->stream, " ");
            switch (adptv_ofst.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".bits_0_5");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".bits_6_11");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".bits_12_17");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".bits_18_23");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".bits_24_29");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".bits_30_35");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".bits_36_41");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".bits_42_47");
              break;
            }
            (*info->fprintf_func) (info->stream, " vec_size=");
            (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
            (*info->fprintf_func) (info->stream, " src=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
            (*info->fprintf_func) (info->stream, " dest=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
            (*info->fprintf_func) (info->stream, " mult_coef=");
            (*info->fprintf_func) (info->stream, "0x%x",mult_coef_add.uint32());
            (*info->fprintf_func) (info->stream, " src_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " dest_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " mca_mod=");
            switch (mca_mod.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".mod2");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".mod4");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".mod8");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".mod16");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".mod32");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".mod64");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".mod128");
              break;
              case 8:
              (*info->fprintf_func) (info->stream, ".mod256");
              break;
              case 9:
              (*info->fprintf_func) (info->stream, ".mod512");
              break;
            }
            (*info->fprintf_func) (info->stream, " mca_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",mca_inc.uint32());
            return 16;
          } }
      }
      break;
      case 0x8c000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>fft_rnd_rdx2 ATTRIBUTE_UNUSED = get_fft_rnd_rdx2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>real_fft ATTRIBUTE_UNUSED = get_real_fft_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>adptv ATTRIBUTE_UNUSED = get_adptv_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>adptv_shft ATTRIBUTE_UNUSED = get_adptv_shft_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>quad_ext ATTRIBUTE_UNUSED = get_quad_ext_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>repeat2 ATTRIBUTE_UNUSED = get_repeat2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>mult_coef_add ATTRIBUTE_UNUSED = get_mult_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>adptv_ofst ATTRIBUTE_UNUSED = get_adptv_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>adptv_wrnum ATTRIBUTE_UNUSED = get_adptv_wrnum_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>tw_ovs ATTRIBUTE_UNUSED = get_tw_ovs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction rdx2_
        (*info->fprintf_func) (info->stream, "%-25s","rdx2");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (quad_ext.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noqext");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".qext");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (tw_ovs.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noovs");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ovs2");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".ovs4");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".ovs8");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".ovs16");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".ovs32");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".ovs64");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".ovs128");
          break;
          case 8:
          (*info->fprintf_func) (info->stream, ".ovs256");
          break;
          case 9:
          (*info->fprintf_func) (info->stream, ".ovs512");
          break;
        }
        (*info->fprintf_func) (info->stream, " fft_round=");
        switch (fft_rnd_rdx2.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".round1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".round2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".round3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".round4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".round5");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (repeat2.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".fft8");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".fft32");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (real_fft.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".nosplit");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".opsplit");
          break;
        }
        (*info->fprintf_func) (info->stream, " adptv=");
        switch (adptv.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noadptv");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".adptv");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (adptv_shft.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".15down");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".23down");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
        (*info->fprintf_func) (info->stream, " ");
        switch (adptv_ofst.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bits_0_5");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bits_6_11");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bits_12_17");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bits_18_23");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bits_24_29");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bits_30_35");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bits_36_41");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bits_42_47");
          break;
        }
        (*info->fprintf_func) (info->stream, " shift=");
        switch (shft_val.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".nosft");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shift1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".shift2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".shift3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".shift4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".shift8");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (shft_src.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".shft_val");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shft_wr");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
        (*info->fprintf_func) (info->stream, " ");
        switch (adptv_ofst.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bits_0_5");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bits_6_11");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bits_12_17");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bits_18_23");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bits_24_29");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bits_30_35");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bits_36_41");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bits_42_47");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " mult_coef=");
        (*info->fprintf_func) (info->stream, "0x%x",mult_coef_add.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        return 16;
      }
      break;
      case 0x90000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>in_dattyp2 ATTRIBUTE_UNUSED = get_in_dattyp2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>pre_proc ATTRIBUTE_UNUSED = get_pre_proc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>hist_mode ATTRIBUTE_UNUSED = get_hist_mode_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>bin_sz ATTRIBUTE_UNUSED = get_bin_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>pack_en ATTRIBUTE_UNUSED = get_pack_en_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>threshold ATTRIBUTE_UNUSED = get_threshold_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>dat_sz ATTRIBUTE_UNUSED = get_dat_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction hist_
        (*info->fprintf_func) (info->stream, "%-25s","hist");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp2.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".log2");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (pre_proc.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_pre");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".abs_abs_proc");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".abs_mag_proc");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (hist_mode.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".read_store");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".read");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".acc");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".store");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (bin_sz.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".16_24bins");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".32bins");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".64bins");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (pack_en.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_pack_real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".no_pack_im");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".pack");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (dat_sz.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".16bits");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".24bits");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",threshold.uint32());
        return 16;
      }
      break;
      case 0x94000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>in_dattyp2 ATTRIBUTE_UNUSED = get_in_dattyp2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>pre_proc ATTRIBUTE_UNUSED = get_pre_proc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>rst_acc ATTRIBUTE_UNUSED = get_rst_acc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>cp_type ATTRIBUTE_UNUSED = get_cp_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>rst_n_keep ATTRIBUTE_UNUSED = get_rst_n_keep_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>blk_src_inc ATTRIBUTE_UNUSED = get_blk_src_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<7>blk_dest_inc ATTRIBUTE_UNUSED = get_blk_dest_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>mask ATTRIBUTE_UNUSED = get_mask_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>thld_add ATTRIBUTE_UNUSED = get_thld_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction copy_
        (*info->fprintf_func) (info->stream, "%-25s","copy");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp2.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".log2");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (cp_type.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".simple_copy");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".threshold_ge");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".threshold_lt");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".transpose_copy");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".copy_real_pack");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".copy_imag_pack");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".copy_unpack");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".partial_copy_real");
          break;
          case 8:
          (*info->fprintf_func) (info->stream, ".partial_copy_imag");
          break;
          case 9:
          (*info->fprintf_func) (info->stream, ".partial_copy_r2i");
          break;
          case 10:
          (*info->fprintf_func) (info->stream, ".partial_copy_i2r");
          break;
          case 11:
          (*info->fprintf_func) (info->stream, ".copy_clear");
          break;
          case 12:
          (*info->fprintf_func) (info->stream, ".copy_shift");
          break;
          case 13:
          (*info->fprintf_func) (info->stream, ".transpose_fwd");
          break;
          case 14:
          (*info->fprintf_func) (info->stream, ".transpose_bck");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (rst_n_keep.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".keep_orig");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".reset_values");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " blk_src_inc=");
        (*info->fprintf_func) (info->stream, "%u",blk_src_inc.uint32());
        (*info->fprintf_func) (info->stream, " blk_dest_inc=");
        (*info->fprintf_func) (info->stream, "%u",blk_dest_inc.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",mask.uint32());
        (*info->fprintf_func) (info->stream, " thld=");
        switch (pre_proc.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_pre");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".abs_abs_proc");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".abs_mag_proc");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (rst_acc.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_rst");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".rst_wr");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",thld_add.uint32());
        return 16;
      }
      break;
      case 0x98000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>rst_acc_vmt ATTRIBUTE_UNUSED = get_rst_acc_vmt_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>in_dattyp_vmt ATTRIBUTE_UNUSED = get_in_dattyp_vmt_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>opsq1 ATTRIBUTE_UNUSED = get_opsq1_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>opsq2s1 ATTRIBUTE_UNUSED = get_opsq2s1_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>opsq2s2 ATTRIBUTE_UNUSED = get_opsq2s2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>opsq2s3 ATTRIBUTE_UNUSED = get_opsq2s3_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>op_pack ATTRIBUTE_UNUSED = get_op_pack_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>ip_pack ATTRIBUTE_UNUSED = get_ip_pack_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>mult_s_exp_n_val_addr ATTRIBUTE_UNUSED = get_mult_s_exp_n_val_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>imdt_offset_val_im ATTRIBUTE_UNUSED = get_imdt_offset_val_im_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>extra_offset_val_im ATTRIBUTE_UNUSED = get_extra_offset_val_im_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction vmt_
        (*info->fprintf_func) (info->stream, "%-25s","vmt");
        switch (in_dattyp_vmt.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (rst_acc_vmt.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_rst");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".rst_sum");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (ip_pack.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".in_24real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".in_24im");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".in_48");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (op_pack.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".op_off");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".op_on");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (opsq1.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_sq1");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".sq1");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (opsq2s1.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_sq2s1");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".abs_sq2s1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".mag_sq2s1");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".conj_sq2s1");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (opsq2s2.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_sq2s2");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shft_sq2s2");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".wr_off_sq2s2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, "imm_off_sqs2");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".vec_sq2s2");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (opsq2s3.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_sq2s3");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".sum_sq2s3");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " mult_s_exp_n_val_addr=");
        (*info->fprintf_func) (info->stream, "0x%x",mult_s_exp_n_val_addr.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",imdt_offset_val_im.uint32());
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",extra_offset_val_im.uint32());
        return 16;
      }
      break;
      case 0x9c000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<2>in_dattyp2 ATTRIBUTE_UNUSED = get_in_dattyp2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>pre_proc ATTRIBUTE_UNUSED = get_pre_proc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>thld_cmp ATTRIBUTE_UNUSED = get_thld_cmp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>in_tag ATTRIBUTE_UNUSED = get_in_tag_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>loc_n_abs ATTRIBUTE_UNUSED = get_loc_n_abs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>tag_n_bitfld ATTRIBUTE_UNUSED = get_tag_n_bitfld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>cyc_extn ATTRIBUTE_UNUSED = get_cyc_extn_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>maxsn_en ATTRIBUTE_UNUSED = get_maxsn_en_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>in_pack ATTRIBUTE_UNUSED = get_in_pack_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>maxsn_sel ATTRIBUTE_UNUSED = get_maxsn_sel_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>thld_add ATTRIBUTE_UNUSED = get_thld_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction maxs_
        (*info->fprintf_func) (info->stream, "%-25s","maxs");
        switch (loc_n_abs.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".global_max");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".local_max");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (maxsn_en.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".masxn_dis");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".maxsn_en");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp2.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".log2");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (pre_proc.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_pre");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".abs_abs_proc");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".abs_mag_proc");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (thld_cmp.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_thld_cmp");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".thld_cmp");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_tag.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_tag_in");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".tag_in");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (tag_n_bitfld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".packed_bitfld");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".tagged_vect");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (cyc_extn.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_cyc_ext");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cyc_ext");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_pack.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".in_24real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".in_24im");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".in_48packed");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (maxsn_sel.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".no_maxsn");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".maxsn_16");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".maxsn_8");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".maxsn_4");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",thld_add.uint32());
        return 16;
      }
      break;
      case 0xa0000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>immed_or_reg_src_fld ATTRIBUTE_UNUSED = get_immed_or_reg_src_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>se ATTRIBUTE_UNUSED = get_se_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>data_packing ATTRIBUTE_UNUSED = get_data_packing_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>trans_type ATTRIBUTE_UNUSED = get_trans_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>sync_async ATTRIBUTE_UNUSED = get_sync_async_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>vector_len ATTRIBUTE_UNUSED = get_vector_len_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<32>sysram_mem_start_addr ATTRIBUTE_UNUSED = get_sysram_mem_start_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>opram_mem_start_addr ATTRIBUTE_UNUSED = get_opram_mem_start_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>opram_skip_addr ATTRIBUTE_UNUSED = get_opram_skip_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>opram_continuous_addr ATTRIBUTE_UNUSED = get_opram_continuous_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>sysram_skip_addr ATTRIBUTE_UNUSED = get_sysram_skip_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<12>sysram_continous_addr ATTRIBUTE_UNUSED = get_sysram_continous_addr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction pdma_
        (*info->fprintf_func) (info->stream, "%-25s","pdma_");
        switch (immed_or_reg_src_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".immed");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (se.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".zeropad");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".signext");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (data_packing.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".16cmplx");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".24cmplx");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".24real");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".16real");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".48bin");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".16swap");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".16clubbing");
          break;
          case 17:
          (*info->fprintf_func) (info->stream, ".CP4Q");
          break;
          case 18:
          (*info->fprintf_func) (info->stream, ".CP4Q_FMTA");
          break;
          case 19:
          (*info->fprintf_func) (info->stream, ".CP4Q_FMTB");
          break;
          case 20:
          (*info->fprintf_func) (info->stream, ".CP8D_FMTA");
          break;
          case 21:
          (*info->fprintf_func) (info->stream, ".CP8D_FMTB");
          break;
          case 22:
          (*info->fprintf_func) (info->stream, ".CP8D_FMTC");
          break;
          case 23:
          (*info->fprintf_func) (info->stream, ".CP16_FMTA");
          break;
          case 24:
          (*info->fprintf_func) (info->stream, ".CP16_FMTB");
          break;
          case 25:
          (*info->fprintf_func) (info->stream, ".CP16_FMTC");
          break;
          case 26:
          (*info->fprintf_func) (info->stream, ".CP16_FMTD");
          break;
          case 27:
          (*info->fprintf_func) (info->stream, ".CP32_FMTB");
          break;
          case 34:
          (*info->fprintf_func) (info->stream, ".abs_8_untagged");
          break;
          case 35:
          (*info->fprintf_func) (info->stream, ".idx_8_untagged");
          break;
          case 36:
          (*info->fprintf_func) (info->stream, ".idx_sum8_untagged");
          break;
          case 37:
          (*info->fprintf_func) (info->stream, ".abs_8_tagged");
          break;
          case 38:
          (*info->fprintf_func) (info->stream, ".idx_8_tagged");
          break;
          case 39:
          (*info->fprintf_func) (info->stream, ".idx_sum8_tagged");
          break;
          case 40:
          (*info->fprintf_func) (info->stream, ".abs_16_untagged");
          break;
          case 41:
          (*info->fprintf_func) (info->stream, ".idx_16_untagged");
          break;
          case 42:
          (*info->fprintf_func) (info->stream, ".idx_sum16_untagged");
          break;
          case 43:
          (*info->fprintf_func) (info->stream, ".abs_16_tagged");
          break;
          case 44:
          (*info->fprintf_func) (info->stream, ".idx_16_tagged");
          break;
          case 45:
          (*info->fprintf_func) (info->stream, ".idx_sum16_tagged");
          break;
          case 46:
          (*info->fprintf_func) (info->stream, ".abs_24_untagged");
          break;
          case 47:
          (*info->fprintf_func) (info->stream, ".idx_24_untagged");
          break;
          case 48:
          (*info->fprintf_func) (info->stream, ".idx_sum24_untagged");
          break;
          case 49:
          (*info->fprintf_func) (info->stream, ".abs_24_tagged");
          break;
          case 50:
          (*info->fprintf_func) (info->stream, ".idx_24_tagged");
          break;
          case 51:
          (*info->fprintf_func) (info->stream, ".idx_sum24_tagged");
          break;
          case 52:
          (*info->fprintf_func) (info->stream, ".abs_32_untagged");
          break;
          case 53:
          (*info->fprintf_func) (info->stream, ".idx_32_untagged");
          break;
          case 54:
          (*info->fprintf_func) (info->stream, ".idx_sum32_untagged");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (trans_type.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".sysram2opram");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".opram2sysram");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        switch (sync_async.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".async");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".sync");
          break;
        }
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",vector_len.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%llx",(long long unsigned)sysram_mem_start_addr.uint64());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",opram_mem_start_addr.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",opram_skip_addr.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",opram_continuous_addr.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",sysram_skip_addr.uint32());
        (*info->fprintf_func) (info->stream, ",");
        (*info->fprintf_func) (info->stream, "0x%x",sysram_continous_addr.uint32());
        return 16;
      }
      break;
      case 0xa4000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>win_type ATTRIBUTE_UNUSED = get_win_type_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>init ATTRIBUTE_UNUSED = get_init_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>no_of_taps ATTRIBUTE_UNUSED = get_no_of_taps_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>tap_coef_add ATTRIBUTE_UNUSED = get_tap_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>shft_ofst ATTRIBUTE_UNUSED = get_shft_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>shft_wr ATTRIBUTE_UNUSED = get_shft_wr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction fir_
        (*info->fprintf_func) (info->stream, "%-25s","fir");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (win_type.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx_win");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".real_win_im_tram");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".real_win_real_tram");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (init.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".zero_init");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".const_init");
          break;
        }
        (*info->fprintf_func) (info->stream, " taps=");
        (*info->fprintf_func) (info->stream, "%u",no_of_taps.uint32());
        (*info->fprintf_func) (info->stream, " shift=");
        switch (shft_src.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".shft_val");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shft_wr");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",shft_wr.uint32());
        (*info->fprintf_func) (info->stream, " ");
        switch (shft_ofst.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bits_0_5");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bits_6_11");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bits_12_17");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bits_18_23");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bits_24_29");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bits_30_35");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bits_36_41");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bits_42_47");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (shft_val.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".nosft");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shift1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".shift2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".shift3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".shift4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".shift8");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " tap_coef=");
        (*info->fprintf_func) (info->stream, "0x%x",tap_coef_add.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        return 16;
      }
      break;
      case 0xa8000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>re_im_coeff ATTRIBUTE_UNUSED = get_re_im_coeff_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>no_of_taps ATTRIBUTE_UNUSED = get_no_of_taps_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>mult_coef_add ATTRIBUTE_UNUSED = get_mult_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>shft_ofst ATTRIBUTE_UNUSED = get_shft_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>shft_wr ATTRIBUTE_UNUSED = get_shft_wr_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction scp_
        (*info->fprintf_func) (info->stream, "%-25s","scp");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (re_im_coeff.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".coef_cmplx");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".coef_im");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".coef_re");
          break;
        }
        (*info->fprintf_func) (info->stream, " no_of_taps=");
        (*info->fprintf_func) (info->stream, "%u",no_of_taps.uint32());
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " mult_coef=");
        (*info->fprintf_func) (info->stream, "0x%x",mult_coef_add.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " shift=");
        switch (shft_val.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".nosft");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shift1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".shift2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".shift3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".shift4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".shift8");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (shft_src.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".shft_val");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shft_wr");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",shft_wr.uint32());
        (*info->fprintf_func) (info->stream, " ");
        switch (shft_ofst.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bits_0_5");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bits_6_11");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bits_12_17");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bits_18_23");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bits_24_29");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bits_30_35");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bits_36_41");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bits_42_47");
          break;
        }
        return 16;
      }
      break;
      case 0xac000000ul: {
        switch (insn[0] & 0xff80) {
          case 0x0ul: {
            switch (insn[3] & 0x60000) {
              case 0x0ul: {
                unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
                
                bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<2>win_type_rdx ATTRIBUTE_UNUSED = get_win_type_rdx_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<3>fft_rnd ATTRIBUTE_UNUSED = get_fft_rnd_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<1>quad_ext ATTRIBUTE_UNUSED = get_quad_ext_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<2>repeat ATTRIBUTE_UNUSED = get_repeat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>cc_im ATTRIBUTE_UNUSED = get_cc_im_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<16>cc_re ATTRIBUTE_UNUSED = get_cc_re_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                bits<4>tw_ovs ATTRIBUTE_UNUSED = get_tw_ovs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
                // Instruction irdx4_mm0_
                (*info->fprintf_func) (info->stream, "%-25s","irdx4");
                (*info->fprintf_func) (info->stream, "mult_mode=0 ");
                switch (ima_fld.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".imm");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".ind");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (in_dattyp.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".real");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".cmplx");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (win_type_rdx.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".no_win");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".cmplx_win");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".real_win_im_tram");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".real_win_real_tram");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (repeat.uint32()) {
                  case 1:
                  (*info->fprintf_func) (info->stream, ".fft8");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".fft16");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".fft32");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (quad_ext.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".noqext");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".qext");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (tw_ovs.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".noovs");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".ovs2");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".ovs4");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".ovs8");
                  break;
                  case 4:
                  (*info->fprintf_func) (info->stream, ".ovs16");
                  break;
                  case 5:
                  (*info->fprintf_func) (info->stream, ".ovs32");
                  break;
                  case 6:
                  (*info->fprintf_func) (info->stream, ".ovs64");
                  break;
                  case 7:
                  (*info->fprintf_func) (info->stream, ".ovs128");
                  break;
                  case 8:
                  (*info->fprintf_func) (info->stream, ".ovs256");
                  break;
                  case 9:
                  (*info->fprintf_func) (info->stream, ".ovs512");
                  break;
                }
                (*info->fprintf_func) (info->stream, " fft_round=");
                switch (fft_rnd.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".round0");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".round1");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".round2");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".round3");
                  break;
                  case 4:
                  (*info->fprintf_func) (info->stream, ".round4");
                  break;
                  case 5:
                  (*info->fprintf_func) (info->stream, ".round5");
                  break;
                }
                (*info->fprintf_func) (info->stream, " ");
                switch (shft_val.uint32()) {
                  case 0:
                  (*info->fprintf_func) (info->stream, ".nosft");
                  break;
                  case 1:
                  (*info->fprintf_func) (info->stream, ".shift1");
                  break;
                  case 2:
                  (*info->fprintf_func) (info->stream, ".shift2");
                  break;
                  case 3:
                  (*info->fprintf_func) (info->stream, ".shift3");
                  break;
                  case 4:
                  (*info->fprintf_func) (info->stream, ".shift4");
                  break;
                  case 5:
                  (*info->fprintf_func) (info->stream, ".shift8");
                  break;
                }
                (*info->fprintf_func) (info->stream, " vec_size=");
                (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
                (*info->fprintf_func) (info->stream, " src=");
                (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
                (*info->fprintf_func) (info->stream, " dest=");
                (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
                (*info->fprintf_func) (info->stream, " src_inc=");
                (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
                (*info->fprintf_func) (info->stream, " dest_inc=");
                (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
                (*info->fprintf_func) (info->stream, " cc_im=");
                (*info->fprintf_func) (info->stream, "0x%x",cc_im.uint32());
                (*info->fprintf_func) (info->stream, " cc_re=");
                (*info->fprintf_func) (info->stream, "0x%x",cc_re.uint32());
                return 16;
              }
              break;
              default:;
              (*info->fprintf_func) (info->stream, ".long 0x%x",insn[0]);
              return 8;
            }
          }
          break;
          default:{
            unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
            
            bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>win_type_rdx ATTRIBUTE_UNUSED = get_win_type_rdx_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>fft_rnd ATTRIBUTE_UNUSED = get_fft_rnd_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>adptv ATTRIBUTE_UNUSED = get_adptv_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>adptv_shft ATTRIBUTE_UNUSED = get_adptv_shft_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>quad_ext ATTRIBUTE_UNUSED = get_quad_ext_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>repeat ATTRIBUTE_UNUSED = get_repeat_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<16>mult_coef_add ATTRIBUTE_UNUSED = get_mult_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<4>mca_mod ATTRIBUTE_UNUSED = get_mca_mod_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>adptv_ofst ATTRIBUTE_UNUSED = get_adptv_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<9>mca_inc ATTRIBUTE_UNUSED = get_mca_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<6>adptv_wrnum ATTRIBUTE_UNUSED = get_adptv_wrnum_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<2>mult_mod ATTRIBUTE_UNUSED = get_mult_mod_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            bits<4>tw_ovs ATTRIBUTE_UNUSED = get_tw_ovs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
            // Instruction irdx4_mmn0_
            (*info->fprintf_func) (info->stream, "%-25s","irdx4");
            (*info->fprintf_func) (info->stream, "mult_mode=");
            switch (mult_mod.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".immed");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".const");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".caddr");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (ima_fld.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".imm");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".ind");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (in_dattyp.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".real");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (win_type_rdx.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".no_win");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".cmplx_win");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".real_win_im_tram");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".real_win_real_tram");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (repeat.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".fft8");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".fft16");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".fft32");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (quad_ext.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".noqext");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".qext");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (tw_ovs.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".noovs");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".ovs2");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".ovs4");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".ovs8");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".ovs16");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".ovs32");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".ovs64");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".ovs128");
              break;
              case 8:
              (*info->fprintf_func) (info->stream, ".ovs256");
              break;
              case 9:
              (*info->fprintf_func) (info->stream, ".ovs512");
              break;
            }
            (*info->fprintf_func) (info->stream, " fft_round=");
            switch (fft_rnd.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".round0");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".round1");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".round2");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".round3");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".round4");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".round5");
              break;
            }
            (*info->fprintf_func) (info->stream, " adptv=");
            switch (adptv.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".noadptv");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".adptv");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (adptv_shft.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".15down");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".23down");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
            (*info->fprintf_func) (info->stream, " ");
            switch (adptv_ofst.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".bits_0_5");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".bits_6_11");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".bits_12_17");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".bits_18_23");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".bits_24_29");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".bits_30_35");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".bits_36_41");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".bits_42_47");
              break;
            }
            (*info->fprintf_func) (info->stream, "  shift=");
            switch (shft_val.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".nosft");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shift1");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".shift2");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".shift3");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".shift4");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".shift8");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            switch (shft_src.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".shft_val");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".shft_wr");
              break;
            }
            (*info->fprintf_func) (info->stream, " ");
            (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
            (*info->fprintf_func) (info->stream, " ");
            switch (adptv_ofst.uint32()) {
              case 0:
              (*info->fprintf_func) (info->stream, ".bits_0_5");
              break;
              case 1:
              (*info->fprintf_func) (info->stream, ".bits_6_11");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".bits_12_17");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".bits_18_23");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".bits_24_29");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".bits_30_35");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".bits_36_41");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".bits_42_47");
              break;
            }
            (*info->fprintf_func) (info->stream, " vec_size=");
            (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
            (*info->fprintf_func) (info->stream, " src=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
            (*info->fprintf_func) (info->stream, " dest=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
            (*info->fprintf_func) (info->stream, " mult_coef=");
            (*info->fprintf_func) (info->stream, "0x%x",mult_coef_add.uint32());
            (*info->fprintf_func) (info->stream, " src_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " dest_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
            (*info->fprintf_func) (info->stream, " mca_mod=");
            switch (mca_mod.uint32()) {
              case 1:
              (*info->fprintf_func) (info->stream, ".mod2");
              break;
              case 2:
              (*info->fprintf_func) (info->stream, ".mod4");
              break;
              case 3:
              (*info->fprintf_func) (info->stream, ".mod8");
              break;
              case 4:
              (*info->fprintf_func) (info->stream, ".mod16");
              break;
              case 5:
              (*info->fprintf_func) (info->stream, ".mod32");
              break;
              case 6:
              (*info->fprintf_func) (info->stream, ".mod64");
              break;
              case 7:
              (*info->fprintf_func) (info->stream, ".mod128");
              break;
              case 8:
              (*info->fprintf_func) (info->stream, ".mod256");
              break;
              case 9:
              (*info->fprintf_func) (info->stream, ".mod512");
              break;
            }
            (*info->fprintf_func) (info->stream, " mca_inc=");
            (*info->fprintf_func) (info->stream, "0x%x",mca_inc.uint32());
            return 16;
          } }
      }
      break;
      case 0xb0000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<1>in_dattyp ATTRIBUTE_UNUSED = get_in_dattyp_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>fft_rnd_rdx2 ATTRIBUTE_UNUSED = get_fft_rnd_rdx2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>adptv ATTRIBUTE_UNUSED = get_adptv_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>adptv_shft ATTRIBUTE_UNUSED = get_adptv_shft_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>quad_ext ATTRIBUTE_UNUSED = get_quad_ext_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<2>repeat2 ATTRIBUTE_UNUSED = get_repeat2_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>ima_fld ATTRIBUTE_UNUSED = get_ima_fld_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<13>vec_sz ATTRIBUTE_UNUSED = get_vec_sz_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>src_add ATTRIBUTE_UNUSED = get_src_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>dest_add ATTRIBUTE_UNUSED = get_dest_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<16>mult_coef_add ATTRIBUTE_UNUSED = get_mult_coef_add_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>src_add_inc ATTRIBUTE_UNUSED = get_src_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<8>dest_add_inc ATTRIBUTE_UNUSED = get_dest_add_inc_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>adptv_ofst ATTRIBUTE_UNUSED = get_adptv_ofst_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<6>adptv_wrnum ATTRIBUTE_UNUSED = get_adptv_wrnum_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<1>shft_src ATTRIBUTE_UNUSED = get_shft_src_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<3>shft_val ATTRIBUTE_UNUSED = get_shft_val_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        bits<4>tw_ovs ATTRIBUTE_UNUSED = get_tw_ovs_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction irdx2_
        (*info->fprintf_func) (info->stream, "%-25s","irdx2");
        switch (ima_fld.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".imm");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ind");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (in_dattyp.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".real");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".cmplx");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (quad_ext.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noqext");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".qext");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (tw_ovs.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noovs");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".ovs2");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".ovs4");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".ovs8");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".ovs16");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".ovs32");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".ovs64");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".ovs128");
          break;
          case 8:
          (*info->fprintf_func) (info->stream, ".ovs256");
          break;
          case 9:
          (*info->fprintf_func) (info->stream, ".ovs512");
          break;
        }
        (*info->fprintf_func) (info->stream, " fft_round=");
        switch (fft_rnd_rdx2.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".round1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".round2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".round3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".round4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".round5");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (repeat2.uint32()) {
          case 1:
          (*info->fprintf_func) (info->stream, ".fft8");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".fft32");
          break;
        }
        (*info->fprintf_func) (info->stream, " adptv=");
        switch (adptv.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".noadptv");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".adptv");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (adptv_shft.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".15down");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".23down");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
        (*info->fprintf_func) (info->stream, " ");
        switch (adptv_ofst.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bits_0_5");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bits_6_11");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bits_12_17");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bits_18_23");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bits_24_29");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bits_30_35");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bits_36_41");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bits_42_47");
          break;
        }
        (*info->fprintf_func) (info->stream, " shift=");
        switch (shft_val.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".nosft");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shift1");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".shift2");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".shift3");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".shift4");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".shift8");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        switch (shft_src.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".shft_val");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".shft_wr");
          break;
        }
        (*info->fprintf_func) (info->stream, " ");
        (*info->fprintf_func) (info->stream, "0x%x",adptv_wrnum.uint32());
        (*info->fprintf_func) (info->stream, " ");
        switch (adptv_ofst.uint32()) {
          case 0:
          (*info->fprintf_func) (info->stream, ".bits_0_5");
          break;
          case 1:
          (*info->fprintf_func) (info->stream, ".bits_6_11");
          break;
          case 2:
          (*info->fprintf_func) (info->stream, ".bits_12_17");
          break;
          case 3:
          (*info->fprintf_func) (info->stream, ".bits_18_23");
          break;
          case 4:
          (*info->fprintf_func) (info->stream, ".bits_24_29");
          break;
          case 5:
          (*info->fprintf_func) (info->stream, ".bits_30_35");
          break;
          case 6:
          (*info->fprintf_func) (info->stream, ".bits_36_41");
          break;
          case 7:
          (*info->fprintf_func) (info->stream, ".bits_42_47");
          break;
        }
        (*info->fprintf_func) (info->stream, " vec_size=");
        (*info->fprintf_func) (info->stream, "%u",vec_sz.uint32());
        (*info->fprintf_func) (info->stream, " src=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add.uint32());
        (*info->fprintf_func) (info->stream, " dest=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add.uint32());
        (*info->fprintf_func) (info->stream, " mult_coef=");
        (*info->fprintf_func) (info->stream, "0x%x",mult_coef_add.uint32());
        (*info->fprintf_func) (info->stream, " src_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",src_add_inc.uint32());
        (*info->fprintf_func) (info->stream, " dest_inc=");
        (*info->fprintf_func) (info->stream, "0x%x",dest_add_inc.uint32());
        return 16;
      }
      break;
      case 0xb8000000ul: {
        unsigned tmpinsn[4] ATTRIBUTE_UNUSED = {insn[0], insn[1], insn[2], insn[3]};
        
        bits<63>dsp_value ATTRIBUTE_UNUSED = get_dsp_value_width_128(tmpinsn[0], tmpinsn[1], tmpinsn[2], tmpinsn[3]);
        // Instruction dsp
        (*info->fprintf_func) (info->stream, "%-25s","dsp");
        (*info->fprintf_func) (info->stream, "0x%llx",(long long unsigned)dsp_value.uint64());
        return 16;
      }
      break;
      default:;
      (*info->fprintf_func) (info->stream, ".long 0x%x",insn[0]);
      return 8;
    }
    (*info->fprintf_func) (info->stream, ".long 0x%x",insn[0]);
    info->bytes_per_chunk = 4;
    return 4;
  }
  
  Disassemble ()
  {
  }
  
};

static Disassemble disassemble_obj;

static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(258,0,0,0,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_AARCH64_ABS32",0,0x0,0x0,0), // relocation R_AARCH64_ABS32 (R_AARCH64_ABS32)
  HOWTO(5,0,2,32,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_ADDR32",0,0x0,0xffffffff,0), // relocation R_ADDR32 (R_ADDR32)
  HOWTO(2,0,0,0,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_ARM_ABS32",0,0x0,0x0,0), // relocation R_ARM_ABS32 (R_ARM_ABS32)
  HOWTO(4,0,2,32,1,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_REL32",0,0x0,0xffffffff,1), // relocation R_REL32 (R_REL32)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos ATTRIBUTE_UNUSED = 5;

extern "C" reloc_howto_type *adl_elf_info_to_howto(unsigned r)
{
  switch (r) {
    case 258:
    return &ppc_elf_howto_table[0];
    case 5:
    return &ppc_elf_howto_table[1];
    case 2:
    return &ppc_elf_howto_table[2];
    case 4:
    return &ppc_elf_howto_table[3];
  }
  return 0;
}

addr_t R_REL32_action(addr_t relocation , int is_linker){
      return ( is_linker ) ? relocation + 8 : relocation ;
}

typedef void (*reloc_setter)(unsigned *,unsigned,int,bfd_uint64_t);
typedef bfd_uint64_t (*reloc_action)(bfd_uint64_t,int);

static void R_ADDR32_set (unsigned *data,unsigned size,int big_endian,bfd_uint64_t addr)
{
  Disassemble::clear_sysram_mem_start_addr_width_128(data);
  Disassemble::set_sysram_mem_start_addr_width_128(data,addr);
}

static void R_REL32_set (unsigned *data,unsigned size,int big_endian,bfd_uint64_t addr)
{
  Disassemble::clear_jmp_addr_width_128(data);
  Disassemble::set_jmp_addr_width_128(data,addr);
}

extern "C" void adl_get_reloc_funcs(unsigned r,reloc_setter *rs,reloc_action *ra,int *size,int *inner_size,int *offset)
{
  switch (r) {
    case 258:
    break;
    case 5:
    *rs = R_ADDR32_set;
    *size = 16;
    *inner_size = 0;
    *offset = 4;
    break;
    case 2:
    break;
    case 4:
    *rs = R_REL32_set;
    *size = 16;
    *inner_size = 0;
    *offset = 8;
    *ra = R_REL32_action;
    break;
  }
}

const char *adl_arch_name = "ppc";

extern "C" const bfd_arch_info_type bfd_adl_arch =
{
  32, /* number of bits in a word. */
  32, /* number of bits in an address. */
  8, /* number of bits in a byte. */
  bfd_arch_powerpc,
  bfd_mach_ppc,
  "ppc",
  "ppc",
  3,
  TRUE,
  bfd_default_compatible,
  bfd_default_scan,
  bfd_arch_default_fill,
  0
};

extern "C" int ppc_print_insn (bfd_vma memaddr, struct disassemble_info *info,int bigendian);

extern "C" int ppc_print_insn (bfd_vma memaddr, struct disassemble_info *info,int bigendian)
{
  bfd_byte buffer[16];
  unsigned  insn[4];
  int status;
  
  int size = 16;
  if (info->buffer_length) {
    if (memaddr+size > (info->buffer_vma+info->buffer_length)) {
      size = (info->buffer_vma+info->buffer_length)-memaddr;
      memset(buffer,0,16);
    }
  }
  status = (*info->read_memory_func) (memaddr, buffer, size, info);
  if (status != 0) {
    (*info->memory_error_func) (status, memaddr, info);
    return -1;
  }
  if (bigendian) {
    insn[0] = bfd_getb32 (buffer +0*4);
    insn[1] = bfd_getb32 (buffer +1*4);
    insn[2] = bfd_getb32 (buffer +2*4);
    insn[3] = bfd_getb32 (buffer +3*4);
  } else {
    insn[0] = bfd_getl32 (buffer +0*4);
    insn[1] = bfd_getl32 (buffer +1*4);
    insn[2] = bfd_getl32 (buffer +2*4);
    insn[3] = bfd_getl32 (buffer +3*4);
  }
  int sz = disassemble_obj.disassemble_insn(memaddr,insn,info);
  return sz;
}

